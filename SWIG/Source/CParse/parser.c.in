/* A Bison parser, made by GNU Bison 1.875a.  */

/* Skeleton parser for Yacc-like parsing with Bison,
   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* Written by Richard Stallman by simplifying the original so called
   ``semantic'' parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Using locations.  */
#define YYLSP_NEEDED 0



/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ID = 258,
     HBLOCK = 259,
     POUND = 260,
     STRING = 261,
     INCLUDE = 262,
     IMPORT = 263,
     INSERT = 264,
     CHARCONST = 265,
     NUM_INT = 266,
     NUM_FLOAT = 267,
     NUM_UNSIGNED = 268,
     NUM_LONG = 269,
     NUM_ULONG = 270,
     NUM_LONGLONG = 271,
     NUM_ULONGLONG = 272,
     TYPEDEF = 273,
     TYPE_INT = 274,
     TYPE_UNSIGNED = 275,
     TYPE_SHORT = 276,
     TYPE_LONG = 277,
     TYPE_FLOAT = 278,
     TYPE_DOUBLE = 279,
     TYPE_CHAR = 280,
     TYPE_VOID = 281,
     TYPE_SIGNED = 282,
     TYPE_BOOL = 283,
     TYPE_TYPEDEF = 284,
     TYPE_RAW = 285,
     LPAREN = 286,
     RPAREN = 287,
     COMMA = 288,
     SEMI = 289,
     EXTERN = 290,
     INIT = 291,
     LBRACE = 292,
     RBRACE = 293,
     PERIOD = 294,
     CONST = 295,
     VOLATILE = 296,
     STRUCT = 297,
     UNION = 298,
     EQUAL = 299,
     SIZEOF = 300,
     MODULE = 301,
     LBRACKET = 302,
     RBRACKET = 303,
     ILLEGAL = 304,
     CONSTANT = 305,
     NAME = 306,
     RENAME = 307,
     NAMEWARN = 308,
     EXTEND = 309,
     PRAGMA = 310,
     FEATURE = 311,
     VARARGS = 312,
     ENUM = 313,
     CLASS = 314,
     TYPENAME = 315,
     PRIVATE = 316,
     PUBLIC = 317,
     PROTECTED = 318,
     COLON = 319,
     STATIC = 320,
     VIRTUAL = 321,
     FRIEND = 322,
     THROW = 323,
     CATCH = 324,
     USING = 325,
     NAMESPACE = 326,
     NATIVE = 327,
     INLINE = 328,
     TYPEMAP = 329,
     EXCEPT = 330,
     ECHO = 331,
     APPLY = 332,
     CLEAR = 333,
     SWIGTEMPLATE = 334,
     FRAGMENT = 335,
     WARN = 336,
     LESSTHAN = 337,
     GREATERTHAN = 338,
     MODULO = 339,
     DELETE = 340,
     TYPES = 341,
     PARMS = 342,
     NONID = 343,
     DSTAR = 344,
     DCNOT = 345,
     TEMPLATE = 346,
     OPERATOR = 347,
     COPERATOR = 348,
     PARSETYPE = 349,
     PARSEPARM = 350,
     CAST = 351,
     LOR = 352,
     LAND = 353,
     OR = 354,
     XOR = 355,
     AND = 356,
     RSHIFT = 357,
     LSHIFT = 358,
     MINUS = 359,
     PLUS = 360,
     SLASH = 361,
     STAR = 362,
     LNOT = 363,
     NOT = 364,
     UMINUS = 365,
     DCOLON = 366
   };
#endif
#define ID 258
#define HBLOCK 259
#define POUND 260
#define STRING 261
#define INCLUDE 262
#define IMPORT 263
#define INSERT 264
#define CHARCONST 265
#define NUM_INT 266
#define NUM_FLOAT 267
#define NUM_UNSIGNED 268
#define NUM_LONG 269
#define NUM_ULONG 270
#define NUM_LONGLONG 271
#define NUM_ULONGLONG 272
#define TYPEDEF 273
#define TYPE_INT 274
#define TYPE_UNSIGNED 275
#define TYPE_SHORT 276
#define TYPE_LONG 277
#define TYPE_FLOAT 278
#define TYPE_DOUBLE 279
#define TYPE_CHAR 280
#define TYPE_VOID 281
#define TYPE_SIGNED 282
#define TYPE_BOOL 283
#define TYPE_TYPEDEF 284
#define TYPE_RAW 285
#define LPAREN 286
#define RPAREN 287
#define COMMA 288
#define SEMI 289
#define EXTERN 290
#define INIT 291
#define LBRACE 292
#define RBRACE 293
#define PERIOD 294
#define CONST 295
#define VOLATILE 296
#define STRUCT 297
#define UNION 298
#define EQUAL 299
#define SIZEOF 300
#define MODULE 301
#define LBRACKET 302
#define RBRACKET 303
#define ILLEGAL 304
#define CONSTANT 305
#define NAME 306
#define RENAME 307
#define NAMEWARN 308
#define EXTEND 309
#define PRAGMA 310
#define FEATURE 311
#define VARARGS 312
#define ENUM 313
#define CLASS 314
#define TYPENAME 315
#define PRIVATE 316
#define PUBLIC 317
#define PROTECTED 318
#define COLON 319
#define STATIC 320
#define VIRTUAL 321
#define FRIEND 322
#define THROW 323
#define CATCH 324
#define USING 325
#define NAMESPACE 326
#define NATIVE 327
#define INLINE 328
#define TYPEMAP 329
#define EXCEPT 330
#define ECHO 331
#define APPLY 332
#define CLEAR 333
#define SWIGTEMPLATE 334
#define FRAGMENT 335
#define WARN 336
#define LESSTHAN 337
#define GREATERTHAN 338
#define MODULO 339
#define DELETE 340
#define TYPES 341
#define PARMS 342
#define NONID 343
#define DSTAR 344
#define DCNOT 345
#define TEMPLATE 346
#define OPERATOR 347
#define COPERATOR 348
#define PARSETYPE 349
#define PARSEPARM 350
#define CAST 351
#define LOR 352
#define LAND 353
#define OR 354
#define XOR 355
#define AND 356
#define RSHIFT 357
#define LSHIFT 358
#define MINUS 359
#define PLUS 360
#define SLASH 361
#define STAR 362
#define LNOT 363
#define NOT 364
#define UMINUS 365
#define DCOLON 366




/* Copy the first part of user declarations.  */
#line 1 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"

/* -----------------------------------------------------------------------------
 * parser.y
 *
 *     YACC parser for SWIG.   The grammar is a somewhat broken subset of C/C++.
 *     This file is a bit of a mess and probably needs to be rewritten at
 *     some point.  Beware.
 *
 * Author(s) : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (C) 1998-2001.  The University of Chicago
 * Copyright (C) 1995-1998.  The University of Utah and The Regents of the
 *                           University of California.
 *
 * See the file LICENSE for information on usage and redistribution.
 * ----------------------------------------------------------------------------- */

#define yylex yylex

char cvsroot_parser_y[] = "Header";

#include "swig.h"
#include "cparse.h"
#include "preprocessor.h"
#include <ctype.h>

/* We do this for portability */
#undef alloca
#define alloca malloc

/* -----------------------------------------------------------------------------
 *                               Externals
 * ----------------------------------------------------------------------------- */

int  yyparse();

/* NEW Variables */

static Node    *top = 0;      /* Top of the generated parse tree */
static int      unnamed = 0;  /* Unnamed datatype counter */
static Hash    *extendhash = 0;     /* Hash table of added methods */
static Hash    *classes = 0;        /* Hash table of classes */
static Symtab  *prev_symtab = 0;
static Node    *current_class = 0;
       String  *ModuleName = 0;
static Node    *module_node = 0;
static String  *Classprefix = 0;  
static String  *Namespaceprefix = 0;
static int      inclass = 0;
static char    *last_cpptype = 0;
static int      inherit_list = 0;
static Parm    *template_parameters = 0;
static int      extendmode   = 0;
static int      dirprot_mode  = 0;

/* -----------------------------------------------------------------------------
 *                            Assist Functions
 * ----------------------------------------------------------------------------- */

/* Called by the parser (yyparse) when an error is found.*/
static void yyerror (const char *e) {
}

static Node *new_node(const String_or_char *tag) {
  Node *n = NewHash();
  set_nodeType(n,tag);
  Setfile(n,cparse_file);
  Setline(n,cparse_line);
  return n;
}

/* Copies a node.  Does not copy tree links or symbol table data (except for
   sym:name) */

static Node *copy_node(Node *n) {
  Node *nn;
  String *key;
  Iterator k;
  nn = NewHash();
  Setfile(nn,Getfile(n));
  Setline(nn,Getline(n));
  for (k = First(n); k.key; k = Next(k)) {
    key = k.key;
    if ((Strcmp(key,"nextSibling") == 0) ||
	(Strcmp(key,"previousSibling") == 0) ||
	(Strcmp(key,"parentNode") == 0) ||
	(Strcmp(key,"lastChild") == 0)) {
      continue;
    }
    if (Strncmp(key,"csym:",5) == 0) continue;
    /* We do copy sym:name.  For templates */
    if ((Strcmp(key,"sym:name") == 0) || 
	(Strcmp(key,"sym:weak") == 0) ||
	(Strcmp(key,"sym:typename") == 0)) {
      Setattr(nn,key, Copy(k.item));
      continue;
    }
    if (Strcmp(key,"sym:symtab") == 0) {
      Setattr(nn,"sym:needs_symtab", "1");
    }
    /* We don't copy any other symbol table attributes */
    if (Strncmp(key,"sym:",4) == 0) {
      continue;
    }
    /* If children.  We copy them recursively using this function */
    if (Strcmp(key,"firstChild") == 0) {
      /* Copy children */
      Node *cn = k.item;
      while (cn) {
	appendChild(nn,copy_node(cn));
	cn = nextSibling(cn);
      }
      continue;
    }
    /* We don't copy the symbol table.  But we drop an attribute 
       requires_symtab so that functions know it needs to be built */

    if (Strcmp(key,"symtab") == 0) {
      /* Node defined a symbol table. */
      Setattr(nn,"requires_symtab","1");
      continue;
    }
    /* Can't copy nodes */
    if (Strcmp(key,"node") == 0) {
      continue;
    }
    if ((Strcmp(key,"parms") == 0) || (Strcmp(key,"pattern") == 0) || (Strcmp(key,"throws") == 0))  {
      Setattr(nn,key,CopyParmList(k.item));
      continue;
    }
    /* Looks okay.  Just copy the data using Copy */
    Setattr(nn, key, Copy(k.item));
  }
  return nn;
}

/* -----------------------------------------------------------------------------
 *                              Variables
 * ----------------------------------------------------------------------------- */

      char  *typemap_lang = 0;    /* Current language setting */

static int cplus_mode  = 0;
static String  *class_rename = 0;

/* C++ modes */

#define  CPLUS_PUBLIC    1
#define  CPLUS_PRIVATE   2
#define  CPLUS_PROTECTED 3

void SWIG_typemap_lang(const char *tm_lang) {
  typemap_lang = Swig_copy_string(tm_lang);
}

/* -----------------------------------------------------------------------------
 *                           Assist functions
 * ----------------------------------------------------------------------------- */

/* Perform type-promotion for binary operators */
static int promote(int t1, int t2) {
  return t1 > t2 ? t1 : t2;
}

static String *yyrename = 0;

/* Forward renaming operator */
static Hash   *rename_hash = 0;
static Hash   *namewarn_hash = 0;
static Hash   *features_hash = 0;

static String *feature_identifier_fix(String *s) {
  if (SwigType_istemplate(s)) {
    String *tp, *ts, *ta, *tq;
    tp = SwigType_templateprefix(s);
    ts = SwigType_templatesuffix(s);
    ta = SwigType_templateargs(s);
    tq = Swig_symbol_type_qualify(ta,0);
    Append(tp,tq);
    Append(tp,ts);
    Delete(ts);
    Delete(ta);
    Delete(tq);
    return tp;
  } else {
    return NewString(s);
  }
}

static void
rename_add(char *name, SwigType *decl, char *newname) {
  String *nname;
  if (!rename_hash) rename_hash = NewHash();
  if (Namespaceprefix) {
    nname = NewStringf("%s::%s",Namespaceprefix, name);
  } else {
    nname = NewString(name);
  }
  Swig_name_object_set(rename_hash,nname,decl,NewString(newname));
  Delete(nname);
}

static void
namewarn_add(char *name, SwigType *decl, char *warning) {
  String *nname;
  if (!namewarn_hash) namewarn_hash = NewHash();
  if (Namespaceprefix) {
    nname = NewStringf("%s::%s",Namespaceprefix, name);
  } else {
    nname = NewString(name);
  }

  Swig_name_object_set(namewarn_hash,nname,decl,NewString(warning));
  Delete(nname);
}

static void
rename_inherit(String *base, String *derived) {
  /*  Printf(stdout,"base = '%s', derived = '%s'\n", base, derived); */
  Swig_name_object_inherit(rename_hash,base,derived);
  Swig_name_object_inherit(namewarn_hash,base,derived);
  Swig_name_object_inherit(features_hash,base,derived);
}

/* Generate the symbol table name for an object */
/* This is a bit of a mess. Need to clean up */
static String *add_oldname = 0;

static String *make_name(String *name,SwigType *decl) {
  String *rn = 0;
  String *origname = name;
  int     destructor = 0;

  if (name && (*(Char(name)) == '~')) {
    destructor = 1;
  }
  if (yyrename) {
    String *s = yyrename;
    yyrename = 0;
    if (destructor) {
      Insert(s,0,"~");
    }
    return s;
  }


  if (!name) return 0;
  /* Check to see if the name is in the hash */
  if (!rename_hash) {
    if (add_oldname) return Copy(add_oldname);
    return origname;
  }
  rn = Swig_name_object_get(rename_hash, Namespaceprefix, name, decl);
  if (!rn) {
    if (add_oldname) return Copy(add_oldname);
    return name;
  }
  if (destructor) {
    if (Strcmp(rn,"$ignore") != 0) {
      String *s = NewStringf("~%s", rn);
      return s;
    }
  }
  return Copy(rn);
}

/* Generate an unnamed identifier */
static String *make_unnamed() {
  unnamed++;
  return NewStringf("$unnamed%d$",unnamed);
}

/* Return the node name when it requires to emit a name warning */
extern int need_name_warning(Node *n);
static String *name_warning(Node *n,String *name,SwigType *decl) {
  /* Return in the obvious cases */
  if (!namewarn_hash || !name || !need_name_warning(n)) return 0;

  /* Check to see if the name is in the hash */
  return Swig_name_object_get(namewarn_hash,Namespaceprefix,name,decl);
}

/* Return if the node is a friend declaration */
static int is_friend(Node *n) {
 return Cmp(Getattr(n,"storage"),"friend") == 0;
}

/* Add declaration list to symbol table */
static int  add_only_one = 0;

static void add_symbols(Node *n) {
  String *decl;
  String *wrn = 0;

  if (inclass) {
    cparse_normalize_void(n);
  }

  while (n) {
    String *symname;
    /* for friends, we need to pop the scope once */
    int isfriend = is_friend(n);
    Symtab *class_scope = isfriend ? Swig_symbol_popscope() : 0;

    if (!isfriend && inclass && (cplus_mode != CPLUS_PUBLIC)) {
      int only_csymbol = 1;
      if (cplus_mode == CPLUS_PROTECTED) {
	Setattr(n,"access", "protected");
	only_csymbol = !need_protected(n, dirprot_mode);
      } else {
	Setattr(n,"access", "private");
      }
      if (only_csymbol) {
	/* Only add to C symbol table and continue */
	Swig_symbol_add(0, n); 
	if (add_only_one) break;
	n = nextSibling(n);
	continue;
      }
    }
    if (Getattr(n,"sym:name")) {
      n = nextSibling(n);
      continue;
    }
    decl = Getattr(n,"decl");
    if (!SwigType_isfunction(decl)) {
      symname = make_name(Getattr(n,"name"),0);
      if (!symname) {
	symname = Getattr(n,"unnamed");
      }
      if (symname) {
	wrn = name_warning(n,symname,0);
	Swig_features_get(features_hash, Namespaceprefix, Getattr(n,"name"), 0, n);
      }
    } else {
      SwigType *fdecl = Copy(decl);
      SwigType *fun = SwigType_pop_function(fdecl);

      /* for friends, we need to disable the class prefix */
      String* class_prefix = isfriend ? Namespaceprefix : 0;
      if (isfriend) Namespaceprefix = 0;

      symname = make_name(Getattr(n,"name"),fun);
      wrn = name_warning(n,symname,fun);
      
      Swig_features_get(features_hash,Namespaceprefix,Getattr(n,"name"),fun,n);
      Delete(fdecl);
      Delete(fun);
      
      /* restore the class prefix if needed */
      if (isfriend) Namespaceprefix = class_prefix;
    }
    if (!symname) {
      n = nextSibling(n);
      continue;
    }
    if (strncmp(Char(symname),"$ignore",7) == 0) {
      char *c = Char(symname)+7;
      Setattr(n,"feature:ignore","1");
      if (strlen(c)) {
	Swig_warning(0,Getfile(n), Getline(n), "%s\n",c+1);
      }
      Swig_symbol_add(0, n);
    } else {
      Node *c;
      if ((wrn) && (Len(wrn))) {
	Swig_warning(0,Getfile(n),Getline(n), "%s\n", wrn);
      }
      if (Strcmp(nodeType(n),"enum") != 0) {
	c = Swig_symbol_add(symname,n);
	if (c != n) {
	  if (Getattr(n,"sym:weak")) {
	    Setattr(n,"sym:name",symname);
	  } else if ((Strcmp(nodeType(n),"template") == 0) && (Strcmp(Getattr(n,"templatetype"),"cdecl") == 0)) {
	    Setattr(n,"sym:name",symname);
	  } else {
	    String *e = NewString("");
	    Printf(e,"Identifier '%s' redeclared (ignored).", symname);
	    if (Cmp(symname,Getattr(n,"name"))) {
	      Printf(e," (Renamed from '%s')", SwigType_namestr(Getattr(n,"name")));
	    }
	    Printf(e,"\n%s:%d: Previous declaration of '%s'", Getfile(c),Getline(c),symname);
	    if (Cmp(symname,Getattr(c,"name"))) {
	      Printf(e," (Renamed from '%s')", SwigType_namestr(Getattr(c,"name")));
	    }
	    /* avoid warning for friend declarations */
	    if (!is_friend(n) && !is_friend(c))
	      Swig_warning(WARN_PARSE_REDEFINED,Getfile(n), Getline(n),"%s\n", e);
	    Setattr(n,"error",e);
	  }
	}
      } else {
	Setattr(n,"sym:name", symname);
      }
    }
    /* restore the class scope if needed */
    if (isfriend) Swig_symbol_setscope(class_scope);

    if (add_only_one) return;
    n = nextSibling(n);
  }
}


/* add symbols a parse tree node copy */

void add_symbols_copy(Node *n) {
  String *name;
  int    emode = 0;

  while (n) {

    if (Strcmp(nodeType(n),"access") == 0) {
      String *kind = Getattr(n,"kind");
      if (Strcmp(kind,"public") == 0) {
	cplus_mode = CPLUS_PUBLIC;
      } else if (Strcmp(kind,"private") == 0) {
	cplus_mode = CPLUS_PRIVATE;
      } else if (Strcmp(kind,"protected") == 0) {
	cplus_mode = CPLUS_PROTECTED;
      }
      n = nextSibling(n);
      continue;
    }

    add_oldname = Getattr(n,"sym:name");
    if ((add_oldname) || (Getattr(n,"sym:needs_symtab"))) {
      if (add_oldname) {
	DohIncref(add_oldname);
	/* If already renamed, we used that name */
	if (Strcmp(add_oldname, Getattr(n,"name")) != 0) {
	  yyrename = add_oldname;
	}
      }
      Delattr(n,"sym:needs_symtab");
      Delattr(n,"sym:name");

      add_only_one = 1;
      add_symbols(n);

      if (Getattr(n,"partialargs")) {
	Swig_symbol_cadd(Getattr(n,"partialargs"),n);
      }
      add_only_one = 0;
      name = Getattr(n,"name");
      if (Getattr(n,"requires_symtab")) {
	Swig_symbol_newscope();
	Swig_symbol_setscopename(name);
	Namespaceprefix = Swig_symbol_qualifiedscopename(0);
      }
      if (Strcmp(nodeType(n),"class") == 0) {
	inclass = 1;
	if (Strcmp(Getattr(n,"kind"),"class") == 0) {
	  cplus_mode = CPLUS_PRIVATE;
	} else {
	  cplus_mode = CPLUS_PUBLIC;
	}
      }
      if (Strcmp(nodeType(n),"extend") == 0) {
	emode = cplus_mode;
	cplus_mode = CPLUS_PUBLIC;
      }
      add_symbols_copy(firstChild(n));
      if (Strcmp(nodeType(n),"extend") == 0) {
	cplus_mode = emode;
      }
      if (Getattr(n,"requires_symtab")) {
	Setattr(n,"symtab", Swig_symbol_popscope());
	Delattr(n,"requires_symtab");
	Namespaceprefix = Swig_symbol_qualifiedscopename(0);
      }
      if (add_oldname) {
	Delete(add_oldname);
      }
      if (Strcmp(nodeType(n),"class") == 0) {
	inclass = 0;
      }
      add_oldname = 0;
    } else {
      if (Strcmp(nodeType(n),"extend") == 0) {
	emode = cplus_mode;
	cplus_mode = CPLUS_PUBLIC;
      }
      add_symbols_copy(firstChild(n));
      if (Strcmp(nodeType(n),"extend") == 0) {
	cplus_mode = emode;
      }
    }
    n = nextSibling(n);
  }
}

/* Extension merge.  This function is used to handle the %extend directive
   when it appears before a class definition.   To handle this, the %extend
   actually needs to take precedence.  Therefore, we will selectively nuke symbols
   from the current symbol table, replacing them with the added methods */

static void merge_extensions(Node *cls, Node *am) {
  Node *n;
  Node *csym;

  n = firstChild(am);
  while (n) {
    String *symname;
    if (Strcmp(nodeType(n),"constructor") == 0) {
      symname = Getattr(n,"sym:name");
      if (symname) {
	if (Strcmp(symname,Getattr(n,"name")) == 0) {
	  /* If the name and the sym:name of a constructor are the same,
             then it hasn't been renamed.  However---the name of the class
             itself might have been renamed so we need to do a consistency
             check here */
	  if (Getattr(cls,"sym:name")) {
	    Setattr(n,"sym:name", Getattr(cls,"sym:name"));
	  }
	}
      } 
    }

    symname = Getattr(n,"sym:name");
    DohIncref(symname);
    if ((symname) && (!Getattr(n,"error"))) {
      /* Remove node from its symbol table */
      Swig_symbol_remove(n);
      csym = Swig_symbol_add(symname,n);
      if (csym != n) {
	/* Conflict with previous definition.  Nuke previous definition */
	String *e = NewString("");
	Printf(e,"Identifier '%s' redeclared (ignored).\n", symname);
	Printf(e,"%s:%d: Previous definition of tag '%s'", Getfile(n),Getline(n), symname);
	Swig_warning(WARN_PARSE_REDEFINED,Getfile(csym), Getline(csym), "%s\n", e);
	Setattr(csym,"error",e);
	Swig_symbol_remove(csym);              /* Remove class definition */
	Swig_symbol_add(symname,n);            /* Insert extend definition */
      }
    }
    n = nextSibling(n);
  }
}

/* Check for unused %extend.  Special case, don't report unused
   extensions for templates */
 
 static void check_extensions() {
   Iterator ki;

   if (!extendhash) return;
   for (ki = First(extendhash); ki.key; ki = Next(ki)) {
     if (!Strstr(ki.key,"<")) {
       Swig_warning(WARN_PARSE_EXTEND_UNDEF,Getfile(ki.item), Getline(ki.item), "%%extend defined for an undeclared class %s.\n", ki.key);
     }
   }
 }

/* Check a set of declarations to see if any are pure-abstract */

 static List *pure_abstract(Node *n) {
   List *abs = 0;
   while (n) {
     if (Cmp(nodeType(n),"cdecl") == 0) {
       String *decl = Getattr(n,"decl");
       if (SwigType_isfunction(decl)) {
	 String *init = Getattr(n,"value");
	 if (Cmp(init,"0") == 0) {
	   if (!abs) {
	     abs = NewList();
	   }
	   Append(abs,n);
	   Setattr(n,"abstract","1");
	 }
       }
     } else if (Cmp(nodeType(n),"destructor") == 0) {
       if (Cmp(Getattr(n,"value"),"0") == 0) {
	 if (!abs) {
	   abs = NewList();
	 }
	 Append(abs,n);
	 Setattr(n,"abstract","1");
       }
     }
     n = nextSibling(n);
   }
   return abs;
 }

 /* Make a classname */

 static String *make_class_name(String *name) {
   String *nname = 0;
   if (Namespaceprefix) {
     nname= NewStringf("%s::%s", Namespaceprefix, name);
   } else {
     nname = NewString(name);
   }
   if (SwigType_istemplate(nname)) {
     String *prefix, *args, *qargs;
     prefix = SwigType_templateprefix(nname);
     args   = SwigType_templateargs(nname);
     qargs  = Swig_symbol_type_qualify(args,0);
     Append(prefix,qargs);
     Delete(nname);
     nname = prefix;
   }
   return nname;
 }

 static List *make_inherit_list(String *clsname, List *names) {
   int i;
   String *derived;
   List *bases = NewList();

   if (Namespaceprefix) derived = NewStringf("%s::%s", Namespaceprefix,clsname);
   else derived = NewString(clsname);

   for (i = 0; i < Len(names); i++) {
     Node *s;
     String *base;
     String *n = Getitem(names,i);
     /* Try to figure out where this symbol is */
     s = Swig_symbol_clookup(n,0);
     if (s) {
       while (s && (Strcmp(nodeType(s),"class") != 0)) {
	 /* Not a class.  Could be a typedef though. */
	 String *storage = Getattr(s,"storage");
	 if (storage && (Strcmp(storage,"typedef") == 0)) {
	   String *nn = Getattr(s,"type");
	   s = Swig_symbol_clookup(nn,Getattr(s,"sym:symtab"));
	 } else {
	   break;
	 }
       }
       if (s && ((Strcmp(nodeType(s),"class") == 0) || (Strcmp(nodeType(s),"template") == 0))) {
	 String *q = Swig_symbol_qualified(s);
	 Append(bases,s);
	 if (q) {
	   base = NewStringf("%s::%s", q, Getattr(s,"name"));
	 } else {
	   base = NewString(Getattr(s,"name"));
	 }
       } else {
	 base = NewString(n);
       }
     } else {
       base = NewString(n);
     }
     if (base) {
       rename_inherit(base,derived);
       Delete(base);
     }
   }
   return bases;
 }

/* Structures for handling code fragments built for nested classes */

typedef struct Nested {
  String   *code;        /* Associated code fragment */
  int      line;         /* line number where it starts */
  char     *name;        /* Name associated with this nested class */
  char     *kind;        /* Kind of class */
  SwigType *type;        /* Datatype associated with the name */
  struct Nested   *next;        /* Next code fragment in list */
} Nested;

/* Some internal variables for saving nested class information */

static Nested      *nested_list = 0;

/* Add a function to the nested list */

static void add_nested(Nested *n) {
  Nested *n1;
  if (!nested_list) nested_list = n;
  else {
    n1 = nested_list;
    while (n1->next) n1 = n1->next;
    n1->next = n;
  }
}

/* Dump all of the nested class declarations to the inline processor
 * However.  We need to do a few name replacements and other munging
 * first.  This function must be called before closing a class! */

static Node *dump_nested(char *parent) {
  Nested *n,*n1;
  Node *ret = 0;
  n = nested_list;
  if (!parent) {
    nested_list = 0;
    return 0;
  }
  while (n) {
    char temp[256];
    Node *retx;
    /* Token replace the name of the parent class */
    Replace(n->code, "$classname", parent, DOH_REPLACE_ANY);
    /* Fix up the name of the datatype (for building typedefs and other stuff) */
    sprintf(temp,"%s_%s", parent,n->name);

    Append(n->type,parent);
    Append(n->type,"_");
    Append(n->type,n->name);

    /* Add the appropriate declaration to the C++ processor */
    retx = new_node("cdecl");
    Setattr(retx,"name",n->name);
    Setattr(retx,"type",Copy(n->type));
    Setattr(retx,"nested",parent);
    add_symbols(retx);
    if (ret) {
      set_nextSibling(retx,ret);
    }
    ret = retx;

    /* Insert a forward class declaration */
    /* Disabled: [ 597599 ] union in class: incorrect scope 
    retx = new_node("classforward");
    Setattr(retx,"kind",n->kind);
    Setattr(retx,"name",Copy(n->type));
    Setattr(retx,"sym:name", make_name(n->type,0));
    set_nextSibling(retx,ret);
    ret = retx; 
    */

    /* Make all SWIG created typedef structs/unions/classes unnamed else 
       redefinition errors occur - nasty hack alert.*/

    {
      const char* types_array[3] = {"struct", "union", "class"};
      int i;
      for (i=0; i<3; i++) {
	char* code_ptr = Char(n->code);
      while (code_ptr) {
        /* Replace struct name (as in 'struct name {' ) with whitespace
           name will be between struct and { */
	
        code_ptr = strstr(code_ptr, types_array[i]);
        if (code_ptr) {
	  char *open_bracket_pos;
          code_ptr += strlen(types_array[i]);
          open_bracket_pos = strstr(code_ptr, "{");
          if (open_bracket_pos) { 
            /* Make sure we don't have something like struct A a; */
            char* semi_colon_pos = strstr(code_ptr, ";");
            if (!(semi_colon_pos && (semi_colon_pos < open_bracket_pos)))
              while (code_ptr < open_bracket_pos)
                *code_ptr++ = ' ';
          }
        }
      }
      }
    }
    
    {
      /* Remove SWIG directive %constant which may be left in the SWIG created typedefs */
      char* code_ptr = Char(n->code);
      while (code_ptr) {
	code_ptr = strstr(code_ptr, "%constant");
	if (code_ptr) {
	  char* directive_end_pos = strstr(code_ptr, ";");
	  if (directive_end_pos) { 
            while (code_ptr <= directive_end_pos)
              *code_ptr++ = ' ';
	  }
	}
      }
    }
    {
      Node *head;
      head = new_node("insert");
      Setattr(head,"code",NewStringf("\n%s\n",n->code));
      set_nextSibling(head,ret);
      ret = head;
    }
      
    /* Dump the code to the scanner */
    start_inline(Char(n->code),n->line);

    n1 = n->next;
    Delete(n->code);
    free(n);
    n = n1;
  }
  nested_list = 0;
  return ret;
}

Node *Swig_cparse(File *f) {
  scanner_file(f);
  top = 0;
  yyparse();
  return top;
}



/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

#if ! defined (YYSTYPE) && ! defined (YYSTYPE_IS_DECLARED)
#line 798 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
typedef union YYSTYPE {
  char  *id;
  List  *bases;
  struct Define {
    String *val;
    String *rawval;
    int     type;
    String *qualifier;
    String *bitfield;
    Parm   *throws;
  } dtype;
  struct {
    char *type;
    char *filename;
    int   line;
  } loc;
  struct {
    char      *id;
    SwigType  *type;
    String    *defarg;
    ParmList  *parms;
    short      have_parms;
    ParmList  *throws;
  } decl;
  Parm         *tparms;
  struct {
    String     *op;
    Hash       *kwargs;
  } tmap;
  struct {
    String     *type;
    String     *us;
  } ptype;
  SwigType     *type;
  String       *str;
  Parm         *p;
  ParmList     *pl;
  int           ivalue;
  Node         *node;
} YYSTYPE;
/* Line 191 of yacc.c.  */
#line 1136 "/home/hoffman/Work/Andy/Swig/Swig-nightly-build/Source/CParse/parser.c"
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */


/* Line 214 of yacc.c.  */
#line 1148 "/home/hoffman/Work/Andy/Swig/Swig-nightly-build/Source/CParse/parser.c"

#if ! defined (yyoverflow) || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || YYERROR_VERBOSE */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif

#if defined (__STDC__) || defined (__cplusplus)
   typedef signed char yysigned_char;
#else
   typedef short yysigned_char;
#endif

/* YYFINAL -- State number of the termination state. */
#define YYFINAL  44
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   3420

/* YYNTOKENS -- Number of terminals. */
#define YYNTOKENS  112
/* YYNNTS -- Number of nonterminals. */
#define YYNNTS  137
/* YYNRULES -- Number of rules. */
#define YYNRULES  421
/* YYNRULES -- Number of states. */
#define YYNSTATES  815

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   366

#define YYTRANSLATE(YYX) 						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const unsigned char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const unsigned short yyprhs[] =
{
       0,     0,     3,     5,     9,    12,    16,    19,    22,    24,
      26,    28,    30,    32,    34,    36,    39,    41,    43,    45,
      47,    49,    51,    53,    55,    57,    59,    61,    63,    65,
      67,    69,    71,    73,    75,    77,    79,    81,    82,    90,
      96,   100,   106,   112,   116,   119,   122,   128,   131,   137,
     140,   148,   156,   157,   165,   167,   169,   172,   175,   177,
     183,   189,   195,   199,   204,   208,   216,   225,   231,   235,
     237,   239,   243,   245,   250,   258,   265,   267,   269,   277,
     287,   293,   301,   303,   305,   311,   319,   321,   325,   332,
     339,   348,   350,   353,   357,   359,   362,   366,   373,   379,
     389,   392,   394,   396,   402,   408,   410,   415,   417,   419,
     422,   428,   435,   443,   452,   459,   461,   463,   465,   467,
     469,   471,   472,   482,   483,   492,   494,   497,   502,   503,
     510,   514,   516,   518,   520,   522,   524,   526,   530,   535,
     536,   543,   544,   550,   556,   559,   560,   567,   569,   570,
     574,   576,   578,   580,   582,   584,   586,   588,   590,   594,
     596,   598,   600,   602,   604,   606,   608,   615,   622,   630,
     639,   648,   656,   662,   665,   668,   671,   672,   680,   681,
     688,   690,   692,   694,   696,   698,   700,   702,   704,   706,
     708,   710,   712,   714,   717,   720,   723,   728,   731,   737,
     739,   742,   744,   746,   748,   750,   752,   754,   757,   759,
     763,   765,   768,   775,   779,   781,   784,   786,   790,   792,
     794,   796,   798,   801,   805,   808,   811,   813,   816,   819,
     821,   823,   825,   827,   830,   834,   836,   839,   843,   848,
     854,   859,   861,   864,   868,   873,   879,   883,   888,   893,
     895,   898,   903,   908,   914,   918,   923,   928,   930,   933,
     936,   940,   942,   945,   947,   950,   954,   959,   963,   968,
     971,   975,   979,   984,   988,   992,   995,   998,  1000,  1002,
    1005,  1007,  1009,  1011,  1014,  1016,  1018,  1020,  1022,  1025,
    1028,  1030,  1033,  1035,  1038,  1040,  1042,  1045,  1047,  1049,
    1051,  1053,  1055,  1057,  1059,  1061,  1062,  1065,  1067,  1069,
    1071,  1075,  1077,  1079,  1083,  1085,  1087,  1089,  1091,  1093,
    1099,  1101,  1103,  1107,  1112,  1118,  1124,  1131,  1133,  1135,
    1137,  1139,  1141,  1143,  1145,  1149,  1153,  1157,  1161,  1165,
    1169,  1173,  1177,  1181,  1185,  1189,  1192,  1195,  1198,  1201,
    1204,  1206,  1207,  1211,  1213,  1215,  1219,  1222,  1227,  1229,
    1231,  1233,  1235,  1237,  1239,  1241,  1243,  1245,  1247,  1252,
    1258,  1260,  1264,  1268,  1273,  1278,  1282,  1285,  1287,  1289,
    1293,  1296,  1300,  1302,  1304,  1306,  1308,  1310,  1313,  1318,
    1320,  1324,  1326,  1330,  1334,  1337,  1340,  1343,  1346,  1349,
    1354,  1356,  1360,  1362,  1366,  1370,  1373,  1376,  1379,  1382,
    1384,  1386,  1388,  1390,  1394,  1396,  1400,  1406,  1408,  1412,
    1414,  1416
};

/* YYRHS -- A `-1'-separated list of the rules' RHS. */
static const short yyrhs[] =
{
     113,     0,    -1,   114,    -1,    94,   191,    34,    -1,    94,
       1,    -1,    95,   191,    34,    -1,    95,     1,    -1,   114,
     115,    -1,   248,    -1,   116,    -1,   150,    -1,   156,    -1,
      34,    -1,     1,    -1,   155,    -1,     1,    93,    -1,   117,
      -1,   119,    -1,   120,    -1,   121,    -1,   122,    -1,   123,
      -1,   124,    -1,   125,    -1,   128,    -1,   129,    -1,   130,
      -1,   131,    -1,   132,    -1,   133,    -1,   136,    -1,   138,
      -1,   140,    -1,   142,    -1,   147,    -1,   148,    -1,   149,
      -1,    -1,    54,   245,   238,    37,   118,   170,    38,    -1,
      77,   146,    37,   144,    38,    -1,    78,   144,    34,    -1,
      50,     3,    44,   213,    34,    -1,    50,   207,   199,   196,
      34,    -1,    50,     1,    34,    -1,    76,     4,    -1,    76,
     243,    -1,    75,    31,     3,    32,    37,    -1,    75,    37,
      -1,    75,    31,     3,    32,    34,    -1,    75,    34,    -1,
      80,    31,   236,    33,   236,    32,     4,    -1,    80,    31,
     236,    33,   236,    32,    37,    -1,    -1,   127,   245,   243,
      47,   126,   114,    48,    -1,     7,    -1,     8,    -1,    73,
       4,    -1,    73,    37,    -1,     4,    -1,     9,    31,   236,
      32,   243,    -1,     9,    31,   236,    32,     4,    -1,     9,
      31,   236,    32,    37,    -1,    46,   245,   236,    -1,    51,
      31,   236,    32,    -1,    51,    31,    32,    -1,    72,    31,
       3,    32,   187,     3,    34,    -1,    72,    31,     3,    32,
     187,   207,   199,    34,    -1,    55,   135,     3,    44,   134,
      -1,    55,   135,     3,    -1,   243,    -1,     4,    -1,    31,
       3,    32,    -1,   248,    -1,   137,   199,   236,    34,    -1,
     137,    31,   236,    32,   199,   230,    34,    -1,   137,    31,
     236,    32,   243,    34,    -1,    52,    -1,    53,    -1,    56,
      31,   236,    32,   199,   230,   139,    -1,    56,    31,   236,
      33,   236,    32,   199,   230,    34,    -1,    56,    31,   236,
      32,   139,    -1,    56,    31,   236,    33,   236,    32,    34,
      -1,   244,    -1,    34,    -1,    87,    31,   188,    32,    34,
      -1,    57,    31,   141,    32,   199,   230,    34,    -1,   188,
      -1,    11,    33,   191,    -1,    74,    31,   143,    32,   144,
     244,    -1,    74,    31,   143,    32,   144,    34,    -1,    74,
      31,   143,    32,   144,    44,   146,    34,    -1,   246,    -1,
     146,   145,    -1,    33,   146,   145,    -1,   248,    -1,   207,
     198,    -1,    31,   188,    32,    -1,    31,   188,    32,    31,
     188,    32,    -1,    86,    31,   188,    32,    34,    -1,    79,
      31,   237,    32,   241,    82,   192,    83,    34,    -1,    81,
     243,    -1,   151,    -1,   154,    -1,    35,   243,    37,   114,
      38,    -1,   187,   207,   199,   153,   152,    -1,    34,    -1,
      33,   199,   153,   152,    -1,    37,    -1,   196,    -1,   205,
     196,    -1,    68,    31,   188,    32,   196,    -1,   205,    68,
      31,   188,    32,   196,    -1,   187,    58,   215,    37,   216,
      38,    34,    -1,   187,    58,   215,    37,   216,    38,   199,
     152,    -1,   187,   207,    31,   188,    32,   231,    -1,   157,
      -1,   161,    -1,   162,    -1,   166,    -1,   167,    -1,   177,
      -1,    -1,   187,   228,   238,   222,    37,   158,   170,    38,
     160,    -1,    -1,   187,   228,    37,   159,   170,    38,   199,
     152,    -1,    34,    -1,   199,   152,    -1,   187,   228,   238,
      34,    -1,    -1,    91,    82,   165,    83,   163,   164,    -1,
      91,   228,   238,    -1,   151,    -1,   157,    -1,   174,    -1,
     162,    -1,   161,    -1,   189,    -1,    70,   238,    34,    -1,
      70,    71,   238,    34,    -1,    -1,    71,   238,    37,   168,
     114,    38,    -1,    -1,    71,    37,   169,   114,    38,    -1,
      71,     3,    44,   238,    34,    -1,   173,   170,    -1,    -1,
      54,    37,   171,   170,    38,   170,    -1,   248,    -1,    -1,
       1,   172,   170,    -1,   150,    -1,   174,    -1,   175,    -1,
     178,    -1,   183,    -1,   176,    -1,   161,    -1,   179,    -1,
     187,   238,    34,    -1,   166,    -1,   162,    -1,   177,    -1,
     148,    -1,   149,    -1,   186,    -1,    34,    -1,   187,   207,
      31,   188,    32,   231,    -1,   109,   240,    31,   188,    32,
     184,    -1,    66,   109,   240,    31,   188,    32,   185,    -1,
     187,    93,   207,   204,    31,   188,    32,   185,    -1,   187,
      93,   207,   101,    31,   188,    32,   185,    -1,   187,    93,
     207,    31,   188,    32,   185,    -1,    69,    31,   188,    32,
      37,    -1,    62,    64,    -1,    61,    64,    -1,    63,    64,
      -1,    -1,   187,   228,     3,    37,   180,   182,    34,    -1,
      -1,   187,   228,    37,   181,   182,    34,    -1,   199,    -1,
     248,    -1,   133,    -1,   121,    -1,   131,    -1,   136,    -1,
     138,    -1,   140,    -1,   129,    -1,   142,    -1,   119,    -1,
     120,    -1,   122,    -1,   230,    34,    -1,   230,    37,    -1,
     230,    34,    -1,   230,    44,   213,    34,    -1,   230,    37,
      -1,   187,   207,    64,    11,    34,    -1,    35,    -1,    35,
     243,    -1,    65,    -1,    18,    -1,    66,    -1,    67,    -1,
     248,    -1,   189,    -1,   191,   190,    -1,   248,    -1,    33,
     191,   190,    -1,   248,    -1,   208,   197,    -1,    91,    82,
     228,    83,   228,   238,    -1,    39,    39,    39,    -1,   193,
      -1,   195,   194,    -1,   248,    -1,    33,   195,   194,    -1,
     248,    -1,   191,    -1,   220,    -1,     6,    -1,    44,   213,
      -1,    44,   101,   199,    -1,    44,    37,    -1,    64,    11,
      -1,   248,    -1,   199,   196,    -1,   202,   196,    -1,   196,
      -1,   199,    -1,   202,    -1,   248,    -1,   204,   200,    -1,
     204,   101,   200,    -1,   201,    -1,   101,   200,    -1,   238,
      89,   200,    -1,   204,   238,    89,   200,    -1,   204,   238,
      89,   101,   200,    -1,   238,    89,   101,   200,    -1,   238,
      -1,   109,   238,    -1,    31,   238,    32,    -1,    31,   204,
     200,    32,    -1,    31,   238,    89,   200,    32,    -1,   200,
      47,    48,    -1,   200,    47,   219,    48,    -1,   200,    31,
     188,    32,    -1,   238,    -1,   109,   238,    -1,    31,   204,
     201,    32,    -1,    31,   101,   201,    32,    -1,    31,   238,
      89,   201,    32,    -1,   201,    47,    48,    -1,   201,    47,
     219,    48,    -1,   201,    31,   188,    32,    -1,   204,    -1,
     204,   203,    -1,   204,   101,    -1,   204,   101,   203,    -1,
     203,    -1,   101,   203,    -1,   101,    -1,   238,    89,    -1,
     204,   238,    89,    -1,   204,   238,    89,   203,    -1,   203,
      47,    48,    -1,   203,    47,   219,    48,    -1,    47,    48,
      -1,    47,   219,    48,    -1,    31,   202,    32,    -1,   203,
      31,   188,    32,    -1,    31,   188,    32,    -1,   107,   205,
     204,    -1,   107,   204,    -1,   107,   205,    -1,   107,    -1,
     206,    -1,   206,   205,    -1,    40,    -1,    41,    -1,   208,
      -1,   205,   209,    -1,   209,    -1,   210,    -1,    28,    -1,
      26,    -1,    29,   235,    -1,    58,   238,    -1,    30,    -1,
     209,   205,    -1,   238,    -1,   228,   238,    -1,   211,    -1,
     212,    -1,   212,   211,    -1,    19,    -1,    21,    -1,    22,
      -1,    25,    -1,    23,    -1,    24,    -1,    27,    -1,    20,
      -1,    -1,   214,   219,    -1,    10,    -1,     3,    -1,   248,
      -1,   216,    33,   217,    -1,   217,    -1,     3,    -1,     3,
      44,   218,    -1,   248,    -1,   219,    -1,    10,    -1,   220,
      -1,   243,    -1,    45,    31,   207,   197,    32,    -1,   221,
      -1,   207,    -1,    31,   219,    32,    -1,    31,   219,    32,
     219,    -1,    31,   219,   204,    32,   219,    -1,    31,   219,
     101,    32,   219,    -1,    31,   219,   204,   101,    32,   219,
      -1,    11,    -1,    12,    -1,    13,    -1,    14,    -1,    15,
      -1,    16,    -1,    17,    -1,   219,   105,   219,    -1,   219,
     104,   219,    -1,   219,   107,   219,    -1,   219,   106,   219,
      -1,   219,   101,   219,    -1,   219,    99,   219,    -1,   219,
     100,   219,    -1,   219,   103,   219,    -1,   219,   102,   219,
      -1,   219,    98,   219,    -1,   219,    97,   219,    -1,   104,
     219,    -1,   105,   219,    -1,   109,   219,    -1,   108,   219,
      -1,   207,    31,    -1,   223,    -1,    -1,    64,   224,   225,
      -1,   248,    -1,   226,    -1,   225,    33,   226,    -1,   229,
     238,    -1,   229,   227,   229,   238,    -1,    62,    -1,    61,
      -1,    63,    -1,    59,    -1,    42,    -1,    43,    -1,    60,
      -1,    66,    -1,   248,    -1,   205,    -1,    68,    31,   188,
      32,    -1,   205,    68,    31,   188,    32,    -1,   248,    -1,
     230,   232,    34,    -1,   230,   232,    37,    -1,    31,   188,
      32,    34,    -1,    31,   188,    32,    37,    -1,    44,   213,
      34,    -1,    64,   233,    -1,   248,    -1,   234,    -1,   233,
      33,   234,    -1,   238,    31,    -1,    82,   192,    83,    -1,
     248,    -1,     3,    -1,   243,    -1,   236,    -1,   248,    -1,
     240,   239,    -1,    88,   111,   240,   239,    -1,   240,    -1,
      88,   111,   240,    -1,    92,    -1,    88,   111,    92,    -1,
     111,   240,   239,    -1,   111,   240,    -1,   111,    92,    -1,
      90,   240,    -1,     3,   235,    -1,     3,   242,    -1,    88,
     111,     3,   242,    -1,     3,    -1,    88,   111,     3,    -1,
      92,    -1,    88,   111,    92,    -1,   111,     3,   242,    -1,
     111,     3,    -1,   111,    92,    -1,    90,     3,    -1,   243,
       6,    -1,     6,    -1,   243,    -1,    37,    -1,     4,    -1,
      31,   246,    32,    -1,   248,    -1,   236,    44,   247,    -1,
     236,    44,   247,    33,   246,    -1,   236,    -1,   236,    33,
     246,    -1,   243,    -1,   220,    -1,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const unsigned short yyrline[] =
{
       0,   940,   940,   952,   955,   958,   961,   966,   970,   975,
     976,   977,   978,   979,   991,  1007,  1017,  1018,  1019,  1020,
    1021,  1022,  1023,  1024,  1025,  1026,  1027,  1028,  1029,  1030,
    1031,  1032,  1033,  1034,  1035,  1036,  1037,  1044,  1044,  1116,
    1126,  1137,  1155,  1176,  1187,  1196,  1215,  1221,  1227,  1232,
    1242,  1248,  1264,  1264,  1291,  1292,  1299,  1319,  1346,  1350,
    1360,  1365,  1380,  1396,  1400,  1412,  1418,  1444,  1450,  1457,
    1458,  1461,  1462,  1470,  1481,  1525,  1536,  1539,  1552,  1599,
    1651,  1662,  1675,  1676,  1677,  1682,  1718,  1719,  1748,  1760,
    1768,  1781,  1803,  1809,  1813,  1816,  1824,  1829,  1841,  1851,
    2096,  2106,  2112,  2116,  2132,  2185,  2189,  2208,  2214,  2219,
    2224,  2229,  2241,  2249,  2297,  2344,  2345,  2346,  2347,  2348,
    2349,  2355,  2355,  2489,  2489,  2587,  2588,  2600,  2618,  2618,
    2831,  2837,  2840,  2843,  2846,  2849,  2854,  2886,  2892,  2919,
    2919,  2946,  2946,  2966,  2993,  3007,  3007,  3017,  3018,  3018,
    3038,  3039,  3053,  3054,  3055,  3056,  3057,  3058,  3059,  3060,
    3061,  3062,  3063,  3064,  3065,  3066,  3075,  3096,  3112,  3145,
    3159,  3176,  3194,  3201,  3208,  3216,  3239,  3239,  3268,  3268,
    3295,  3296,  3302,  3305,  3309,  3312,  3313,  3314,  3315,  3316,
    3317,  3318,  3319,  3322,  3325,  3328,  3335,  3342,  3352,  3358,
    3359,  3367,  3368,  3369,  3370,  3371,  3378,  3389,  3397,  3400,
    3404,  3408,  3418,  3423,  3431,  3444,  3452,  3455,  3459,  3463,
    3489,  3495,  3503,  3513,  3541,  3549,  3556,  3565,  3569,  3573,
    3580,  3597,  3614,  3622,  3630,  3639,  3643,  3652,  3663,  3675,
    3685,  3698,  3705,  3713,  3729,  3737,  3748,  3759,  3770,  3789,
    3797,  3814,  3822,  3829,  3840,  3851,  3862,  3881,  3887,  3893,
    3900,  3909,  3912,  3921,  3928,  3935,  3945,  3956,  3967,  3978,
    3985,  3992,  3995,  4012,  4022,  4029,  4035,  4040,  4046,  4050,
    4056,  4057,  4063,  4069,  4073,  4076,  4079,  4080,  4081,  4082,
    4083,  4084,  4089,  4092,  4097,  4122,  4125,  4167,  4171,  4175,
    4179,  4183,  4187,  4191,  4195,  4201,  4201,  4220,  4237,  4238,
    4243,  4256,  4265,  4271,  4284,  4287,  4296,  4307,  4308,  4312,
    4317,  4318,  4342,  4349,  4355,  4362,  4369,  4379,  4380,  4381,
    4382,  4383,  4384,  4385,  4388,  4392,  4396,  4400,  4404,  4408,
    4412,  4416,  4420,  4424,  4428,  4432,  4436,  4440,  4444,  4448,
    4459,  4464,  4464,  4465,  4468,  4473,  4479,  4489,  4501,  4502,
    4503,  4507,  4511,  4515,  4519,  4525,  4526,  4529,  4533,  4537,
    4541,  4547,  4553,  4559,  4566,  4573,  4580,  4581,  4584,  4585,
    4588,  4594,  4600,  4603,  4604,  4607,  4608,  4611,  4616,  4620,
    4623,  4626,  4629,  4634,  4638,  4641,  4648,  4654,  4663,  4668,
    4672,  4675,  4678,  4681,  4686,  4690,  4693,  4696,  4702,  4707,
    4710,  4713,  4717,  4722,  4735,  4739,  4744,  4750,  4754,  4761,
    4764,  4769
};
#endif

#if YYDEBUG || YYERROR_VERBOSE
/* YYTNME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals. */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ID", "HBLOCK", "POUND", "STRING", 
  "INCLUDE", "IMPORT", "INSERT", "CHARCONST", "NUM_INT", "NUM_FLOAT", 
  "NUM_UNSIGNED", "NUM_LONG", "NUM_ULONG", "NUM_LONGLONG", 
  "NUM_ULONGLONG", "TYPEDEF", "TYPE_INT", "TYPE_UNSIGNED", "TYPE_SHORT", 
  "TYPE_LONG", "TYPE_FLOAT", "TYPE_DOUBLE", "TYPE_CHAR", "TYPE_VOID", 
  "TYPE_SIGNED", "TYPE_BOOL", "TYPE_TYPEDEF", "TYPE_RAW", "LPAREN", 
  "RPAREN", "COMMA", "SEMI", "EXTERN", "INIT", "LBRACE", "RBRACE", 
  "PERIOD", "CONST", "VOLATILE", "STRUCT", "UNION", "EQUAL", "SIZEOF", 
  "MODULE", "LBRACKET", "RBRACKET", "ILLEGAL", "CONSTANT", "NAME", 
  "RENAME", "NAMEWARN", "EXTEND", "PRAGMA", "FEATURE", "VARARGS", "ENUM", 
  "CLASS", "TYPENAME", "PRIVATE", "PUBLIC", "PROTECTED", "COLON", 
  "STATIC", "VIRTUAL", "FRIEND", "THROW", "CATCH", "USING", "NAMESPACE", 
  "NATIVE", "INLINE", "TYPEMAP", "EXCEPT", "ECHO", "APPLY", "CLEAR", 
  "SWIGTEMPLATE", "FRAGMENT", "WARN", "LESSTHAN", "GREATERTHAN", "MODULO", 
  "DELETE", "TYPES", "PARMS", "NONID", "DSTAR", "DCNOT", "TEMPLATE", 
  "OPERATOR", "COPERATOR", "PARSETYPE", "PARSEPARM", "CAST", "LOR", 
  "LAND", "OR", "XOR", "AND", "RSHIFT", "LSHIFT", "MINUS", "PLUS", 
  "SLASH", "STAR", "LNOT", "NOT", "UMINUS", "DCOLON", "$accept", 
  "program", "interface", "declaration", "swig_directive", 
  "extend_directive", "@1", "apply_directive", "clear_directive", 
  "constant_directive", "echo_directive", "except_directive", 
  "fragment_directive", "include_directive", "@2", "includetype", 
  "inline_directive", "insert_directive", "module_directive", 
  "name_directive", "native_directive", "pragma_directive", "pragma_arg", 
  "pragma_lang", "rename_directive", "rename_namewarn", 
  "feature_directive", "stringbracesemi", "varargs_directive", 
  "varargs_parms", "typemap_directive", "typemap_type", "tm_list", 
  "tm_tail", "typemap_parm", "types_directive", "template_directive", 
  "warn_directive", "c_declaration", "c_decl", "c_decl_tail", 
  "initializer", "c_enum_decl", "c_constructor_decl", "cpp_declaration", 
  "cpp_class_decl", "@3", "@4", "cpp_opt_declarators", 
  "cpp_forward_class_decl", "cpp_template_decl", "@5", 
  "cpp_temp_possible", "template_parms", "cpp_using_decl", 
  "cpp_namespace_decl", "@6", "@7", "cpp_members", "@8", "@9", 
  "cpp_member", "cpp_constructor_decl", "cpp_destructor_decl", 
  "cpp_conversion_operator", "cpp_catch_decl", "cpp_protection_decl", 
  "cpp_nested", "@10", "@11", "nested_decl", "cpp_swig_directive", 
  "cpp_end", "cpp_vend", "anonymous_bitfield", "storage_class", "parms", 
  "rawparms", "ptail", "parm", "valparms", "rawvalparms", "valptail", 
  "valparm", "def_args", "parameter_declarator", 
  "typemap_parameter_declarator", "declarator", "notso_direct_declarator", 
  "direct_declarator", "abstract_declarator", 
  "direct_abstract_declarator", "pointer", "type_qualifier", 
  "type_qualifier_raw", "type", "rawtype", "type_right", "primitive_type", 
  "primitive_type_list", "type_specifier", "definetype", "@12", "ename", 
  "enumlist", "edecl", "etype", "expr", "exprnum", "exprcompound", 
  "inherit", "raw_inherit", "@13", "base_list", "base_specifier", 
  "access_specifier", "cpptype", "opt_virtual", "cpp_const", "ctor_end", 
  "ctor_initializer", "mem_initializer_list", "mem_initializer", 
  "template_decl", "idstring", "idstringopt", "idcolon", "idcolontail", 
  "idtemplate", "idcolonnt", "idcolontailnt", "string", "stringbrace", 
  "options", "kwargs", "stringnum", "empty", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const unsigned short yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const unsigned char yyr1[] =
{
       0,   112,   113,   113,   113,   113,   113,   114,   114,   115,
     115,   115,   115,   115,   115,   115,   116,   116,   116,   116,
     116,   116,   116,   116,   116,   116,   116,   116,   116,   116,
     116,   116,   116,   116,   116,   116,   116,   118,   117,   119,
     120,   121,   121,   121,   122,   122,   123,   123,   123,   123,
     124,   124,   126,   125,   127,   127,   128,   128,   129,   129,
     129,   129,   130,   131,   131,   132,   132,   133,   133,   134,
     134,   135,   135,   136,   136,   136,   137,   137,   138,   138,
     138,   138,   139,   139,   139,   140,   141,   141,   142,   142,
     142,   143,   144,   145,   145,   146,   146,   146,   147,   148,
     149,   150,   150,   150,   151,   152,   152,   152,   153,   153,
     153,   153,   154,   154,   155,   156,   156,   156,   156,   156,
     156,   158,   157,   159,   157,   160,   160,   161,   163,   162,
     162,   164,   164,   164,   164,   164,   165,   166,   166,   168,
     167,   169,   167,   167,   170,   171,   170,   170,   172,   170,
     173,   173,   173,   173,   173,   173,   173,   173,   173,   173,
     173,   173,   173,   173,   173,   173,   174,   175,   175,   176,
     176,   176,   177,   178,   178,   178,   180,   179,   181,   179,
     182,   182,   183,   183,   183,   183,   183,   183,   183,   183,
     183,   183,   183,   184,   184,   185,   185,   185,   186,   187,
     187,   187,   187,   187,   187,   187,   188,   189,   189,   190,
     190,   191,   191,   191,   192,   193,   193,   194,   194,   195,
     195,   195,   196,   196,   196,   196,   196,   197,   197,   197,
     198,   198,   198,   199,   199,   199,   199,   199,   199,   199,
     199,   200,   200,   200,   200,   200,   200,   200,   200,   201,
     201,   201,   201,   201,   201,   201,   201,   202,   202,   202,
     202,   202,   202,   202,   202,   202,   202,   203,   203,   203,
     203,   203,   203,   203,   204,   204,   204,   204,   205,   205,
     206,   206,   207,   208,   208,   209,   209,   209,   209,   209,
     209,   209,   209,   209,   210,   211,   211,   212,   212,   212,
     212,   212,   212,   212,   212,   214,   213,   213,   215,   215,
     216,   216,   217,   217,   217,   218,   218,   219,   219,   219,
     219,   219,   219,   219,   219,   219,   219,   220,   220,   220,
     220,   220,   220,   220,   221,   221,   221,   221,   221,   221,
     221,   221,   221,   221,   221,   221,   221,   221,   221,   221,
     222,   224,   223,   223,   225,   225,   226,   226,   227,   227,
     227,   228,   228,   228,   228,   229,   229,   230,   230,   230,
     230,   231,   231,   231,   231,   231,   232,   232,   233,   233,
     234,   235,   235,   236,   236,   237,   237,   238,   238,   238,
     238,   238,   238,   239,   239,   239,   239,   240,   241,   241,
     241,   241,   241,   241,   242,   242,   242,   242,   243,   243,
     244,   244,   244,   245,   245,   246,   246,   246,   246,   247,
     247,   248
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const unsigned char yyr2[] =
{
       0,     2,     1,     3,     2,     3,     2,     2,     1,     1,
       1,     1,     1,     1,     1,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     7,     5,
       3,     5,     5,     3,     2,     2,     5,     2,     5,     2,
       7,     7,     0,     7,     1,     1,     2,     2,     1,     5,
       5,     5,     3,     4,     3,     7,     8,     5,     3,     1,
       1,     3,     1,     4,     7,     6,     1,     1,     7,     9,
       5,     7,     1,     1,     5,     7,     1,     3,     6,     6,
       8,     1,     2,     3,     1,     2,     3,     6,     5,     9,
       2,     1,     1,     5,     5,     1,     4,     1,     1,     2,
       5,     6,     7,     8,     6,     1,     1,     1,     1,     1,
       1,     0,     9,     0,     8,     1,     2,     4,     0,     6,
       3,     1,     1,     1,     1,     1,     1,     3,     4,     0,
       6,     0,     5,     5,     2,     0,     6,     1,     0,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     1,
       1,     1,     1,     1,     1,     1,     6,     6,     7,     8,
       8,     7,     5,     2,     2,     2,     0,     7,     0,     6,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     2,     4,     2,     5,     1,
       2,     1,     1,     1,     1,     1,     1,     2,     1,     3,
       1,     2,     6,     3,     1,     2,     1,     3,     1,     1,
       1,     1,     2,     3,     2,     2,     1,     2,     2,     1,
       1,     1,     1,     2,     3,     1,     2,     3,     4,     5,
       4,     1,     2,     3,     4,     5,     3,     4,     4,     1,
       2,     4,     4,     5,     3,     4,     4,     1,     2,     2,
       3,     1,     2,     1,     2,     3,     4,     3,     4,     2,
       3,     3,     4,     3,     3,     2,     2,     1,     1,     2,
       1,     1,     1,     2,     1,     1,     1,     1,     2,     2,
       1,     2,     1,     2,     1,     1,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     2,     1,     1,     1,
       3,     1,     1,     3,     1,     1,     1,     1,     1,     5,
       1,     1,     3,     4,     5,     5,     6,     1,     1,     1,
       1,     1,     1,     1,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     2,     2,     2,     2,     2,
       1,     0,     3,     1,     1,     3,     2,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     4,     5,
       1,     3,     3,     4,     4,     3,     2,     1,     1,     3,
       2,     3,     1,     1,     1,     1,     1,     2,     4,     1,
       3,     1,     3,     3,     2,     2,     2,     2,     2,     4,
       1,     3,     1,     3,     3,     2,     2,     2,     2,     1,
       1,     1,     1,     3,     1,     3,     5,     1,     3,     1,
       1,     0
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const unsigned short yydefact[] =
{
     421,     0,     0,     0,     0,     8,     4,   421,   297,   304,
     298,   299,   301,   302,   300,   287,   303,   286,   421,   290,
       0,   280,   281,   362,   363,     0,   361,   364,     0,     0,
     391,     0,     0,   278,   421,   284,   285,   294,   295,     0,
     292,   389,     6,     0,     1,    13,    58,    54,    55,     0,
     202,    12,   199,   421,     0,     0,    76,    77,   421,   421,
       0,     0,   201,   203,   204,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       7,     9,    16,    17,    18,    19,    20,    21,    22,    23,
     421,    24,    25,    26,    27,    28,    29,    30,     0,    31,
      32,    33,    34,    35,    36,    10,   101,   102,    14,    11,
     115,   116,   117,   118,   119,   120,     0,   205,   421,   397,
     382,   288,     0,   289,     0,     0,     3,   283,   279,   421,
     305,     0,     0,   263,   277,     0,   229,   211,   421,   235,
     421,   261,   257,   249,   226,   291,   296,   293,     0,     0,
     387,     5,    15,     0,   409,   200,     0,     0,   414,     0,
     421,     0,   282,     0,     0,     0,     0,    72,     0,   421,
     421,     0,     0,   421,   141,     0,     0,    56,    57,     0,
       0,    49,    47,    44,    45,   421,     0,   421,     0,   421,
     421,     0,   100,   421,   421,     0,     0,     0,     0,     0,
       0,   249,   421,     0,     0,   221,   327,   328,   329,   330,
     331,   332,   333,   219,     0,   214,   421,   220,   216,   213,
     392,   390,     0,   421,   263,     0,   206,   421,     0,   257,
     292,   208,   307,   224,     0,   222,     0,     0,     0,   269,
       0,     0,     0,     0,   321,     0,   317,   320,   318,   225,
     421,     0,   236,   262,   241,   275,   276,   250,   227,   421,
       0,   228,   421,     0,   259,   233,   258,   241,   264,   396,
     395,   394,   383,     0,   384,   408,   421,   417,     0,    62,
      43,   305,     0,   421,    64,     0,     0,     0,    68,     0,
       0,     0,    86,     0,     0,   137,     0,   421,   139,     0,
       0,    91,     0,     0,     0,    95,   230,   231,   232,    40,
       0,    92,    94,   385,     0,   386,     0,     0,     0,   136,
     130,     0,   421,     0,     0,     0,     0,     0,     0,     0,
     241,     0,   421,     0,   309,   421,   421,   123,   293,   381,
       0,   215,   218,   388,     0,   263,   257,   292,     0,   249,
     273,     0,   207,   210,   271,   259,     0,   249,   264,   223,
     306,     0,     0,   345,   346,   348,   347,   349,   270,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     257,   292,   242,   421,     0,   274,     0,   254,     0,     0,
     267,     0,   234,   260,   265,     0,   237,   393,     0,     0,
       0,     0,   413,     0,     0,    63,    37,    71,     0,     0,
       0,     0,     0,     0,   138,     0,     0,   421,   421,     0,
       0,    96,     0,   421,     0,     0,     0,   128,    52,     0,
       0,     0,     0,    73,     0,   421,     0,   292,     0,     0,
     108,   421,     0,   127,   351,     0,   350,   353,   421,     0,
       0,   264,   252,   421,   251,   265,     0,   322,     0,   277,
       0,   421,   344,   343,   339,   340,   338,   342,   341,   335,
     334,   337,   336,     0,   241,   243,   264,     0,   246,     0,
     256,   255,   272,   268,     0,   238,   266,   240,    60,    61,
      59,   103,   418,   420,   419,   415,    41,    42,     0,    70,
      67,    69,   412,    83,   411,     0,    80,   421,   410,    82,
       0,    87,   421,   172,   143,   142,     0,   199,     0,     0,
      48,    46,   421,    39,    93,   400,     0,   402,     0,     0,
      98,   421,   421,   421,     0,     0,   312,     0,   311,   314,
     421,   421,     0,   105,   107,   104,     0,   109,   148,   165,
       0,     0,     0,     0,   203,     0,   190,   191,   183,   192,
     188,   184,   182,   185,   186,   187,   189,   162,   163,   150,
     156,   160,   159,     0,     0,   151,   152,   155,   161,   153,
     157,   154,   164,     0,   205,   421,   121,   217,   212,   209,
     253,   323,     0,   276,     0,     0,     0,   244,     0,   248,
     247,   239,     0,     0,   421,     0,   367,     0,   370,     0,
       0,   140,   200,   421,     0,    89,     0,    88,     0,     0,
       0,   398,     0,   421,     0,   131,   132,   135,   134,   129,
     133,     0,     0,     0,    75,     0,   421,     0,   421,   305,
     421,   114,     0,   421,   421,     0,   145,   174,   173,   175,
       0,     0,     0,   144,     0,     0,     0,   292,   365,   352,
     354,     0,   366,     0,   325,   324,     0,   319,   245,   416,
      38,     0,   421,     0,    78,    81,   421,    85,    65,     0,
       0,    97,   407,   405,   406,   401,   403,     0,    50,    51,
       0,    53,    74,   316,   313,   315,   310,   112,     0,     0,
       0,     0,     0,   377,   421,     0,     0,   149,     0,     0,
     421,     0,     0,   421,     0,   421,   178,   293,   158,   421,
     359,   358,   360,   421,   356,     0,   326,     0,     0,   421,
       0,    66,    90,   404,   399,     0,   113,     0,   375,   376,
     378,     0,   371,   372,   110,   106,   421,     0,   421,     0,
     124,   421,     0,     0,     0,     0,   176,   421,   355,     0,
       0,    84,   368,     0,    79,    99,   373,   374,     0,   380,
     111,     0,     0,   421,     0,   421,   421,   421,   198,   421,
       0,   180,   181,   357,   125,   122,     0,   369,   379,   146,
     421,   167,     0,   421,     0,     0,   166,     0,   179,   126,
     168,     0,   193,   194,   171,   421,   421,   177,   195,   197,
     305,   170,   169,     0,   196
};

/* YYDEFGOTO[NTERM-NUM]. */
static const short yydefgoto[] =
{
      -1,     3,     4,    80,    81,    82,   498,   556,   557,   558,
     559,    87,    88,    89,   532,    90,    91,   560,    93,   561,
      95,   562,   500,   166,   563,    98,   564,   506,   565,   291,
     566,   300,   188,   311,   189,   102,   567,   568,   569,   106,
     545,   439,   107,   108,   109,   110,   663,   442,   785,   570,
     571,   531,   629,   318,   572,   114,   417,   297,   573,   708,
     645,   574,   575,   576,   577,   578,   579,   580,   779,   757,
     780,   581,   791,   800,   582,   583,   225,   226,   352,   227,
     214,   215,   341,   216,   136,   137,   305,   336,   252,   139,
     228,   141,   200,    32,    33,   244,   162,    35,    36,    37,
      38,   235,   236,   333,   537,   538,   694,   466,   246,   247,
     445,   446,   585,   659,   660,   723,    39,   661,   801,   641,
     702,   739,   740,   119,   277,   314,    40,   150,    41,   528,
     621,   248,   509,   157,   278,   495,   231
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -664
static const short yypact[] =
{
     277,  2822,  2865,    46,  2397,  -664,  -664,   -26,  -664,  -664,
    -664,  -664,  -664,  -664,  -664,  -664,  -664,  -664,   -26,  -664,
      34,  -664,  -664,  -664,  -664,   111,  -664,  -664,   -14,    67,
    -664,   124,  3328,   469,   781,   469,  -664,  -664,   819,   111,
    -664,    93,  -664,   179,  -664,   150,  -664,  -664,  -664,   221,
    -664,  -664,   312,   257,  2908,   297,  -664,  -664,   257,   319,
     323,   332,  -664,  -664,  -664,   372,    36,   141,   376,    45,
     380,   480,   203,  3160,  3160,   439,   447,   312,   465,   305,
    -664,  -664,  -664,  -664,  -664,  -664,  -664,  -664,  -664,  -664,
     257,  -664,  -664,  -664,  -664,  -664,  -664,  -664,   281,  -664,
    -664,  -664,  -664,  -664,  -664,  -664,  -664,  -664,  -664,  -664,
    -664,  -664,  -664,  -664,  -664,  -664,  3202,  -664,  3034,  -664,
    -664,  -664,   485,  -664,    84,   500,  -664,   469,  -664,  2158,
      76,  1227,   495,    96,    40,   111,  -664,  -664,   322,   247,
     322,   353,   222,   430,  -664,  -664,  -664,  -664,   526,    89,
    -664,  -664,  -664,   284,  -664,   104,   284,   284,  -664,   513,
      81,   499,  -664,   336,   111,   531,   553,  -664,   284,  3076,
    3118,   111,   524,   164,  -664,   545,   560,  -664,  -664,   284,
     587,  -664,  -664,  -664,   586,  3118,   561,    73,   568,   570,
     284,   284,   586,  3118,  3118,   111,   312,   392,   126,   284,
     492,   521,   123,   780,   233,  -664,  -664,  -664,  -664,  -664,
    -664,  -664,  -664,  -664,   533,  -664,   584,  -664,  -664,  -664,
    -664,    93,   536,  2248,   704,   589,  -664,   593,   595,   906,
     544,  -664,  -664,  -664,   499,  -664,  2115,  2115,   603,  -664,
    2115,  2115,  2115,  2115,   604,  1118,  -664,  -664,   586,  -664,
    2248,   111,   374,   353,  -664,  -664,   532,  -664,  -664,  3118,
    1515,  -664,  3118,  1615,    96,   374,   353,   549,   566,  -664,
    -664,    93,  -664,   612,   586,  -664,  -664,   173,   616,  -664,
    -664,   649,    47,   322,  -664,   632,   631,   642,   633,   529,
     645,   658,  -664,   666,   647,  -664,   111,  -664,  -664,   668,
     674,  -664,   677,   678,  3160,  -664,  -664,  -664,  -664,  -664,
    3160,  -664,  -664,  -664,   688,  -664,   680,   692,   643,  -664,
    -664,   146,    39,   163,   163,   695,   641,   168,   705,   126,
     652,   566,    71,   697,  -664,  2302,   317,  -664,   204,  -664,
    3034,  -664,  -664,  -664,   500,   421,   578,   655,   564,  -664,
    -664,  3118,  -664,  -664,  -664,   421,   583,   661,   163,  -664,
    1075,  1027,  3244,  -664,  -664,  -664,  -664,  -664,  -664,  2115,
    2115,  2115,  2115,  2115,  2115,  2115,  2115,  2115,  2115,  2115,
     921,    43,  -664,  3118,  1715,  -664,   721,  -664,  1279,   722,
    -664,  1290,   374,   353,   924,   126,   374,  -664,   220,  2483,
     284,   989,  -664,   724,   725,  -664,  -664,  -664,   426,   228,
     284,  3118,   499,   701,  -664,   727,  2569,  -664,   651,  3160,
     290,   683,   717,   570,   152,   284,   728,  -664,  -664,   242,
     163,   126,    79,  -664,  1007,   760,   734,   641,   736,   467,
    -664,   238,  1424,  -664,  -664,   732,  -664,  -664,   584,   111,
     661,  -664,  -664,   593,  -664,   421,   615,  2115,  1815,  1915,
      -6,   781,  1055,  1088,   946,   749,   961,   682,   682,   482,
     482,  -664,  -664,   625,   661,  -664,   126,   740,  -664,  1302,
    -664,  -664,  -664,  -664,   126,   374,   353,   374,  -664,  -664,
     586,  -664,  -664,  -664,   586,   741,  -664,  -664,  1424,  -664,
    -664,   586,  -664,  -664,  -664,   751,  -664,   240,   586,  -664,
     753,  -664,   240,  -664,  -664,  -664,  2655,   312,  3286,   699,
    -664,  -664,  3118,  -664,  -664,   184,   687,  -664,   718,   767,
    -664,   487,  -664,   240,    64,   126,   757,   391,  -664,  -664,
     681,  3118,   499,  -664,  -664,  -664,   776,  -664,  -664,  -664,
     771,   746,   752,   756,   708,   526,  -664,  -664,  -664,  -664,
    -664,  -664,  -664,  -664,  -664,  -664,  -664,  -664,  -664,  -664,
    -664,  -664,  -664,   777,  1424,  -664,  -664,  -664,  -664,  -664,
    -664,  -664,  -664,  2951,   783,   761,  -664,  -664,  -664,  -664,
    -664,  1075,  2115,  2353,  2115,   790,   797,  -664,   700,  -664,
    -664,   374,   284,   793,  3118,   801,   766,   484,  -664,   827,
     802,  -664,   586,    -4,   499,  -664,  3160,  -664,   803,   845,
     100,  -664,   109,  3034,    68,  -664,  -664,  -664,  -664,  -664,
    -664,  3244,  2741,   829,  -664,  2015,   760,   872,  3118,   649,
     806,  -664,   835,   317,  3118,  1424,  -664,  -664,  -664,  -664,
     526,   840,   499,  -664,  3244,   282,   268,   843,  -664,   841,
    -664,   314,  -664,  1424,  1075,  1075,  2115,  -664,  -664,  -664,
    -664,   846,  3118,   848,  -664,  -664,   240,  -664,  -664,   849,
     850,  -664,  -664,   184,  -664,   184,  -664,   809,  -664,  -664,
     953,  -664,  -664,  -664,  -664,  1075,  -664,  -664,   467,   861,
     860,   111,   417,  -664,   322,   467,   865,  -664,  1424,   869,
    3118,   467,    35,  2302,   890,    97,  -664,   868,  -664,   761,
    -664,  -664,  -664,   761,  -664,   842,  1075,   874,   879,  3118,
     880,  -664,  -664,  -664,  -664,   882,  -664,   455,  -664,   884,
    -664,   887,  -664,  -664,  -664,  -664,   322,   885,  3118,   888,
    -664,  3118,   891,   894,   897,   901,  -664,   499,  -664,   111,
     873,  -664,  -664,   899,  -664,  -664,  -664,  -664,   111,  -664,
    -664,  1424,   908,   240,   913,  3118,  3118,   681,  -664,   499,
     916,  -664,  -664,  -664,  -664,  -664,   467,  -664,  -664,  -664,
     240,  -664,   457,   240,   919,   922,  -664,   925,  -664,  -664,
    -664,   437,  -664,  -664,  -664,   240,   240,  -664,  -664,  -664,
     649,  -664,  -664,   928,  -664
};

/* YYPGOTO[NTERM-NUM].  */
static const short yypgoto[] =
{
    -664,  -664,  -253,  -664,  -664,  -664,  -664,     9,    21,    23,
      28,  -664,  -664,  -664,  -664,  -664,  -664,    29,  -664,    41,
    -664,    48,  -664,  -664,    50,  -664,    51,   356,    56,  -664,
      57,  -664,  -288,   547,   -68,  -664,    59,    60,    61,   436,
    -663,   329,  -664,  -664,  -664,   444,  -664,  -664,  -664,    10,
      20,  -664,  -664,  -664,    63,  -664,  -664,  -664,  -478,  -664,
    -664,  -664,   446,  -664,  -664,    70,  -664,  -664,  -664,  -664,
     199,  -664,  -664,  -413,  -664,    -3,   435,   789,   534,     1,
     365,  -664,   542,   656,   -97,   538,  -664,   -15,  -131,  -207,
       4,   -54,   -28,   -25,  -664,   193,    27,   -23,  -664,   954,
    -664,  -260,  -664,  -664,  -664,   375,  -664,   706,  -103,  -664,
    -664,  -664,  -664,  -664,   295,  -664,   -48,   294,  -418,   241,
    -664,  -664,   251,  1003,  -106,  -664,   662,  -121,  -112,  -664,
    -200,   742,   504,    72,  -139,  -664,     0
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -422
static const short yytable[] =
{
       5,   116,    31,    43,   117,   186,   142,   120,   128,   127,
     145,   265,   221,    83,   111,   217,   422,   348,   120,   138,
     603,   403,   356,   399,   112,    84,   594,    85,    34,    34,
     678,   195,    86,    92,   144,   736,   269,   271,   140,     7,
     301,   258,   745,   261,   416,    94,    44,   273,   750,   177,
       7,   279,    96,   158,    97,    99,   118,   285,   158,   167,
     100,   101,   289,   103,   104,   105,   751,   113,   204,   265,
     275,  -383,   688,   122,   115,   475,     7,   222,   118,   253,
      21,    22,   178,   199,   313,   316,   232,     7,   266,   607,
     158,   325,     7,   328,   610,   595,   653,   124,   634,     7,
     343,   229,   145,   683,   129,   689,   255,   171,  -308,   256,
     275,   475,   685,   233,     7,   633,   348,   356,   218,   213,
     131,   118,   640,   799,    28,   281,   332,   250,    30,     7,
     164,   519,   476,   392,   756,    28,   752,   396,   144,    30,
     144,   276,   134,   131,   173,    34,   283,   134,   323,   125,
     397,   456,   275,   118,   134,   525,    34,   327,   126,   142,
     120,    28,   196,   118,   516,    30,     7,   707,   535,   324,
     253,     7,   306,   120,   133,   266,   220,   234,   174,   118,
     134,   270,   135,   148,    28,   725,   404,   308,    30,   312,
     315,   307,   684,   428,   282,   346,    34,    34,   392,    28,
     396,   686,   334,    30,   149,   251,   400,   183,   296,   154,
     393,    28,    34,   151,    28,    30,   342,   401,    30,   359,
      34,    34,   380,   456,   488,     7,   154,   353,   385,    28,
     747,     7,   502,    30,   154,   251,     7,   217,   443,   440,
     526,  -421,   423,   152,   527,     7,   118,   161,   154,   473,
      34,    28,   153,   250,   324,    30,    28,   489,   730,   282,
      30,   492,   503,   485,   487,   504,   187,   187,   444,   131,
     337,   715,   135,   282,   619,   134,     5,    34,   259,   632,
      21,    22,   130,   144,     7,     7,    34,   272,   156,    34,
     154,   253,   266,   789,   260,   620,   449,     5,   493,   431,
     473,   393,   132,   485,   510,   716,   546,   324,   605,   203,
      28,   441,   197,   713,    30,   505,    28,     7,   154,   529,
      30,    28,   120,   264,   520,    30,   266,   521,   163,   198,
      28,   251,   120,   460,    30,   134,   144,   135,   447,   272,
     486,   213,   154,   198,   547,   598,   714,    23,    24,   134,
     165,   135,   453,   601,   168,   792,    28,    21,    22,   640,
      30,   130,    34,   169,    26,    27,   130,    34,   284,    28,
      28,     1,     2,    30,    30,   720,   721,   722,    34,   700,
     804,   132,   198,   198,   262,   438,   132,   194,   134,   134,
     135,   135,   811,   812,   507,   322,   116,   512,   154,   117,
     263,   486,    28,   170,   598,   383,    30,   176,    83,   111,
      34,   179,   511,   116,   533,   518,   117,     5,   117,   112,
      84,   384,    85,   312,   636,    83,   111,    86,    92,   637,
     499,   255,   154,   142,   593,   539,   112,    84,    34,    85,
      94,   144,   584,   651,    86,    92,   138,    96,   342,    97,
      99,   742,   223,   353,   743,   100,   101,    94,   103,   104,
     105,   144,   113,   669,    96,   140,    97,    99,   131,   115,
     190,   808,   100,   101,   809,   103,   104,   105,   191,   113,
      28,   810,   606,   733,    30,   734,   115,   606,   502,   766,
     154,   802,   767,   323,   803,     7,   193,   187,   584,   134,
     542,   543,     7,   187,   544,    50,   249,   608,   606,    21,
      22,   180,   608,   116,   181,   606,   117,   182,   503,   268,
     217,   504,   517,   327,   219,    83,   111,   643,   631,     7,
     282,   117,     5,   608,   287,   656,   112,    84,   709,    85,
     608,   627,    23,    24,    86,    92,   440,   280,   680,    34,
     813,   628,    62,    63,    64,   461,   288,    94,   295,    26,
      27,   409,   410,   299,    96,   385,    97,    99,    34,     7,
     127,   505,   100,   101,   584,   103,   104,   105,    79,   113,
      28,     7,   298,   204,    30,   662,   115,    28,   378,   379,
     302,    30,   275,   329,   676,   259,   452,   327,   304,   679,
     198,   251,   309,   310,   292,   293,   134,   744,   135,   223,
     331,   260,   187,   120,   259,   454,   339,   340,   441,   344,
     303,   350,   698,   218,   213,   131,   351,   354,   317,   116,
     260,    34,   117,   358,   362,   367,   539,   711,   394,   134,
     703,    83,   111,   144,   398,   584,   259,   590,   402,   770,
      34,   606,   112,    84,    28,    85,   383,   597,    30,   232,
      86,    92,   260,   584,   405,    34,    28,   395,   406,    50,
      30,    34,   384,    94,   407,   251,   608,   408,   411,   355,
      96,   414,    97,    99,   753,   324,   517,   123,   100,   101,
     412,   103,   104,   105,   386,   113,   143,   389,   413,    34,
     418,   147,   115,   502,   144,   154,   419,     7,   584,   420,
     421,   614,   638,   425,   522,   120,    62,    63,    64,   662,
     424,    21,    22,   662,   426,   639,   427,   429,   172,   175,
     430,   383,   668,   615,   435,   129,   504,    34,   513,   433,
      34,   434,   781,   616,   451,   786,   144,   384,   606,   605,
     455,   131,   606,   480,   482,   523,    34,   782,   496,   497,
     201,   514,   530,   536,   781,   606,   540,   541,   606,   586,
     436,   584,   599,   608,   602,    34,   655,   608,    34,   782,
     606,   606,   604,     7,     7,   609,   376,   377,   378,   379,
     608,   230,    28,   608,   155,   254,    30,   257,   622,   624,
     623,   635,    34,    34,   267,   608,   608,   644,   646,   187,
     647,   335,   129,   135,   184,   652,   648,   650,   477,   192,
     649,  -147,   666,   201,   690,   130,   286,   658,   131,   667,
       7,   670,   672,   294,   673,   681,   677,   245,     8,     9,
      10,    11,    12,    13,    14,   132,    16,   712,   682,   143,
     373,   374,   375,   376,   377,   378,   379,   320,   282,   326,
     254,   675,   330,   692,   123,   201,   338,   704,    28,    28,
     701,   710,    30,    30,   719,     7,     7,   718,   727,   729,
     760,   198,   133,   731,   732,   347,   349,   134,   134,   135,
     135,   357,   735,   737,   738,   274,   201,   746,   274,   274,
     748,   755,   443,   282,   282,   274,   697,   784,   761,     7,
     274,   762,   381,   382,   764,    28,   765,   768,   769,    30,
     773,   274,   775,   771,     7,   776,   254,     7,   198,   777,
     254,   787,   274,   274,   134,   778,   135,   129,   321,   274,
     790,   274,   360,   361,   326,   793,   363,   364,   365,   366,
     798,   805,   250,   131,   806,   250,     7,   618,   415,   807,
      28,    28,   814,   674,    30,    30,   388,   625,   131,   391,
     524,   131,   705,   198,   198,   626,   642,   630,   797,   134,
     134,   135,   135,   319,   713,   349,   349,   589,   687,   432,
     587,   254,   146,   254,    28,   154,   448,   437,    30,   596,
     206,   207,   208,   209,   210,   211,   212,   355,   450,    28,
       7,   696,    28,    30,   758,   135,    30,   759,   796,   788,
     349,   121,   355,   617,     0,   484,     0,     0,     0,     0,
     251,     0,     0,   251,     0,     0,     0,     0,   327,   671,
       0,    28,   474,     0,     0,    30,   372,   373,   374,   375,
     376,   377,   378,   379,   198,     0,   254,   254,     0,   457,
     134,     0,   135,   374,   375,   376,   377,   378,   379,     0,
       0,   201,     0,   699,   201,   462,   463,   464,   465,   706,
     467,   468,   469,   470,   471,   472,     0,     0,     0,     0,
     479,   201,   349,   254,     0,    28,   254,     0,     0,    30,
       0,     0,     0,     0,     0,     0,     0,   728,   484,     0,
       0,   588,     0,     0,     0,     0,   251,     0,     0,     0,
       0,     0,     0,   143,   369,   370,   371,   372,   458,   374,
     375,   376,   377,   378,   459,     0,     0,     0,   254,     0,
     490,     0,   274,   494,     0,   749,   254,     0,   754,     0,
     501,   508,   274,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   591,   763,   472,   368,   274,     0,     0,
       0,   534,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   772,     0,     0,   774,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,   254,     0,     0,
       0,     0,     0,     0,   201,     0,     0,     0,     0,     0,
     794,   795,     0,     0,     0,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,     0,     0,     0,
       7,     0,     0,   154,     0,     0,     0,     0,   206,   207,
     208,   209,   210,   211,   212,   657,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,   237,   612,
       0,   508,     0,     0,     0,     0,     0,    21,    22,    23,
      24,   201,   238,     0,     0,   239,   201,     0,     0,     0,
       0,     0,     0,     0,     0,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   664,   201,
     665,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   201,    28,     0,   201,   717,    30,
       0,     0,     0,   724,     0,     0,     0,   481,     0,     0,
       0,   240,   241,     0,     0,   242,   243,     0,   483,     0,
       0,   695,     0,     0,   274,     0,     0,     0,     0,   508,
     600,     0,   201,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   741,     0,     0,     0,     0,     0,     0,
       0,     0,   726,     0,     0,   437,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,     0,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   201,
       0,   783,   201,     0,     0,   548,     0,  -421,    46,     0,
     741,     0,     0,    49,     0,     0,     0,     0,     0,     0,
       0,   201,    50,  -421,  -421,  -421,  -421,  -421,  -421,  -421,
    -421,  -421,  -421,  -421,  -421,     0,     0,     0,   549,    52,
       0,     0,  -421,     0,  -421,  -421,  -421,  -421,     0,     0,
       0,     0,     0,     0,    54,    55,    56,    57,   550,    59,
      60,    61,  -421,  -421,  -421,   551,   552,   553,     0,    62,
     554,    64,     0,    65,    66,     0,     0,     0,    70,     0,
      72,    73,    74,    75,     0,    77,     0,     0,     0,     0,
       0,     0,  -421,     0,     0,    79,  -421,  -421,     7,     0,
       0,   154,     0,     0,     0,     0,   206,   207,   208,   209,
     210,   211,   212,   555,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,   237,     0,     0,     0,
       0,     0,     0,     0,     0,    21,    22,    23,    24,     0,
     238,     0,     0,   387,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    28,     0,     0,     0,    30,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     7,   240,
     241,   154,     0,   242,   243,     0,   206,   207,   208,   209,
     210,   211,   212,     0,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,   237,     0,     0,     0,
       0,     0,     0,     0,     0,    21,    22,    23,    24,     0,
     238,     0,     0,   390,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    28,     0,     0,     0,    30,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     7,   240,
     241,   154,     0,   242,   243,     0,   206,   207,   208,   209,
     210,   211,   212,     0,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,   237,     0,     0,     0,
       0,     0,     0,     0,     0,    21,    22,    23,    24,     0,
     238,     0,     0,   478,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    28,     0,     0,     0,    30,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     7,   240,
     241,   154,     0,   242,   243,     0,   206,   207,   208,   209,
     210,   211,   212,     0,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,   237,   592,     0,     0,
       0,     0,     0,     0,     0,    21,    22,    23,    24,     0,
     238,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    28,     0,     0,     0,    30,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     7,   240,
     241,   154,     0,   242,   243,     0,   206,   207,   208,   209,
     210,   211,   212,     0,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,   237,     0,     0,     0,
       0,     0,     0,     0,     0,    21,    22,    23,    24,     0,
     238,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    28,     0,     0,     0,    30,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     7,   240,
     241,   154,   134,   242,   243,   693,   206,   207,   208,   209,
     210,   211,   212,     0,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,   237,     0,     0,     0,
       0,     0,     0,     0,     0,    21,    22,    23,    24,     0,
     238,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    28,     0,     0,     0,    30,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     7,   240,
     241,   154,     0,   242,   243,     0,   206,   207,   208,   209,
     210,   211,   212,     0,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,   237,     0,     0,     0,
       0,     0,     0,     0,     0,    21,    22,    23,    24,     0,
     238,     7,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    25,    26,    27,     0,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,   223,
       0,     0,     0,     0,     0,     0,     0,    20,    21,    22,
      23,    24,     0,    28,     0,   131,     0,    30,     0,     0,
       0,     0,     0,     0,     0,     0,    25,    26,    27,   240,
     241,     0,     0,   242,   243,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    28,     0,     0,    29,
      30,     7,     0,     0,     0,     0,     0,     0,     0,   224,
       0,     0,     0,     0,     0,   134,     0,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,   223,
       0,     0,     0,     0,     0,     0,     0,    20,    21,    22,
      23,    24,     0,     0,     0,   131,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     7,    25,    26,    27,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,     0,     0,     0,    28,     0,     0,    29,
      30,    20,    21,    22,    23,    24,     0,     0,     0,   345,
       0,     0,     0,     0,     0,   134,     7,     0,     0,     0,
      25,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,     0,     0,     0,     0,     0,     0,
      28,     0,     0,    29,    30,    23,    24,    -2,    45,     0,
    -421,    46,     0,   323,    47,    48,    49,     0,     0,   134,
       0,    25,    26,    27,     0,    50,  -421,  -421,  -421,  -421,
    -421,  -421,  -421,  -421,  -421,  -421,  -421,  -421,     0,     0,
       0,    51,    52,     0,     0,     0,     0,  -421,  -421,  -421,
    -421,    28,     0,    53,     0,    30,     0,    54,    55,    56,
      57,    58,    59,    60,    61,  -421,  -421,  -421,     0,     0,
     134,     0,    62,    63,    64,     0,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,     0,
       0,     0,     0,    78,    45,  -421,  -421,    46,    79,  -421,
      47,    48,    49,     0,     0,     0,     0,     0,     0,     0,
       0,    50,  -421,  -421,  -421,  -421,  -421,  -421,  -421,  -421,
    -421,  -421,  -421,  -421,     0,     0,     0,    51,    52,     0,
       0,   491,     0,  -421,  -421,  -421,  -421,     0,     0,    53,
       0,     0,     0,    54,    55,    56,    57,    58,    59,    60,
      61,  -421,  -421,  -421,     0,     0,     0,     0,    62,    63,
      64,     0,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,     0,     0,     0,     0,    78,
      45,  -421,  -421,    46,    79,  -421,    47,    48,    49,     0,
       0,     0,     0,     0,     0,     0,     0,    50,  -421,  -421,
    -421,  -421,  -421,  -421,  -421,  -421,  -421,  -421,  -421,  -421,
       0,     0,     0,    51,    52,     0,     0,   515,     0,  -421,
    -421,  -421,  -421,     0,     0,    53,     0,     0,     0,    54,
      55,    56,    57,    58,    59,    60,    61,  -421,  -421,  -421,
       0,     0,     0,     0,    62,    63,    64,     0,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,     0,     0,     0,     0,    78,    45,  -421,  -421,    46,
      79,  -421,    47,    48,    49,     0,     0,     0,     0,     0,
       0,     0,     0,    50,  -421,  -421,  -421,  -421,  -421,  -421,
    -421,  -421,  -421,  -421,  -421,  -421,     0,     0,     0,    51,
      52,     0,     0,   611,     0,  -421,  -421,  -421,  -421,     0,
       0,    53,     0,     0,     0,    54,    55,    56,    57,    58,
      59,    60,    61,  -421,  -421,  -421,     0,     0,     0,     0,
      62,    63,    64,     0,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,     0,     0,     0,
       0,    78,    45,  -421,  -421,    46,    79,  -421,    47,    48,
      49,     0,     0,     0,     0,     0,     0,     0,     0,    50,
    -421,  -421,  -421,  -421,  -421,  -421,  -421,  -421,  -421,  -421,
    -421,  -421,     0,     0,     0,    51,    52,     0,     0,     0,
       0,  -421,  -421,  -421,  -421,     0,     0,    53,     0,   691,
       0,    54,    55,    56,    57,    58,    59,    60,    61,  -421,
    -421,  -421,     0,     0,     0,     0,    62,    63,    64,     0,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,     6,     0,     7,     0,    78,     0,  -421,
       0,     0,    79,  -421,     0,     0,     0,     0,     0,     0,
       0,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,     0,     0,     0,     0,     0,     0,     0,
       0,    20,    21,    22,    23,    24,    42,     0,     7,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      25,    26,    27,     0,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,     0,     0,     0,     0,
       0,     0,     0,     0,    20,    21,    22,    23,    24,   159,
      28,   160,     0,    29,    30,     0,     0,     0,     0,     0,
       0,     0,     0,    25,    26,    27,     0,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    21,    22,
      23,    24,     0,    28,     7,     0,    29,    30,     0,     0,
       0,     0,     0,     0,     0,     0,    25,    26,    27,     0,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    21,    22,    23,    24,     0,    28,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,   202,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     7,     0,    28,
     205,     0,     0,    30,   654,   206,   207,   208,   209,   210,
     211,   212,     0,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,     0,     0,     0,     0,     0,
       0,     0,     0,    20,    21,    22,    23,    24,     0,     7,
       0,     0,     0,     0,     0,     0,     0,   290,     0,     0,
       0,     0,    25,    26,    27,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,     0,     0,     0,
       0,     0,     0,     0,     0,    20,    21,    22,    23,    24,
       0,     7,    28,     0,     0,    29,    30,     0,     0,     0,
       0,     0,     0,     0,    25,    26,    27,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,     0,
       0,     0,     0,     0,     0,     0,     0,    20,    21,    22,
      23,    24,     0,     7,    28,     0,     0,    29,    30,     0,
       0,     0,     0,     0,     0,     0,    25,    26,    27,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,   185,     0,     0,     0,     0,     0,     0,     0,     0,
      21,    22,    23,    24,     0,     7,    28,     0,     0,    29,
      30,     0,     0,     0,     0,     0,     0,     0,    25,    26,
      27,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    21,    22,    23,    24,     0,     7,    28,     0,
       0,     0,    30,     0,     0,     0,     0,     0,     0,     0,
     202,    26,    27,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    21,    22,    23,    24,     0,   613,
      28,     0,     0,     0,    30,     0,     0,     0,     0,     0,
       0,     0,    25,    26,    27,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    21,    22,    23,    24,
       0,     7,    28,     0,     0,     0,    30,     0,     0,     0,
       0,     0,     0,     0,    25,    26,    27,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      23,    24,     0,     0,    28,     0,     0,     0,    30,     0,
       0,     0,     0,     0,     0,     0,    25,    26,    27,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    28,     0,     0,     0,
      30
};

static const short yycheck[] =
{
       0,     4,     1,     2,     4,    73,    34,     7,    33,    32,
      35,   142,   124,     4,     4,   118,   304,   224,    18,    34,
     498,   281,   229,   276,     4,     4,    32,     4,     1,     2,
      34,    79,     4,     4,    34,   698,   148,   149,    34,     3,
     179,   138,   705,   140,   297,     4,     0,   153,   711,     4,
       3,   157,     4,    53,     4,     4,    82,   163,    58,    59,
       4,     4,   168,     4,     4,     4,    31,     4,   116,   200,
       6,    32,     4,    39,     4,    32,     3,   125,    82,   133,
      40,    41,    37,    98,   190,   191,    10,     3,   142,   507,
      90,   197,     3,   199,   512,   101,   574,   111,    34,     3,
     221,   129,   127,     3,    31,    37,   134,    71,    37,   134,
       6,    32,     3,    37,     3,   533,   323,   324,   118,   118,
      47,    82,   540,   786,    88,    44,     3,    31,    92,     3,
      58,   419,    89,   264,    37,    88,   101,   268,   138,    92,
     140,    37,   107,    47,     3,   118,   161,   107,   101,    82,
     271,   358,     6,    82,   107,     3,   129,    31,    34,   187,
     160,    88,    90,    82,   417,    92,     3,   645,    89,   197,
     224,     3,   187,   173,   101,   229,    92,   101,    37,    82,
     107,    92,   109,    90,    88,   663,   283,   187,    92,   189,
     190,   187,    92,    47,    31,   223,   169,   170,   329,    88,
     331,    92,   202,    92,   111,   109,    33,     4,    44,     6,
     264,    88,   185,    34,    88,    92,   216,    44,    92,   234,
     193,   194,   250,   430,     4,     3,     6,   227,   256,    88,
     708,     3,     4,    92,     6,   109,     3,   340,    34,   336,
      88,    37,   310,    93,    92,     3,    82,    54,     6,   380,
     223,    88,    31,    31,   282,    92,    88,    37,   676,    31,
      92,   400,    34,   394,   395,    37,    73,    74,    64,    47,
      37,     3,   109,    31,    90,   107,   276,   250,    31,   532,
      40,    41,    44,   283,     3,     3,   259,     3,    31,   262,
       6,   345,   346,   771,    47,   111,   344,   297,   401,   327,
     431,   355,    64,   434,   410,    37,    68,   335,    68,   116,
      88,   336,    31,    31,    92,    87,    88,     3,     6,   425,
      92,    88,   322,   101,    34,    92,   380,    37,    31,   101,
      88,   109,   332,   361,    92,   107,   336,   109,   338,     3,
     394,   340,     6,   101,   441,   476,    64,    42,    43,   107,
      31,   109,   351,   484,    31,   773,    88,    40,    41,   777,
      92,    44,   335,    31,    59,    60,    44,   340,    32,    88,
      88,    94,    95,    92,    92,    61,    62,    63,   351,   639,
     793,    64,   101,   101,    31,    68,    64,    82,   107,   107,
     109,   109,   805,   806,   409,     3,   399,   412,     6,   399,
      47,   455,    88,    31,   535,    31,    92,    31,   399,   399,
     383,    31,   411,   416,   429,   418,   416,   417,   418,   399,
     399,    47,   399,   423,    33,   416,   416,   399,   399,    38,
       4,   459,     6,   461,   459,   435,   416,   416,   411,   416,
     399,   441,   442,   555,   416,   416,   461,   399,   448,   399,
     399,    34,    31,   453,    37,   399,   399,   416,   399,   399,
     399,   461,   399,   602,   416,   461,   416,   416,    47,   399,
      31,    34,   416,   416,    37,   416,   416,   416,    31,   416,
      88,    44,   507,   683,    92,   685,   416,   512,     4,    34,
       6,    34,    37,   101,    37,     3,    31,   304,   498,   107,
      33,    34,     3,   310,    37,    18,    11,   507,   533,    40,
      41,    31,   512,   516,    34,   540,   516,    37,    34,    89,
     623,    37,    35,    31,    39,   516,   516,   542,   531,     3,
      31,   531,   532,   533,     3,   583,   516,   516,   650,   516,
     540,   531,    42,    43,   516,   516,   643,    34,   616,   522,
     810,   531,    65,    66,    67,   362,     3,   516,    34,    59,
      60,    32,    33,     3,   516,   593,   516,   516,   541,     3,
     593,    87,   516,   516,   574,   516,   516,   516,    91,   516,
      88,     3,    37,   631,    92,   585,   516,    88,   106,   107,
       3,    92,     6,   101,   609,    31,    32,    31,    37,   614,
     101,   109,    34,    33,   169,   170,   107,   704,   109,    31,
      89,    47,   419,   613,    31,    32,    83,    33,   643,    83,
     185,    32,   637,   623,   623,    47,    33,    32,   193,   632,
      47,   604,   632,    89,    31,    31,   636,   652,    89,   107,
     640,   632,   632,   643,    32,   645,    31,    32,    32,   746,
     623,   676,   632,   632,    88,   632,    31,    32,    92,    10,
     632,   632,    47,   663,    32,   638,    88,   101,    37,    18,
      92,   644,    47,   632,    32,   109,   676,    44,    33,   101,
     632,    34,   632,   632,   712,   713,    35,    25,   632,   632,
      32,   632,   632,   632,   259,   632,    34,   262,    32,   672,
      32,    39,   632,     4,   704,     6,    32,     3,   708,    32,
      32,   518,    31,    33,    31,   715,    65,    66,    67,   719,
      32,    40,    41,   723,    32,    44,    83,    32,    66,    67,
      89,    31,    32,    34,    37,    31,    37,   710,    37,    34,
     713,    89,   757,    44,    89,   760,   746,    47,   773,    68,
      89,    47,   777,    32,    32,    38,   729,   757,    34,    34,
      98,    34,    34,     3,   779,   790,    32,    31,   793,    37,
     335,   771,    32,   773,    33,   748,   583,   777,   751,   779,
     805,   806,    31,     3,     3,    32,   104,   105,   106,   107,
     790,   129,    88,   793,    52,   133,    92,   135,   111,    32,
      82,    44,   775,   776,   142,   805,   806,    31,    37,   616,
      64,    31,    31,   109,    72,    38,    64,   109,   383,    77,
      64,    38,    32,   161,   631,    44,   164,    66,    47,    32,
       3,    38,    31,   171,    68,    32,    34,   131,    19,    20,
      21,    22,    23,    24,    25,    64,    27,   654,     3,   187,
     101,   102,   103,   104,   105,   106,   107,   195,    31,   197,
     198,    34,   200,    34,   202,   203,   204,    32,    88,    88,
      64,    31,    92,    92,    33,     3,     3,    34,    32,    31,
      38,   101,   101,    34,    34,   223,   224,   107,   107,   109,
     109,   229,    83,    32,    34,   153,   234,    32,   156,   157,
      31,    11,    34,    31,    31,   163,    34,    34,    34,     3,
     168,    32,   250,   251,    34,    88,    34,    33,    31,    92,
      32,   179,    31,    38,     3,    31,   264,     3,   101,    32,
     268,    32,   190,   191,   107,    34,   109,    31,   196,   197,
      32,   199,   236,   237,   282,    32,   240,   241,   242,   243,
      34,    32,    31,    47,    32,    31,     3,   522,   296,    34,
      88,    88,    34,   607,    92,    92,   260,   531,    47,   263,
     423,    47,   643,   101,   101,   531,   541,   531,   779,   107,
     107,   109,   109,   194,    31,   323,   324,   453,   623,   327,
     448,   329,    38,   331,    88,     6,   340,   335,    92,   461,
      11,    12,    13,    14,    15,    16,    17,   101,   346,    88,
       3,   636,    88,    92,   719,   109,    92,   723,   777,   768,
     358,    18,   101,   519,    -1,   101,    -1,    -1,    -1,    -1,
     109,    -1,    -1,   109,    -1,    -1,    -1,    -1,    31,   604,
      -1,    88,   380,    -1,    -1,    92,   100,   101,   102,   103,
     104,   105,   106,   107,   101,    -1,   394,   395,    -1,    32,
     107,    -1,   109,   102,   103,   104,   105,   106,   107,    -1,
      -1,   409,    -1,   638,   412,   369,   370,   371,   372,   644,
     374,   375,   376,   377,   378,   379,    -1,    -1,    -1,    -1,
     384,   429,   430,   431,    -1,    88,   434,    -1,    -1,    92,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   672,   101,    -1,
      -1,   449,    -1,    -1,    -1,    -1,   109,    -1,    -1,    -1,
      -1,    -1,    -1,   461,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,    -1,    -1,    -1,   476,    -1,
     398,    -1,   400,   401,    -1,   710,   484,    -1,   713,    -1,
     408,   409,   410,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   457,   729,   459,    48,   425,    -1,    -1,
      -1,   429,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   748,    -1,    -1,   751,    99,   100,   101,
     102,   103,   104,   105,   106,   107,    -1,   535,    -1,    -1,
      -1,    -1,    -1,    -1,   542,    -1,    -1,    -1,    -1,    -1,
     775,   776,    -1,    -1,    -1,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,    -1,    -1,    -1,    -1,
       3,    -1,    -1,     6,    -1,    -1,    -1,    -1,    11,    12,
      13,    14,    15,    16,    17,   583,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,   517,
      -1,   519,    -1,    -1,    -1,    -1,    -1,    40,    41,    42,
      43,   609,    45,    -1,    -1,    48,   614,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    58,    59,    60,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   592,   637,
     594,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   652,    88,    -1,   655,   656,    92,
      -1,    -1,    -1,   661,    -1,    -1,    -1,    48,    -1,    -1,
      -1,   104,   105,    -1,    -1,   108,   109,    -1,    48,    -1,
      -1,   635,    -1,    -1,   602,    -1,    -1,    -1,    -1,   607,
      48,    -1,   690,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   701,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   666,    -1,    -1,   713,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,    -1,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   757,
      -1,   759,   760,    -1,    -1,     1,    -1,     3,     4,    -1,
     768,    -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   779,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    -1,    -1,    34,    35,
      -1,    -1,    38,    -1,    40,    41,    42,    43,    -1,    -1,
      -1,    -1,    -1,    -1,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    -1,    65,
      66,    67,    -1,    69,    70,    -1,    -1,    -1,    74,    -1,
      76,    77,    78,    79,    -1,    81,    -1,    -1,    -1,    -1,
      -1,    -1,    88,    -1,    -1,    91,    92,    93,     3,    -1,
      -1,     6,    -1,    -1,    -1,    -1,    11,    12,    13,    14,
      15,    16,    17,   109,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    42,    43,    -1,
      45,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    58,    59,    60,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    88,    -1,    -1,    -1,    92,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,   104,
     105,     6,    -1,   108,   109,    -1,    11,    12,    13,    14,
      15,    16,    17,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    42,    43,    -1,
      45,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    58,    59,    60,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    88,    -1,    -1,    -1,    92,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,   104,
     105,     6,    -1,   108,   109,    -1,    11,    12,    13,    14,
      15,    16,    17,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    42,    43,    -1,
      45,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    58,    59,    60,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    88,    -1,    -1,    -1,    92,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,   104,
     105,     6,    -1,   108,   109,    -1,    11,    12,    13,    14,
      15,    16,    17,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    42,    43,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    58,    59,    60,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    88,    -1,    -1,    -1,    92,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,   104,
     105,     6,    -1,   108,   109,    -1,    11,    12,    13,    14,
      15,    16,    17,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    42,    43,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    58,    59,    60,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    88,    -1,    -1,    -1,    92,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,   104,
     105,     6,   107,   108,   109,    10,    11,    12,    13,    14,
      15,    16,    17,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    42,    43,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    58,    59,    60,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    88,    -1,    -1,    -1,    92,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,   104,
     105,     6,    -1,   108,   109,    -1,    11,    12,    13,    14,
      15,    16,    17,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    42,    43,    -1,
      45,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    58,    59,    60,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    41,
      42,    43,    -1,    88,    -1,    47,    -1,    92,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,   104,
     105,    -1,    -1,   108,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,    91,
      92,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,
      -1,    -1,    -1,    -1,    -1,   107,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    41,
      42,    43,    -1,    -1,    -1,    47,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,    58,    59,    60,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    -1,    -1,    88,    -1,    -1,    91,
      92,    39,    40,    41,    42,    43,    -1,    -1,    -1,   101,
      -1,    -1,    -1,    -1,    -1,   107,     3,    -1,    -1,    -1,
      58,    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      88,    -1,    -1,    91,    92,    42,    43,     0,     1,    -1,
       3,     4,    -1,   101,     7,     8,     9,    -1,    -1,   107,
      -1,    58,    59,    60,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    -1,
      -1,    34,    35,    -1,    -1,    -1,    -1,    40,    41,    42,
      43,    88,    -1,    46,    -1,    92,    -1,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    -1,    -1,
     107,    -1,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      -1,    -1,    -1,    86,     1,    88,     3,     4,    91,    92,
       7,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    -1,    -1,    34,    35,    -1,
      -1,    38,    -1,    40,    41,    42,    43,    -1,    -1,    46,
      -1,    -1,    -1,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    -1,    -1,    -1,    -1,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    -1,    -1,    -1,    -1,    86,
       1,    88,     3,     4,    91,    92,     7,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    -1,    -1,    34,    35,    -1,    -1,    38,    -1,    40,
      41,    42,    43,    -1,    -1,    46,    -1,    -1,    -1,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      -1,    -1,    -1,    -1,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    -1,    -1,    -1,    -1,    86,     1,    88,     3,     4,
      91,    92,     7,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    -1,    -1,    34,
      35,    -1,    -1,    38,    -1,    40,    41,    42,    43,    -1,
      -1,    46,    -1,    -1,    -1,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    -1,    -1,    -1,    -1,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    -1,    -1,    -1,
      -1,    86,     1,    88,     3,     4,    91,    92,     7,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    -1,    -1,    34,    35,    -1,    -1,    -1,
      -1,    40,    41,    42,    43,    -1,    -1,    46,    -1,    48,
      -1,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    -1,    -1,    -1,    -1,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,     1,    -1,     3,    -1,    86,    -1,    88,
      -1,    -1,    91,    92,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    39,    40,    41,    42,    43,     1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      58,    59,    60,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    39,    40,    41,    42,    43,     1,
      88,     3,    -1,    91,    92,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    58,    59,    60,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,
      42,    43,    -1,    88,     3,    -1,    91,    92,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    41,    42,    43,    -1,    88,    -1,    -1,    -1,
      92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,
      59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,    88,
       6,    -1,    -1,    92,    93,    11,    12,    13,    14,    15,
      16,    17,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    39,    40,    41,    42,    43,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    11,    -1,    -1,
      -1,    -1,    58,    59,    60,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    41,    42,    43,
      -1,     3,    88,    -1,    -1,    91,    92,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    58,    59,    60,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    41,
      42,    43,    -1,     3,    88,    -1,    -1,    91,    92,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    42,    43,    -1,     3,    88,    -1,    -1,    91,
      92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,
      60,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    42,    43,    -1,     3,    88,    -1,
      -1,    -1,    92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      58,    59,    60,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    40,    41,    42,    43,    -1,     3,
      88,    -1,    -1,    -1,    92,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    58,    59,    60,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    42,    43,
      -1,     3,    88,    -1,    -1,    -1,    92,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    58,    59,    60,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    -1,    -1,    88,    -1,    -1,    -1,    92,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,
      92
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const unsigned char yystos[] =
{
       0,    94,    95,   113,   114,   248,     1,     3,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      39,    40,    41,    42,    43,    58,    59,    60,    88,    91,
      92,   191,   205,   206,   208,   209,   210,   211,   212,   228,
     238,   240,     1,   191,     0,     1,     4,     7,     8,     9,
      18,    34,    35,    46,    50,    51,    52,    53,    54,    55,
      56,    57,    65,    66,    67,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    86,    91,
     115,   116,   117,   119,   120,   121,   122,   123,   124,   125,
     127,   128,   129,   130,   131,   132,   133,   136,   137,   138,
     140,   142,   147,   148,   149,   150,   151,   154,   155,   156,
     157,   161,   162,   166,   167,   177,   187,   248,    82,   235,
     248,   235,    39,   238,   111,    82,    34,   209,   205,    31,
      44,    47,    64,   101,   107,   109,   196,   197,   199,   201,
     202,   203,   204,   238,   248,   205,   211,   238,    90,   111,
     239,    34,    93,    31,     6,   243,    31,   245,   248,     1,
       3,   207,   208,    31,   245,    31,   135,   248,    31,    31,
      31,    71,   238,     3,    37,   238,    31,     4,    37,    31,
      31,    34,    37,     4,   243,    31,   146,   207,   144,   146,
      31,    31,   243,    31,    82,   228,   245,    31,   101,   199,
     204,   238,    58,   207,   228,     6,    11,    12,    13,    14,
      15,    16,    17,   191,   192,   193,   195,   220,   248,    39,
      92,   240,   228,    31,   101,   188,   189,   191,   202,   204,
     238,   248,    10,    37,   101,   213,   214,    31,    45,    48,
     104,   105,   108,   109,   207,   219,   220,   221,   243,    11,
      31,   109,   200,   203,   238,   204,   205,   238,   196,    31,
      47,   196,    31,    47,   101,   200,   203,   238,    89,   240,
      92,   240,     3,   236,   243,     6,    37,   236,   246,   236,
      34,    44,    31,   199,    32,   236,   238,     3,     3,   236,
      11,   141,   188,   188,   238,    34,    44,   169,    37,     3,
     143,   246,     3,   188,    37,   198,   199,   202,   248,    34,
      33,   145,   248,   236,   237,   248,   236,   188,   165,   189,
     238,   243,     3,   101,   204,   236,   238,    31,   236,   101,
     238,    89,     3,   215,   248,    31,   199,    37,   238,    83,
      33,   194,   248,   239,    83,   101,   204,   238,   201,   238,
      32,    33,   190,   248,    32,   101,   201,   238,    89,   199,
     219,   219,    31,   219,   219,   219,   219,    31,    48,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     204,   238,   238,    31,    47,   204,   188,    48,   219,   188,
      48,   219,   200,   203,    89,   101,   200,   239,    32,   114,
      33,    44,    32,   213,   196,    32,    37,    32,    44,    32,
      33,    33,    32,    32,    34,   238,   114,   168,    32,    32,
      32,    32,   144,   146,    32,    33,    32,    83,    47,    32,
      89,   204,   238,    34,    89,    37,   188,   238,    68,   153,
     196,   205,   159,    34,    64,   222,   223,   248,   195,   228,
     238,    89,    32,   191,    32,    89,   201,    32,   101,   107,
     204,   207,   219,   219,   219,   219,   219,   219,   219,   219,
     219,   219,   219,   200,   238,    32,    89,   188,    48,   219,
      32,    48,    32,    48,   101,   200,   203,   200,     4,    37,
     243,    38,   246,   220,   243,   247,    34,    34,   118,     4,
     134,   243,     4,    34,    37,    87,   139,   199,   243,   244,
     236,   191,   199,    37,    34,    38,   114,    35,   187,   144,
      34,    37,    31,    38,   145,     3,    88,    92,   241,   236,
      34,   163,   126,   199,   243,    89,     3,   216,   217,   248,
      32,    31,    33,    34,    37,   152,    68,   196,     1,    34,
      54,    61,    62,    63,    66,   109,   119,   120,   121,   122,
     129,   131,   133,   136,   138,   140,   142,   148,   149,   150,
     161,   162,   166,   170,   173,   174,   175,   176,   177,   178,
     179,   183,   186,   187,   248,   224,    37,   194,   238,   190,
      32,   219,    32,   205,    32,   101,   197,    32,   200,    32,
      48,   200,    33,   170,    31,    68,   205,   230,   248,    32,
     230,    38,   243,     3,   207,    34,    44,   244,   188,    90,
     111,   242,   111,    82,    32,   151,   157,   161,   162,   164,
     174,   187,   114,   230,    34,    44,    33,    38,    31,    44,
     230,   231,   188,   199,    31,   172,    37,    64,    64,    64,
     109,   240,    38,   170,    93,   207,   228,   238,    66,   225,
     226,   229,   248,   158,   219,   219,    32,    32,    32,   246,
      38,   188,    31,    68,   139,    34,   199,    34,    34,   199,
     146,    32,     3,     3,    92,     3,    92,   192,     4,    37,
     207,    48,    34,    10,   218,   219,   217,    34,   199,   188,
     213,    64,   232,   248,    32,   153,   188,   170,   171,   240,
      31,   199,   207,    31,    64,     3,    37,   238,    34,    33,
      61,    62,    63,   227,   238,   170,   219,    32,   188,    31,
     230,    34,    34,   242,   242,    83,   152,    32,    34,   233,
     234,   238,    34,    37,   196,   152,    32,   170,    31,   188,
     152,    31,   101,   204,   188,    11,    37,   181,   226,   229,
      38,    34,    32,   188,    34,    34,    34,    37,    33,    31,
     196,    38,   188,    32,   188,    31,    31,    32,    34,   180,
     182,   199,   248,   238,    34,   160,   199,    32,   234,   170,
      32,   184,   230,    32,   188,   188,   231,   182,    34,   152,
     185,   230,    34,    37,   185,    32,    32,    34,    34,    37,
      44,   185,   185,   213,    34
};

#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrlab1


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)         \
  Current.first_line   = Rhs[1].first_line;      \
  Current.first_column = Rhs[1].first_column;    \
  Current.last_line    = Rhs[N].last_line;       \
  Current.last_column  = Rhs[N].last_column;
#endif

/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)

# define YYDSYMPRINT(Args)			\
do {						\
  if (yydebug)					\
    yysymprint Args;				\
} while (0)

# define YYDSYMPRINTF(Title, Token, Value, Location)		\
do {								\
  if (yydebug)							\
    {								\
      YYFPRINTF (stderr, "%s ", Title);				\
      yysymprint (stderr, 					\
                  Token, Value);	\
      YYFPRINTF (stderr, "\n");					\
    }								\
} while (0)

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (cinluded).                                                   |
`------------------------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_stack_print (short *bottom, short *top)
#else
static void
yy_stack_print (bottom, top)
    short *bottom;
    short *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (/* Nothing. */; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_reduce_print (int yyrule)
#else
static void
yy_reduce_print (yyrule)
    int yyrule;
#endif
{
  int yyi;
  unsigned int yylineno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %u), ",
             yyrule - 1, yylineno);
  /* Print the symbols being reduced, and their result.  */
  for (yyi = yyprhs[yyrule]; 0 <= yyrhs[yyi]; yyi++)
    YYFPRINTF (stderr, "%s ", yytname [yyrhs[yyi]]);
  YYFPRINTF (stderr, "-> %s\n", yytname [yyr1[yyrule]]);
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (Rule);		\
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YYDSYMPRINT(Args)
# define YYDSYMPRINTF(Title, Token, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

#endif /* !YYERROR_VERBOSE */



#if YYDEBUG
/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yysymprint (FILE *yyoutput, int yytype, YYSTYPE *yyvaluep)
#else
static void
yysymprint (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  if (yytype < YYNTOKENS)
    {
      YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
# ifdef YYPRINT
      YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
    }
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  switch (yytype)
    {
      default:
        break;
    }
  YYFPRINTF (yyoutput, ")");
}

#endif /* ! YYDEBUG */
/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yydestruct (int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yytype, yyvaluep)
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  switch (yytype)
    {

      default:
        break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM);
# else
int yyparse ();
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */



/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;



/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM)
# else
int yyparse (YYPARSE_PARAM)
  void *YYPARSE_PARAM;
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
  
  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;



#define YYPOPSTACK   (yyvsp--, yyssp--)

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* When reducing, the number of symbols on the RHS of the reduced
     rule.  */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YYDSYMPRINTF ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %s, ", yytname[yytoken]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;


  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 940 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		   Setattr(yyvsp[0].node,"classes",classes); 
		   Setattr(yyvsp[0].node,"name",ModuleName);
		   
		   if ((!module_node) && ModuleName) {
		     module_node = new_node("module");
		     Setattr(module_node,"name",ModuleName);
		   }
		   Setattr(yyvsp[0].node,"module",module_node);
		   check_extensions();
	           top = yyvsp[0].node;
               }
    break;

  case 3:
#line 952 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 top = Getattr(yyvsp[-1].p,"type");
               }
    break;

  case 4:
#line 955 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 top = 0;
               }
    break;

  case 5:
#line 958 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 top = yyvsp[-1].p;
               }
    break;

  case 6:
#line 961 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 top = 0;
               }
    break;

  case 7:
#line 966 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {  
                   appendChild(yyvsp[-1].node,yyvsp[0].node);
                   yyval.node = yyvsp[-1].node;
               }
    break;

  case 8:
#line 970 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                   yyval.node = new_node("top");
               }
    break;

  case 9:
#line 975 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 10:
#line 976 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 11:
#line 977 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 12:
#line 978 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = 0; }
    break;

  case 13:
#line 979 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                  yyval.node = 0;
		  if (!Swig_error_count()) {
		    static int last_error_line = -1;
		    if (last_error_line != cparse_line) {
		      Swig_error(cparse_file, cparse_line,"Syntax error in input.\n");
		      last_error_line = cparse_line;
		      skip_decl();
		    }
		  }
               }
    break;

  case 14:
#line 991 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                  if (yyval.node) {
   		      add_symbols(yyval.node);
                  }
                  yyval.node = yyvsp[0].node; 
	       }
    break;

  case 15:
#line 1007 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                  yyval.node = 0;
                  skip_decl();
               }
    break;

  case 16:
#line 1017 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 17:
#line 1018 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 18:
#line 1019 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 19:
#line 1020 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 20:
#line 1021 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 21:
#line 1022 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 22:
#line 1023 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 23:
#line 1024 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 24:
#line 1025 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 25:
#line 1026 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 26:
#line 1027 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 27:
#line 1028 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 28:
#line 1029 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 29:
#line 1030 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 30:
#line 1031 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 31:
#line 1032 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 32:
#line 1033 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 33:
#line 1034 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 34:
#line 1035 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 35:
#line 1036 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 36:
#line 1037 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 37:
#line 1044 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
               Node *cls;
	       String *clsname;
	       cplus_mode = CPLUS_PUBLIC;
	       if (!classes) classes = NewHash();
	       if (!extendhash) extendhash = NewHash();
	       clsname = make_class_name(yyvsp[-1].str);
	       cls = Getattr(classes,clsname);
	       if (!cls) {
		 /* No previous definition. Create a new scope */
		 Node *am = Getattr(extendhash,clsname);
		 if (!am) {
		   Swig_symbol_newscope();
		   Swig_symbol_setscopename(yyvsp[-1].str);
		   prev_symtab = 0;
		 } else {
		   prev_symtab = Swig_symbol_setscope(Getattr(am,"symtab"));
		 }
		 current_class = 0;
	       } else {
		 /* Previous class definition.  Use its symbol table */
		 prev_symtab = Swig_symbol_setscope(Getattr(cls,"symtab"));
		 current_class = cls;
		 extendmode = 1;
	       }
	       Classprefix = NewString(yyvsp[-1].str);
	       Namespaceprefix= Swig_symbol_qualifiedscopename(0);
	       Delete(clsname);
	     }
    break;

  case 38:
#line 1072 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
               String *clsname;
	       extendmode = 0;
               yyval.node = new_node("extend");
	       Setattr(yyval.node,"symtab",Swig_symbol_popscope());
	       if (prev_symtab) {
		 Swig_symbol_setscope(prev_symtab);
	       }
	       Namespaceprefix = Swig_symbol_qualifiedscopename(0);
               clsname = make_class_name(yyvsp[-4].str);
	       Setattr(yyval.node,"name",clsname);

	       /* Mark members as extend */

	       Swig_tag_nodes(yyvsp[-1].node,"feature:extend",(char*) "1");
	       if (current_class) {
		 /* We add the extension to the previously defined class */
		 appendChild(yyval.node,yyvsp[-1].node);
		 appendChild(current_class,yyval.node);
	       } else {
		 /* We store the extensions in the extensions hash */
		 Node *am = Getattr(extendhash,clsname);
		 if (am) {
		   /* Append the members to the previous extend methods */
		   appendChild(am,yyvsp[-1].node);
		 } else {
		   appendChild(yyval.node,yyvsp[-1].node);
		   Setattr(extendhash,clsname,yyval.node);
		 }
	       }
	       current_class = 0;
	       Delete(Classprefix);
	       Delete(clsname);
	       Classprefix = 0;
	       prev_symtab = 0;
	       yyval.node = 0;

	     }
    break;

  case 39:
#line 1116 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                    yyval.node = new_node("apply");
                    Setattr(yyval.node,"pattern",Getattr(yyvsp[-3].p,"pattern"));
		    appendChild(yyval.node,yyvsp[-1].p);
               }
    break;

  case 40:
#line 1126 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.node = new_node("clear");
		 appendChild(yyval.node,yyvsp[-1].p);
               }
    break;

  case 41:
#line 1137 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		   if ((yyvsp[-1].dtype.type != T_ERROR) && (yyvsp[-1].dtype.type != T_SYMBOL)) {
		     yyval.node = new_node("constant");
		     Setattr(yyval.node,"name",yyvsp[-3].id);
		     Setattr(yyval.node,"type",NewSwigType(yyvsp[-1].dtype.type));
		     Setattr(yyval.node,"value",yyvsp[-1].dtype.val);
		     Setattr(yyval.node,"storage","%constant");
		     Setattr(yyval.node,"feature:immutable","1");
		     add_symbols(yyval.node);
		   } else {
		     if (yyvsp[-1].dtype.type == T_ERROR) {
		       Swig_warning(WARN_PARSE_UNSUPPORTED_VALUE,cparse_file,cparse_line,"Unsupported constant value (ignored)\n");
		     }
		     yyval.node = 0;
		   }

	       }
    break;

  case 42:
#line 1155 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 if ((yyvsp[-1].dtype.type != T_ERROR) && (yyvsp[-1].dtype.type != T_SYMBOL)) {
		   SwigType_push(yyvsp[-3].type,yyvsp[-2].decl.type);
		   /* Sneaky callback function trick */
		   if (SwigType_isfunction(yyvsp[-3].type)) {
		     SwigType_add_pointer(yyvsp[-3].type);
		   }
		   yyval.node = new_node("constant");
		   Setattr(yyval.node,"name",yyvsp[-2].decl.id);
		   Setattr(yyval.node,"type",yyvsp[-3].type);
		   Setattr(yyval.node,"value",yyvsp[-1].dtype.val);
		   Setattr(yyval.node,"storage","%constant");
		   Setattr(yyval.node,"feature:immutable","1");
		   add_symbols(yyval.node);
		 } else {
		     if (yyvsp[-1].dtype.type == T_ERROR) {
		       Swig_warning(WARN_PARSE_UNSUPPORTED_VALUE,cparse_file,cparse_line,"Unsupported constant value\n");
		     }
		   yyval.node = 0;
		 }
               }
    break;

  case 43:
#line 1176 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 Swig_warning(WARN_PARSE_BAD_VALUE,cparse_file,cparse_line,"Bad constant value (ignored).\n");
		 yyval.node = 0;
	       }
    break;

  case 44:
#line 1187 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 char temp[64];
		 Replace(yyvsp[0].str,"$file",cparse_file, DOH_REPLACE_ANY);
		 sprintf(temp,"%d", cparse_line);
		 Replace(yyvsp[0].str,"$line",temp,DOH_REPLACE_ANY);
		 Printf(stderr,"%s\n", yyvsp[0].str);
		 Delete(yyvsp[0].str);
                 yyval.node = 0;
	       }
    break;

  case 45:
#line 1196 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 char temp[64];
		 String *s = NewString(yyvsp[0].id);
		 Replace(s,"$file",cparse_file, DOH_REPLACE_ANY);
		 sprintf(temp,"%d", cparse_line);
		 Replace(s,"$line",temp,DOH_REPLACE_ANY);
		 Printf(stderr,"%s\n", s);
		 Delete(s);
                 yyval.node = 0;
               }
    break;

  case 46:
#line 1215 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                    skip_balanced('{','}');
		    yyval.node = 0;
		    Swig_warning(WARN_DEPRECATED_EXCEPT,cparse_file, cparse_line, "%%except is deprecated.  Use %%exception instead.\n");
	       }
    break;

  case 47:
#line 1221 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                    skip_balanced('{','}');
		    yyval.node = 0;
		    Swig_warning(WARN_DEPRECATED_EXCEPT,cparse_file, cparse_line, "%%except is deprecated.  Use %%exception instead.\n");
               }
    break;

  case 48:
#line 1227 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.node = 0;
		 Swig_warning(WARN_DEPRECATED_EXCEPT,cparse_file, cparse_line, "%%except is deprecated.  Use %%exception instead.\n");
               }
    break;

  case 49:
#line 1232 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.node = 0;
		 Swig_warning(WARN_DEPRECATED_EXCEPT,cparse_file, cparse_line, "%%except is deprecated.  Use %%exception instead.\n");
	       }
    break;

  case 50:
#line 1242 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 yyval.node = new_node("fragment");
                 Setattr(yyval.node,"section", yyvsp[-2].id);
                 Setattr(yyval.node,"name",yyvsp[-4].id);
                 Setattr(yyval.node,"code",yyvsp[0].str);
                 }
    break;

  case 51:
#line 1248 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                   skip_balanced('{','}');
		   yyval.node = new_node("fragment");
		   Setattr(yyval.node,"section",yyvsp[-2].id);
		   Setattr(yyval.node,"name",yyvsp[-4].id);
		   Delitem(scanner_ccode,0);
		   Delitem(scanner_ccode,DOH_END);
		   Setattr(yyval.node,"code",Copy(scanner_ccode));
		 }
    break;

  case 52:
#line 1264 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                     yyvsp[-3].loc.filename = Swig_copy_string(cparse_file);
		     yyvsp[-3].loc.line = cparse_line;
		     cparse_file = Swig_copy_string(yyvsp[-1].id);
		     cparse_line = 0;
               }
    break;

  case 53:
#line 1269 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                     yyval.node = yyvsp[-1].node;
		     cparse_file = yyvsp[-6].loc.filename;
		     cparse_line = yyvsp[-6].loc.line;
		     if (strcmp(yyvsp[-6].loc.type,"include") == 0) set_nodeType(yyval.node,"include");
		     if (strcmp(yyvsp[-6].loc.type,"import") == 0) set_nodeType(yyval.node,"import");
		     Setattr(yyval.node,"name",yyvsp[-4].id);
		     /* Search for the module (if any) */
		     {
			 Node *n = firstChild(yyval.node);
			 while (n) {
			     if (Strcmp(nodeType(n),"module") == 0) {
				 Setattr(yyval.node,"module",Getattr(n,"name"));
				 break;
			     }
			     n = nextSibling(n);
			 }
		     }
		     Setattr(yyval.node,"options",yyvsp[-5].node);
               }
    break;

  case 54:
#line 1291 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.loc.type = (char *) "include"; }
    break;

  case 55:
#line 1292 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.loc.type = (char *) "import"; }
    break;

  case 56:
#line 1299 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 String *cpps;
		 if (Namespaceprefix) {
		   Swig_error(cparse_file, cparse_start_line, "Error. %%inline directive inside a namespace is disallowed.\n");

		   yyval.node = 0;
		 } else {
		   yyval.node = new_node("insert");
		   Setattr(yyval.node,"code",yyvsp[0].str);
		   /* Need to run through the preprocessor */
		   Setline(yyvsp[0].str,cparse_start_line);
		   Setfile(yyvsp[0].str,cparse_file);
		   Seek(yyvsp[0].str,0,SEEK_SET);
		   cpps = Preprocessor_parse(yyvsp[0].str);
		   start_inline(Char(cpps), cparse_start_line);
		   Delete(yyvsp[0].str);
		   Delete(cpps);
		 }
		 
	       }
    break;

  case 57:
#line 1319 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 String *cpps;
		 skip_balanced('{','}');
		 if (Namespaceprefix) {
		   Swig_error(cparse_file, cparse_start_line, "Error. %%inline directive inside a namespace is disallowed.\n");
		   
		   yyval.node = 0;
		 } else {
                   yyval.node = new_node("insert");
		   Delitem(scanner_ccode,0);
		   Delitem(scanner_ccode,DOH_END);
		   Setattr(yyval.node,"code", Copy(scanner_ccode));
		   cpps=Copy(scanner_ccode);
		   start_inline(Char(cpps), cparse_start_line);
		   Delete(cpps);
		 }
               }
    break;

  case 58:
#line 1346 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 yyval.node = new_node("insert");
		 Setattr(yyval.node,"code",yyvsp[0].str);
	       }
    break;

  case 59:
#line 1350 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 String *code = NewString("");
		 yyval.node = new_node("insert");
		 Setattr(yyval.node,"section",yyvsp[-2].id);
		 Setattr(yyval.node,"code",code);
		 if (Swig_insert_file(yyvsp[0].id,code) < 0) {
		   Swig_error(cparse_file, cparse_line, "Couldn't find '%s'.\n", yyvsp[0].id);
		   yyval.node = 0;
		 } 
               }
    break;

  case 60:
#line 1360 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.node = new_node("insert");
		 Setattr(yyval.node,"section",yyvsp[-2].id);
		 Setattr(yyval.node,"code",yyvsp[0].str);
               }
    break;

  case 61:
#line 1365 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 skip_balanced('{','}');
		 yyval.node = new_node("insert");
		 Setattr(yyval.node,"section",yyvsp[-2].id);
		 Delitem(scanner_ccode,0);
		 Delitem(scanner_ccode,DOH_END);
		 Setattr(yyval.node,"code", Copy(scanner_ccode));
	       }
    break;

  case 62:
#line 1380 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 yyval.node = new_node("module");
		 Setattr(yyval.node,"name",yyvsp[0].id);
		 if (yyvsp[-1].node) Setattr(yyval.node,"options",yyvsp[-1].node);
		 if (yyvsp[-1].node && Getattr(yyvsp[-1].node,"directors") && Getattr(yyvsp[-1].node,"dirprot"))
		   dirprot_mode = 1;
		 if (!ModuleName) ModuleName = NewString(yyvsp[0].id);
		 if (!module_node) module_node = yyval.node;
	       }
    break;

  case 63:
#line 1396 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 yyrename = NewString(yyvsp[-1].id);
		 yyval.node = 0;
               }
    break;

  case 64:
#line 1400 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                   yyval.node = 0;
		   Swig_error(cparse_file,cparse_line,"Missing argument to %%name directive.\n");
	       }
    break;

  case 65:
#line 1412 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 yyval.node = new_node("native");
		 Setattr(yyval.node,"name",yyvsp[-4].id);
		 Setattr(yyval.node,"wrap:name",yyvsp[-1].id);
	         add_symbols(yyval.node);
	       }
    break;

  case 66:
#line 1418 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 if (!SwigType_isfunction(yyvsp[-1].decl.type)) {
		   Swig_error(cparse_file,cparse_line,"%%native declaration '%s' is not a function.\n", yyvsp[-1].decl.id);
		   yyval.node = 0;
		 } else {
		     Delete(SwigType_pop_function(yyvsp[-1].decl.type));
		     /* Need check for function here */
		     SwigType_push(yyvsp[-2].type,yyvsp[-1].decl.type);
		     yyval.node = new_node("native");
	             Setattr(yyval.node,"name",yyvsp[-5].id);
		     Setattr(yyval.node,"wrap:name",yyvsp[-1].decl.id);
		     Setattr(yyval.node,"type",yyvsp[-2].type);
		     Setattr(yyval.node,"parms",yyvsp[-1].decl.parms);
		     Setattr(yyval.node,"decl",yyvsp[-1].decl.type);
		 }
	         add_symbols(yyval.node);
	       }
    break;

  case 67:
#line 1444 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 yyval.node = new_node("pragma");
		 Setattr(yyval.node,"lang",yyvsp[-3].id);
		 Setattr(yyval.node,"name",yyvsp[-2].id);
		 Setattr(yyval.node,"value",yyvsp[0].str);
	       }
    break;

  case 68:
#line 1450 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		yyval.node = new_node("pragma");
		Setattr(yyval.node,"lang",yyvsp[-1].id);
		Setattr(yyval.node,"name",yyvsp[0].id);
	      }
    break;

  case 69:
#line 1457 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.str = NewString(yyvsp[0].id); }
    break;

  case 70:
#line 1458 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.str = yyvsp[0].str; }
    break;

  case 71:
#line 1461 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.id = yyvsp[-1].id; }
    break;

  case 72:
#line 1462 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.id = (char *) "swig"; }
    break;

  case 73:
#line 1470 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                    SwigType *t = yyvsp[-2].decl.type;
		    if (!Len(t)) t = 0;
		    if (yyvsp[-3].ivalue) {
		      rename_add(yyvsp[-2].decl.id,t,yyvsp[-1].id);
		    } else {
		      namewarn_add(yyvsp[-2].decl.id,t,yyvsp[-1].id);
		    }
		    yyval.node = 0;
		    scanner_clear_rename();
              }
    break;

  case 74:
#line 1481 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		String *fixname;
		SwigType *t = yyvsp[-2].decl.type;
		fixname = feature_identifier_fix(yyvsp[-2].decl.id);
		if (!Len(t)) t = 0;
		/* Special declarator check */
		if (t) {
		  if (yyvsp[-1].dtype.qualifier) SwigType_push(t,yyvsp[-1].dtype.qualifier);
		  if (SwigType_isfunction(t)) {
		    SwigType *decl = SwigType_pop_function(t);
		    if (SwigType_ispointer(t)) {
		      String *nname = NewStringf("*%s",fixname);
		      if (yyvsp[-6].ivalue) {
			rename_add(Char(nname),decl,yyvsp[-4].id);
		      } else {
			namewarn_add(Char(nname),decl,yyvsp[-4].id);
		      }
		      Delete(nname);
		    } else {
		      if (yyvsp[-6].ivalue) {
			rename_add(Char(fixname),decl,yyvsp[-4].id);
		      } else {
			namewarn_add(Char(fixname),decl,yyvsp[-4].id);
		      }
		    }
		  } else if (SwigType_ispointer(t)) {
		    String *nname = NewStringf("*%s",fixname);
		    if (yyvsp[-6].ivalue) {
		      rename_add(Char(nname),0,yyvsp[-4].id);
		    } else {
		      namewarn_add(Char(nname),0,yyvsp[-4].id);
		    }
		    Delete(nname);
		  }
		} else {
		  if (yyvsp[-6].ivalue) {
		    rename_add(Char(fixname),0,yyvsp[-4].id);
		  } else {
		    namewarn_add(Char(fixname),0,yyvsp[-4].id);
		  }
		}
                yyval.node = 0;
		scanner_clear_rename();
              }
    break;

  case 75:
#line 1525 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		if (yyvsp[-5].ivalue) {
		  rename_add(yyvsp[-1].id,0,yyvsp[-3].id);
		} else {
		  namewarn_add(yyvsp[-1].id,0,yyvsp[-3].id);
		}
		yyval.node = 0;
		scanner_clear_rename();
              }
    break;

  case 76:
#line 1536 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		    yyval.ivalue = 1;
                }
    break;

  case 77:
#line 1539 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                    yyval.ivalue = 0;
                }
    break;

  case 78:
#line 1552 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 String *fname;
                 String *val;
		 String *name;
		 String *fixname;
		 SwigType *t;
                 if (!features_hash) features_hash = NewHash();
		 fname = NewStringf("feature:%s",yyvsp[-4].id);
		 fixname = feature_identifier_fix(yyvsp[-2].decl.id);
		 if (Namespaceprefix) {
		   name = NewStringf("%s::%s",Namespaceprefix, fixname);
		 } else {
		   name = fixname;
		 }
		 val = yyvsp[0].str ? NewString(yyvsp[0].str) : NewString("1");
		 if (yyvsp[-2].decl.parms) {
		   Setmeta(val,"parms",yyvsp[-2].decl.parms);
		 }
		 t = yyvsp[-2].decl.type;
		 if (yyvsp[-2].decl.parms) Setmeta(val,"parms",yyvsp[-2].decl.parms);
		 if (!Len(t)) t = 0;
		 if (t) {
		   if (yyvsp[-1].dtype.qualifier) SwigType_push(t,yyvsp[-1].dtype.qualifier);
		   if (SwigType_isfunction(t)) {
		     SwigType *decl = SwigType_pop_function(t);
		     if (SwigType_ispointer(t)) {
		       String *nname = NewStringf("*%s",name);
		       Swig_feature_set(features_hash, nname, decl, fname, val);
		       Delete(nname);
		     } else {
		       Swig_feature_set(features_hash, name, decl, fname, val);
		     }
		   } else if (SwigType_ispointer(t)) {
		     String *nname = NewStringf("*%s",name);
		     Swig_feature_set(features_hash,nname,0,fname,val);
		     Delete(nname);
		   }
		 } else {
		   Swig_feature_set(features_hash,name,0,fname,val);
		 }
		 Delete(fname);
		 Delete(name);
		 yyval.node = 0;
              }
    break;

  case 79:
#line 1599 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 String *fname;
                 String *val;
		 String *name;
		 String *fixname;
		 SwigType *t;

                 if (!features_hash) features_hash = NewHash();
		 fname = NewStringf("feature:%s",yyvsp[-6].id);
		 fixname = feature_identifier_fix(yyvsp[-2].decl.id);
		 if (Namespaceprefix) {
		   name = NewStringf("%s::%s",Namespaceprefix, fixname);
		 } else {
		   name = fixname;
		 }
		 if (Len(yyvsp[-4].id)) {
		   val = NewString(yyvsp[-4].id);
		 } else {
		   val = 0;
		 }
		 if (yyvsp[-2].decl.parms) {
		   Setmeta(val,"parms",yyvsp[-2].decl.parms);
		 }
		 t = yyvsp[-2].decl.type;
		 if (yyvsp[-2].decl.parms) Setmeta(val,"parms",yyvsp[-2].decl.parms);
		 if (!Len(t)) t = 0;
		 if (t) {
		   if (yyvsp[-1].dtype.qualifier) SwigType_push(t,yyvsp[-1].dtype.qualifier);
		   if (SwigType_isfunction(t)) {
		     SwigType *decl = SwigType_pop_function(t);
		     if (SwigType_ispointer(t)) {
		       String *nname = NewStringf("*%s",name);
		       Swig_feature_set(features_hash, nname, decl, fname, val);
		       Delete(nname);
		     } else {
		       Swig_feature_set(features_hash, name, decl, fname, val);
		     }
		   } else if (SwigType_ispointer(t)) {
		     String *nname = NewStringf("*%s",name);
		     Swig_feature_set(features_hash,nname,0,fname,val);
		     Delete(nname);
		   }
		 } else {
		   Swig_feature_set(features_hash,name,0,fname,val);
		 }
		 Delete(fname);
		 Delete(name);
		 yyval.node = 0;
              }
    break;

  case 80:
#line 1651 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		String *name;
		String *fname = NewStringf("feature:%s",yyvsp[-2].id);
		if (!features_hash) features_hash = NewHash();
		if (Namespaceprefix) name = NewStringf("%s::", Namespaceprefix);
		else name = NewString("");
		Swig_feature_set(features_hash,name,0,fname,(yyvsp[0].str ? NewString(yyvsp[0].str) : NewString("1")));
		Delete(name);
		Delete(fname);
		yyval.node = 0;
              }
    break;

  case 81:
#line 1662 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		String *name;
		String *fname = NewStringf("feature:%s",yyvsp[-4].id);
		if (!features_hash) features_hash = NewHash();
		if (Namespaceprefix) name = NewStringf("%s::", Namespaceprefix);
		else name = NewString("");
		Swig_feature_set(features_hash,name,0,fname,(Len(yyvsp[-2].id) ? NewString(yyvsp[-2].id) : 0));
		Delete(name);
		Delete(fname);
		yyval.node = 0;
              }
    break;

  case 82:
#line 1675 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.str = yyvsp[0].str; }
    break;

  case 83:
#line 1676 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.str = 0; }
    break;

  case 84:
#line 1677 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.str = yyvsp[-2].pl; }
    break;

  case 85:
#line 1682 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 Parm *val;
		 String *name;
		 SwigType *t;
                 if (!features_hash) features_hash = NewHash();
		 if (Namespaceprefix) name = NewStringf("%s::%s", Namespaceprefix, yyvsp[-2].decl.id);
		 else name = NewString(yyvsp[-2].decl.id);
		 val = yyvsp[-4].pl;
		 if (yyvsp[-2].decl.parms) {
		   Setmeta(val,"parms",yyvsp[-2].decl.parms);
		 }
		 t = yyvsp[-2].decl.type;
		 if (!Len(t)) t = 0;
		 if (t) {
		   if (yyvsp[-1].dtype.qualifier) SwigType_push(t,yyvsp[-1].dtype.qualifier);
		   if (SwigType_isfunction(t)) {
		     SwigType *decl = SwigType_pop_function(t);
		     if (SwigType_ispointer(t)) {
		       String *nname = NewStringf("*%s",name);
		       Swig_feature_set(features_hash, nname, decl, "feature:varargs", val);
		       Delete(nname);
		     } else {
		       Swig_feature_set(features_hash, name, decl, "feature:varargs", val);
		     }
		   } else if (SwigType_ispointer(t)) {
		     String *nname = NewStringf("*%s",name);
		     Swig_feature_set(features_hash,nname,0,"feature:varargs",val);
		     Delete(nname);
		   }
		 } else {
		   Swig_feature_set(features_hash,name,0,"feature:varargs",val);
		 }
		 Delete(name);
		 yyval.node = 0;
              }
    break;

  case 86:
#line 1718 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.pl = yyvsp[0].pl; }
    break;

  case 87:
#line 1719 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
		  int i;
		  int n;
		  Parm *p;
		  n = atoi(Char(yyvsp[-2].dtype.val));
		  if (n <= 0) {
		    Swig_error(cparse_file, cparse_line,"Argument count in %%varargs must be positive.\n");
		    yyval.pl = 0;
		  } else {
		    yyval.pl = Copy(yyvsp[0].p);
		    Setattr(yyval.pl,"name","VARARGS_SENTINEL");
		    for (i = 0; i < n; i++) {
		      p = Copy(yyvsp[0].p);
		      set_nextSibling(p,yyval.pl);
		      yyval.pl = p;
		    }
		  }
                }
    break;

  case 88:
#line 1748 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		   yyval.node = 0;
		   if (yyvsp[-3].tmap.op) {
		     yyval.node = new_node("typemap");
		     Setattr(yyval.node,"method",yyvsp[-3].tmap.op);
		     Setattr(yyval.node,"code",NewString(yyvsp[0].str));
		     if (yyvsp[-3].tmap.kwargs) {
		       Setattr(yyval.node,"kwargs", yyvsp[-3].tmap.kwargs);
		     }
		     appendChild(yyval.node,yyvsp[-1].p);
		   }
	       }
    break;

  case 89:
#line 1760 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.node = 0;
		 if (yyvsp[-3].tmap.op) {
		   yyval.node = new_node("typemap");
		   Setattr(yyval.node,"method",yyvsp[-3].tmap.op);
		   appendChild(yyval.node,yyvsp[-1].p);
		 }
	       }
    break;

  case 90:
#line 1768 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		   yyval.node = 0;
		   if (yyvsp[-5].tmap.op) {
		     yyval.node = new_node("typemapcopy");
		     Setattr(yyval.node,"method",yyvsp[-5].tmap.op);
		     Setattr(yyval.node,"pattern", Getattr(yyvsp[-1].p,"pattern"));
		     appendChild(yyval.node,yyvsp[-3].p);
		   }
	       }
    break;

  case 91:
#line 1781 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 Hash *p;
		 String *name;
		 p = nextSibling(yyvsp[0].node);
		 if (p && (!Getattr(p,"value"))) {
		   /* two argument typemap form */
		   name = Getattr(yyvsp[0].node,"name");
		   if (!name || (Strcmp(name,typemap_lang))) {
		     yyval.tmap.op = 0;
		     yyval.tmap.kwargs = 0;
		   } else {
		     yyval.tmap.op = Getattr(p,"name");
		     yyval.tmap.kwargs = nextSibling(p);
		   }
		 } else {
		   /* one-argument typemap-form */
		   yyval.tmap.op = Getattr(yyvsp[0].node,"name");
		   yyval.tmap.kwargs = p;
		 }
                }
    break;

  case 92:
#line 1803 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 yyval.p = yyvsp[-1].p;
		 set_nextSibling(yyval.p,yyvsp[0].p);
		}
    break;

  case 93:
#line 1809 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 yyval.p = yyvsp[-1].p;
		 set_nextSibling(yyval.p,yyvsp[0].p);
                }
    break;

  case 94:
#line 1813 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.p = 0;}
    break;

  case 95:
#line 1816 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		  SwigType_push(yyvsp[-1].type,yyvsp[0].decl.type);
		  yyval.p = new_node("typemapitem");
		  Setattr(yyval.p,"pattern",NewParm(yyvsp[-1].type,yyvsp[0].decl.id));
		  Setattr(yyval.p,"parms", yyvsp[0].decl.parms);
		  /*		  $$ = NewParm($1,$2.id);
				  Setattr($$,"parms",$2.parms); */
                }
    break;

  case 96:
#line 1824 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                  yyval.p = new_node("typemapitem");
		  Setattr(yyval.p,"pattern",yyvsp[-1].pl);
		  /*		  Setattr($$,"multitype",$2); */
               }
    break;

  case 97:
#line 1829 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.p = new_node("typemapitem");
		 Setattr(yyval.p,"pattern", yyvsp[-4].pl);
		 /*                 Setattr($$,"multitype",$2); */
		 Setattr(yyval.p,"parms",yyvsp[-1].pl);
               }
    break;

  case 98:
#line 1841 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                   yyval.node = new_node("types");
		   Setattr(yyval.node,"parms",yyvsp[-2].pl);
               }
    break;

  case 99:
#line 1851 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                  Parm *p, *tp;
		  Node *n;
		  Node *nspace = 0, *nspace_inner = 0;
		  Node *tnode = 0;
		  Symtab *tscope = 0;
		  int     specialized = 0;
		  yyval.node = 0;

		  tscope = Swig_symbol_current();          /* Get the current scope */

		  /* If the template name is qualified.  We need to create or lookup namespace entries */
		  if (Swig_scopename_check(yyvsp[-4].str)) {
		    String *prefix, *base;
		    Node   *ns;
		    prefix = Swig_scopename_prefix(yyvsp[-4].str);
		    base = Swig_scopename_last(yyvsp[-4].str);
		    
		    /* Try to locate the scope */
		    ns = Swig_symbol_clookup(prefix,0);
		    if (!ns) {
		      Swig_error(cparse_file,cparse_line,"Undefined scope '%s'\n", prefix);
		    } else {
		      if (Strcmp(nodeType(ns),"namespace") != 0) {
			Swig_error(cparse_file,cparse_line,"'%s' is not defined as namespace.\n", prefix);
			ns = 0;
		      } else {
			/*			Swig_symbol_setscope(Getattr(ns,"symtab"));
						Namespaceprefix = Swig_symbol_qualifiedscopename(0); */
		      }
		    }

		    if (ns && Namespaceprefix) {
		      Swig_error(cparse_file,cparse_line,
				 "Can't instantiate template '%s' inside namespace '%s'.\n"
				 "Suggest moving %%template outside the namespace.\n", yyvsp[-4].str, Namespaceprefix);

		    }
		    
		    /* Create namespace nodes to enclose the template declaration */
		    if (ns) {
		      List *scopes;
		      String *sname;
		      Iterator si;
		      String *name = NewString(prefix);
		      scopes = NewList();
		      while (name) {
			String *tprefix;
			String *base = Swig_scopename_last(name);
			Insert(scopes,0,base);
			tprefix = Swig_scopename_prefix(name);
			Delete(name);
			name = tprefix;
		      }
		      for (si = First(scopes); si.item; si = Next(si)) {
			Node *ns1,*ns2;
			sname = si.item;
			ns1 = Swig_symbol_clookup(sname,0);
			assert(ns1);
			if (Strcmp(nodeType(ns1),"namespace") == 0) {
			  if (Getattr(ns1,"alias")) {
			    ns1 = Getattr(ns1,"namespace");
			  }
			} else {
			  assert(0);
			}
			ns2 = new_node("namespace");
			Setattr(ns2,"name",sname);
			Setattr(ns2,"symtab", Getattr(ns1,"symtab"));
			add_symbols(ns2);
			Swig_symbol_setscope(Getattr(ns1,"symtab"));
			Namespaceprefix = Swig_symbol_qualifiedscopename(0);
			if (nspace_inner) {
			  appendChild(nspace_inner,ns2);
			}
			nspace_inner = ns2;
			if (!nspace) nspace = ns2;
		      }
		      yyvsp[-4].str = base;
		    }
		  }

		  n = Swig_cparse_template_locate(yyvsp[-4].str,yyvsp[-2].p);

		  /* Patch the argument types to respect namespaces */
		  p = yyvsp[-2].p;
		  while (p) {
		    if (!Getattr(p,"value")) {
		      SwigType *ty = Getattr(p,"type");
		      if (ty) {
			ty = Swig_symbol_type_qualify(ty,0);
			/*			ty = Swig_symbol_typedef_reduce(ty,0); */
			Setattr(p,"type",ty);
		      }
		    }
		    p = nextSibling(p);
		  }
		  /* Look for the template */

		  if (n && (Strcmp(nodeType(n),"template") == 0)) {
		    Parm *tparms = Getattr(n,"templateparms");
		    if (!tparms) {
		      specialized = 1;
		    }
		    if (!specialized && ((ParmList_len(yyvsp[-2].p) > ParmList_len(tparms)))) {
		      Swig_error(cparse_file, cparse_line, "Too many template parameters. Maximum of %d.\n", ParmList_len(tparms));
		    } else if (!specialized && ((ParmList_len(yyvsp[-2].p) < ParmList_numrequired(tparms)))) {
		      Swig_error(cparse_file, cparse_line, "Not enough template parameters specified. %d required.\n", ParmList_numrequired(tparms));
		    } else {
		      int  def_supplied = 0;
		      /* Expand the template */
		      ParmList *temparms;
		      if (specialized) temparms = CopyParmList(yyvsp[-2].p);
		      else temparms = CopyParmList(tparms);

		      /* Create typedef's and arguments */
		      p = yyvsp[-2].p;
		      tp = temparms;
		      while (p) {
			String *value = Getattr(p,"value");
			if (def_supplied) {
			  Setattr(p,"default","1");
			}
			if (value) {
			  Setattr(tp,"value",value);
			} else {
			  SwigType *ty = Getattr(p,"type");
			  if (ty) {
			    Setattr(tp,"type",ty);
			  }
			  Delattr(tp,"value");
			}
			p = nextSibling(p);
			tp = nextSibling(tp);
			if (!p && tp) {
			  p = tp;
			  def_supplied = 1;
			}
		      }

		      yyval.node = copy_node(n);
		      /* We need to set the node name based on name used to instantiate */
		      Setattr(yyval.node,"name",Copy(yyvsp[-4].str));
		      if (!specialized) {
			Delattr(yyval.node,"sym:typename");
		      } else {
			Setattr(yyval.node,"sym:typename","1");
		      }
		      if (yyvsp[-6].id) {
			Swig_cparse_template_expand(yyval.node,yyvsp[-6].id,temparms);
			Setattr(yyval.node,"sym:name",yyvsp[-6].id);
		      } else {
			static int cnt = 0;
			String *nname = NewStringf("__dummy_%d__", cnt++);
			Swig_cparse_template_expand(yyval.node,nname,temparms);
			Setattr(yyval.node,"sym:name",nname);
			Setattr(yyval.node,"feature:ignore","1");
		      }
		      Delattr(yyval.node,"templatetype");
		      Setattr(yyval.node,"template",n);
		      tnode = yyval.node;
		      Setfile(yyval.node,cparse_file);
		      Setline(yyval.node,cparse_line);
		      Delete(temparms);
		      
		      add_symbols_copy(yyval.node);
		      if (Strcmp(nodeType(yyval.node),"class") == 0) {

			/* Identify pure abstract methods */
			Setattr(yyval.node,"abstract", pure_abstract(firstChild(yyval.node)));
			
                        /* Set up inheritance in symbol table */
			{
			  Symtab  *csyms;
 			  List *baselist = Getattr(yyval.node,"baselist");
			  csyms = Swig_symbol_current();
			  Swig_symbol_setscope(Getattr(yyval.node,"symtab"));
			  if (baselist) {
			    List *bases = make_inherit_list(Getattr(yyval.node,"name"),baselist);
			    if (bases) {
			      Iterator s;
			      for (s = First(bases); s.item; s = Next(s)) {
				Symtab *st = Getattr(s.item,"symtab");
				if (st) {
				  Swig_symbol_inherit(st);
				}
			      }
			    }
			  }
			  Swig_symbol_setscope(csyms);
			}

			/* Merge in addmethods for this class */
			
			/* !!! This may be broken.  We may have to  add the addmethods at the beginning of
			   the class */
			
			if (extendhash) {
			  String *clsname;
			  Node *am;
			  if (Namespaceprefix) {
			    clsname = NewStringf("%s::%s", Namespaceprefix, Getattr(yyval.node,"name"));
			  } else {
			    clsname = Getattr(yyval.node,"name");
			  }
			  am = Getattr(extendhash,clsname);
			  if (am) {
			    Symtab *st = Swig_symbol_current();
			    Swig_symbol_setscope(Getattr(yyval.node,"symtab"));
			    /*			    Printf(stdout,"%s: %s %x %x\n", Getattr($$,"name"), clsname, Swig_symbol_current(), Getattr($$,"symtab")); */
			    merge_extensions(yyval.node,am);
			    Swig_symbol_setscope(st);
			    appendChild(yyval.node,am);
			    Delattr(extendhash,clsname);
			  }
			}
			/* Add to classes hash */
			if (!classes) classes = NewHash();

			{
			  if (Namespaceprefix) {
			    String *temp = NewStringf("%s::%s", Namespaceprefix, Getattr(yyval.node,"name"));
			    Setattr(classes,temp,yyval.node);
			  } else {
			    Setattr(classes,Swig_symbol_qualifiedscopename(yyval.node),yyval.node);
			  }
			}
		      }
		    }
		    if (yyval.node && nspace) {
		      appendChild(nspace_inner,yyval.node);
		      yyval.node = nspace;
		    }
		  }
   	          Swig_symbol_setscope(tscope);
		  Namespaceprefix = Swig_symbol_qualifiedscopename(0);

                }
    break;

  case 100:
#line 2096 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		  Swig_warning(0,cparse_file, cparse_line,"%s\n", yyvsp[0].id);
		  yyval.node = 0;
               }
    break;

  case 101:
#line 2106 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                    yyval.node = yyvsp[0].node; 
                    if (yyval.node) {
   		      add_symbols(yyval.node);
   	            }
                }
    break;

  case 102:
#line 2112 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 103:
#line 2116 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
		  if (Strcmp(yyvsp[-3].id,"C") == 0) {
		    yyval.node = new_node("extern");
		    Setattr(yyval.node,"name",yyvsp[-3].id);
		    appendChild(yyval.node,firstChild(yyvsp[-1].node));
		  } else {
		     Swig_warning(WARN_PARSE_UNDEFINED_EXTERN,cparse_file, cparse_line,"Unrecognized extern type \"%s\" (ignored).\n", yyvsp[-3].id);
		     yyval.node = 0;
		  }
                }
    break;

  case 104:
#line 2132 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
              yyval.node = new_node("cdecl");
	      if (yyvsp[-1].dtype.qualifier) SwigType_push(yyvsp[-2].decl.type,yyvsp[-1].dtype.qualifier);
	      Setattr(yyval.node,"type",yyvsp[-3].type);
	      Setattr(yyval.node,"storage",yyvsp[-4].id);
	      Setattr(yyval.node,"name",yyvsp[-2].decl.id);
	      Setattr(yyval.node,"decl",yyvsp[-2].decl.type);
	      Setattr(yyval.node,"parms",yyvsp[-2].decl.parms);
	      Setattr(yyval.node,"value",yyvsp[-1].dtype.val);
	      Setattr(yyval.node,"throws",yyvsp[-1].dtype.throws);
	      if (!yyvsp[0].node) {
		if (Len(scanner_ccode)) {
		  Setattr(yyval.node,"code",Copy(scanner_ccode));
		}
	      } else {
		Node *n = yyvsp[0].node;
		/* Inherit attributes */
		while (n) {
		  Setattr(n,"type",Copy(yyvsp[-3].type));
		  Setattr(n,"storage",yyvsp[-4].id);
		  n = nextSibling(n);
		}
	      }
	      if (yyvsp[-1].dtype.bitfield) {
		Setattr(yyval.node,"bitfield", yyvsp[-1].dtype.bitfield);
	      }

	      /* Look for "::" declarations (ignored) */
	      if (Strstr(yyvsp[-2].decl.id,"::")) {
		if (Namespaceprefix) {
		  /* This is a special case. If the scope name of the declaration exactly
                     matches that of the declaration, then we will allow it. Otherwise, delete. */
		  String *p = Swig_scopename_prefix(yyvsp[-2].decl.id);
		  if (Strcmp(p,Namespaceprefix) == 0) {
		    Setattr(yyval.node,"name",Swig_scopename_last(yyvsp[-2].decl.id));
		    set_nextSibling(yyval.node,yyvsp[0].node);
		  } else {
		    Delete(yyval.node);
		    yyval.node = yyvsp[0].node;
		  }
		  Delete(p);
		} else {
		  Delete(yyval.node);
		  yyval.node = yyvsp[0].node;
		}
	      } else {
		set_nextSibling(yyval.node,yyvsp[0].node);
	      }
           }
    break;

  case 105:
#line 2185 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                   yyval.node = 0;
                   Clear(scanner_ccode); 
               }
    break;

  case 106:
#line 2189 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.node = new_node("cdecl");
		 if (yyvsp[-1].dtype.qualifier) SwigType_push(yyvsp[-2].decl.type,yyvsp[-1].dtype.qualifier);
		 Setattr(yyval.node,"name",yyvsp[-2].decl.id);
		 Setattr(yyval.node,"decl",yyvsp[-2].decl.type);
		 Setattr(yyval.node,"parms",yyvsp[-2].decl.parms);
		 Setattr(yyval.node,"value",yyvsp[-1].dtype.val);
		 Setattr(yyval.node,"throws",yyvsp[-1].dtype.throws);
		 if (yyvsp[-1].dtype.bitfield) {
		   Setattr(yyval.node,"bitfield", yyvsp[-1].dtype.bitfield);
		 }
		 if (!yyvsp[0].node) {
		   if (Len(scanner_ccode)) {
		     Setattr(yyval.node,"code",Copy(scanner_ccode));
		   }
		 } else {
		   set_nextSibling(yyval.node,yyvsp[0].node);
		 }
	       }
    break;

  case 107:
#line 2208 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                   skip_balanced('{','}');
                   yyval.node = 0;
               }
    break;

  case 108:
#line 2214 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                   yyval.dtype = yyvsp[0].dtype; 
                   yyval.dtype.qualifier = 0;
		   yyval.dtype.throws = 0;
              }
    break;

  case 109:
#line 2219 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                   yyval.dtype = yyvsp[0].dtype; 
		   yyval.dtype.qualifier = yyvsp[-1].str;
		   yyval.dtype.throws = 0;
	      }
    break;

  case 110:
#line 2224 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
		   yyval.dtype = yyvsp[0].dtype; 
                   yyval.dtype.qualifier = 0;
		   yyval.dtype.throws = yyvsp[-2].pl;
              }
    break;

  case 111:
#line 2229 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                   yyval.dtype = yyvsp[0].dtype; 
                   yyval.dtype.qualifier = yyvsp[-5].str;
		   yyval.dtype.throws = yyvsp[-2].pl;
              }
    break;

  case 112:
#line 2241 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                  yyval.node = new_node("enum");
		  Setattr(yyval.node,"name",yyvsp[-4].id);
		  appendChild(yyval.node,yyvsp[-2].node);
		  add_symbols(yyval.node);           /* Add to tag space */
		  add_symbols(yyvsp[-2].node);       /* Add enum values to id space */
	       }
    break;

  case 113:
#line 2249 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 Node *n;
		 SwigType *ty = 0;
		 String   *unnamed = 0;

		 yyval.node = new_node("enum");
		 if (yyvsp[-5].id) {
		   Setattr(yyval.node,"name",yyvsp[-5].id);
		   ty = NewStringf("enum %s", yyvsp[-5].id);
		 } else if (yyvsp[-1].decl.id){
		   unnamed = make_unnamed();
		   ty = NewStringf("enum %s", unnamed);
		   Setattr(yyval.node,"unnamed",unnamed);
		   /* WF 20/12/2001: Cannot get sym:name and symtab set without setting name - fix!
		      // I don't think sym:name should be set. */
		   Setattr(yyval.node,"name",yyvsp[-1].decl.id);
		   Setattr(yyval.node,"tdname",yyvsp[-1].decl.id);
		   Setattr(yyval.node,"storage",yyvsp[-7].id);
		 }
		 appendChild(yyval.node,yyvsp[-3].node);
		 n = new_node("cdecl");
		 Setattr(n,"type",ty);
		 Setattr(n,"name",yyvsp[-1].decl.id);
		 Setattr(n,"storage",yyvsp[-7].id);
		 Setattr(n,"decl",yyvsp[-1].decl.type);
		 Setattr(n,"parms",yyvsp[-1].decl.parms);
		 Setattr(n,"unnamed",unnamed);
		 if (yyvsp[0].node) {
		   Node *p = yyvsp[0].node;
		   set_nextSibling(n,p);
		   while (p) {
		     Setattr(p,"type",Copy(ty));
		     Setattr(p,"unnamed",unnamed);
		     Setattr(p,"storage",yyvsp[-7].id);
		     p = nextSibling(p);
		   }
		 } else {
		   if (Len(scanner_ccode)) {
		     Setattr(n,"code",Copy(scanner_ccode));
		   }
		 }
		 add_symbols(yyval.node);        /* Add enum to tag space */
		 set_nextSibling(yyval.node,n);
		 add_symbols(yyvsp[-3].node);       /* Add to id space */
	         add_symbols(n);
	       }
    break;

  case 114:
#line 2297 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                   /* This is a sick hack.  If the ctor_end has parameters,
                      and the parms paremeter only has 1 parameter, this
                      could be a declaration of the form:

                         type (id)(parms)

			 Otherwise it's an error. */
                    int err = 0;
                    yyval.node = 0;

		    if ((ParmList_len(yyvsp[-2].pl) == 1) && (!Swig_scopename_check(yyvsp[-4].type))) {
		      SwigType *ty = Getattr(yyvsp[-2].pl,"type");
		      String *name = Getattr(yyvsp[-2].pl,"name");
		      err = 1;
		      if (!name) {
			yyval.node = new_node("cdecl");
			Setattr(yyval.node,"type",yyvsp[-4].type);
			Setattr(yyval.node,"storage",yyvsp[-5].id);
			Setattr(yyval.node,"name",ty);

			if (yyvsp[0].decl.have_parms) {
			  SwigType *decl = NewString("");
			  SwigType_add_function(decl,yyvsp[0].decl.parms);
			  Setattr(yyval.node,"decl",decl);
			  Setattr(yyval.node,"parms",yyvsp[0].decl.parms);
			  if (Len(scanner_ccode)) {
			    Setattr(yyval.node,"code",Copy(scanner_ccode));
			  }
			}
			if (yyvsp[0].decl.defarg) {
			  Setattr(yyval.node,"value",yyvsp[0].decl.defarg);
			}
			Setattr(yyval.node,"throws",yyvsp[0].decl.throws);
			err = 0;
		      }
		    }
		    if (err) {
		      Swig_error(cparse_file,cparse_line,"Syntax error in input.\n");
		    }
                }
    break;

  case 115:
#line 2344 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {  yyval.node = yyvsp[0].node; }
    break;

  case 116:
#line 2345 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 117:
#line 2346 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 118:
#line 2347 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 119:
#line 2348 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 120:
#line 2349 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = 0; }
    break;

  case 121:
#line 2355 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                   List *bases = 0;
                   class_rename = make_name(yyvsp[-2].str,0);
		   Classprefix = NewString(yyvsp[-2].str);
		   /* Deal with inheritance  */
		   if (yyvsp[-1].bases) {
		     bases = make_inherit_list(yyvsp[-2].str,yyvsp[-1].bases);
		   }
		   if (SwigType_istemplate(yyvsp[-2].str)) {
		     String *fbase, *tbase, *prefix;
		     prefix = SwigType_templateprefix(yyvsp[-2].str);
		     if (Namespaceprefix) {
		       fbase = NewStringf("%s::%s", Namespaceprefix,yyvsp[-2].str);
		       tbase = NewStringf("%s::%s", Namespaceprefix, prefix);
		     } else {
		       fbase = Copy(yyvsp[-2].str);
		       tbase = Copy(prefix);
		     }
		     rename_inherit(tbase,fbase);
		     Delete(fbase);
		     Delete(tbase);
		     Delete(prefix);
		   }
                   if (strcmp(yyvsp[-3].id,"class") == 0) {
		     cplus_mode = CPLUS_PRIVATE;
		   } else {
		     cplus_mode = CPLUS_PUBLIC;
		   }
		   Swig_symbol_newscope();
		   Swig_symbol_setscopename(yyvsp[-2].str);
		   if (bases) {
		     Iterator s;
		     for (s = First(bases); s.item; s = Next(s)) {
		       Symtab *st = Getattr(s.item,"symtab");
		       if (st) {
			 Swig_symbol_inherit(st); 
		       }
		     }
		   }
		   Namespaceprefix = Swig_symbol_qualifiedscopename(0);
		   cparse_start_line = cparse_line;

		   /* If there are active template parameters, we need to make sure they are
                      placed in the class symbol table so we can catch shadows */

		   if (template_parameters) {
		     Parm *tp = template_parameters;
		     while(tp) {
		       Node *tn = new_node("templateparm");
		       Setattr(tn,"name",Getattr(tp,"name"));
		       Swig_symbol_cadd(Copy(Getattr(tp,"name")),tn);
		       tp = nextSibling(tp);
		     }
		   }
		   inclass = 1;
               }
    break;

  case 122:
#line 2410 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 Node *p;
		 SwigType *ty;
		 inclass = 0;
		 yyval.node = new_node("class");
		 Setline(yyval.node,cparse_start_line);
		 Setattr(yyval.node,"name",yyvsp[-6].str);
		 Setattr(yyval.node,"kind",yyvsp[-7].id);
		 Setattr(yyval.node,"baselist",yyvsp[-5].bases);
		 Setattr(yyval.node,"allows_typedef","1");
		 /* Check for pure-abstract class */
		 Setattr(yyval.node,"abstract", pure_abstract(yyvsp[-2].node));
		 
		 /* This bit of code merges in a previously defined %extend directive (if any) */
		 if (extendhash) {
		   String *clsname = Swig_symbol_qualifiedscopename(0);
		   Node *am = Getattr(extendhash,clsname);
		   if (am) {
		     merge_extensions(yyval.node,am);
		     appendChild(yyval.node,am);
		     Delattr(extendhash,clsname);
		   }
		   Delete(clsname);
		 }
		 if (!classes) classes = NewHash();
		 Setattr(classes,Swig_symbol_qualifiedscopename(0),yyval.node);

		 appendChild(yyval.node,yyvsp[-2].node);
		 p = yyvsp[0].node;
		 if (p) {
		   set_nextSibling(yyval.node,p);
		 }
		 
		 if (cparse_cplusplus) {
		   ty = NewString(yyvsp[-6].str);
		 } else {
		   ty = NewStringf("%s %s", yyvsp[-7].id,yyvsp[-6].str);
		 }
		 while (p) {
		   Setattr(p,"storage",yyvsp[-8].id);
		   Setattr(p,"type",ty);
		   p = nextSibling(p);
		 }
		 /* Dump nested classes */
		 {
		   String *name = yyvsp[-6].str;
		   if (yyvsp[0].node) {
		     SwigType *decltype = Getattr(yyvsp[0].node,"decl");
		     if (Cmp(yyvsp[-8].id,"typedef") == 0) {
		       if (!decltype || !Len(decltype)) {
			 name = Getattr(yyvsp[0].node,"name");
			 Setattr(yyval.node,"tdname",Copy(name));

			 /* Use typedef name as class name */
			 if (class_rename && (Strcmp(class_rename,yyvsp[-6].str) == 0)) {
			   class_rename = NewString(name);
			 }
			 if (!Getattr(classes,name)) {
			   Setattr(classes,name,yyval.node);
			 }
			 Setattr(yyval.node,"decl",decltype);
		       }
		     }
		   }
		   appendChild(yyval.node,dump_nested(Char(name)));
		 }
		 Setattr(yyval.node,"symtab",Swig_symbol_popscope());

		 yyrename = NewString(class_rename);
		 Classprefix = 0;
		 Namespaceprefix = Swig_symbol_qualifiedscopename(0);
		 add_symbols(yyval.node);
		 if (yyvsp[0].node)
		   add_symbols(yyvsp[0].node);

	       }
    break;

  case 123:
#line 2489 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
	       class_rename = make_name(0,0);
	       if (strcmp(yyvsp[-1].id,"class") == 0) {
		 cplus_mode = CPLUS_PRIVATE;
	       } else {
		 cplus_mode = CPLUS_PUBLIC;
	       }
	       Swig_symbol_newscope();
	       cparse_start_line = cparse_line;
	       inclass = 1;
	       Classprefix = NewString("");
	       Namespaceprefix = Swig_symbol_qualifiedscopename(0);
             }
    break;

  case 124:
#line 2501 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
	       String *unnamed;
	       Node *n, *p, *pp = 0;
	       Classprefix = 0;
	       inclass = 0;
	       unnamed = make_unnamed();
	       yyval.node = new_node("class");
	       Setline(yyval.node,cparse_start_line);
	       Setattr(yyval.node,"kind",yyvsp[-6].id);
	       Setattr(yyval.node,"storage",yyvsp[-7].id);
	       Setattr(yyval.node,"unnamed",unnamed);
	       Setattr(yyval.node,"allows_typedef","1");

	       /* Check for pure-abstract class */
	       Setattr(yyval.node,"abstract", pure_abstract(yyvsp[-3].node));

	       n = new_node("cdecl");
	       Setattr(n,"name",yyvsp[-1].decl.id);
	       Setattr(n,"unnamed",unnamed);
	       Setattr(n,"type",unnamed);
	       Setattr(n,"decl",yyvsp[-1].decl.type);
	       Setattr(n,"parms",yyvsp[-1].decl.parms);
	       Setattr(n,"storage",yyvsp[-7].id);
	       pp = n;
	       if (yyvsp[0].node) {
		 set_nextSibling(n,yyvsp[0].node);
		 p = yyvsp[0].node;
		 while (p) {
		   pp = p;
		   Setattr(p,"unnamed",unnamed);
		   Setattr(p,"type",Copy(unnamed));
		   Setattr(p,"storage",yyvsp[-7].id);
		   p = nextSibling(p);
		 }
	       }
	       set_nextSibling(yyval.node,n);
	       {
		 /* If a proper typedef name was given, we'll use it to set the scope name */
		 String *name = 0;
		 if (yyvsp[-7].id && (strcmp(yyvsp[-7].id,"typedef") == 0)) {
		   if (!Len(yyvsp[-1].decl.type)) {	
		     name = yyvsp[-1].decl.id;
		     Setattr(yyval.node,"tdname",name);
		     Setattr(yyval.node,"name",name);
		     /* if (!class_rename) class_rename = NewString(name); */
		     Swig_symbol_setscopename(name);

		     /* If a proper name given, we use that as the typedef, not unnamed */
		     Clear(unnamed);
		     Append(unnamed, name);
		     
		     n = nextSibling(n);
		     set_nextSibling(yyval.node,n);

		     /* Check for previous extensions */
		     if (extendhash) {
		       String *clsname = Swig_symbol_qualifiedscopename(0);
		       Node *am = Getattr(extendhash,clsname);
		       if (am) {
			 /* Merge the extension into the symbol table */
			 merge_extensions(yyval.node,am);
			 appendChild(yyval.node,am);
			 Delattr(extendhash,clsname);
		       }
		       Delete(clsname);
		     }
		     if (!classes) classes = NewHash();
		     Setattr(classes,Swig_symbol_qualifiedscopename(0),yyval.node);
		   } else {
		     Swig_symbol_setscopename((char*)"<unnamed>");
		   }
		 }
		 appendChild(yyval.node,yyvsp[-3].node);
		 appendChild(yyval.node,dump_nested(Char(name)));
	       }
	       /* Pop the scope */
	       Setattr(yyval.node,"symtab",Swig_symbol_popscope());
	       if (class_rename) {
		 yyrename = NewString(class_rename);
	       }
	       Namespaceprefix = Swig_symbol_qualifiedscopename(0);
	       add_symbols(yyval.node);
	       add_symbols(n);
              }
    break;

  case 125:
#line 2587 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = 0; }
    break;

  case 126:
#line 2588 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                        yyval.node = new_node("cdecl");
                        Setattr(yyval.node,"name",yyvsp[-1].decl.id);
                        Setattr(yyval.node,"decl",yyvsp[-1].decl.type);
                        Setattr(yyval.node,"parms",yyvsp[-1].decl.parms);
			set_nextSibling(yyval.node,yyvsp[0].node);
                    }
    break;

  case 127:
#line 2600 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
              if (yyvsp[-3].id && (Strcmp(yyvsp[-3].id,"friend") == 0)) {
		/* Ignore */
                yyval.node = 0; 
	      } else {
		yyval.node = new_node("classforward");
		Setattr(yyval.node,"kind",yyvsp[-2].id);
		Setattr(yyval.node,"name",yyvsp[-1].str);
		Setattr(yyval.node,"sym:weak", "1");
		add_symbols(yyval.node);
	      }
             }
    break;

  case 128:
#line 2618 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { template_parameters = yyvsp[-1].tparms; }
    break;

  case 129:
#line 2618 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		      String *tname = 0;
		      int     error = 0;

                      template_parameters = 0;
                      yyval.node = yyvsp[0].node;
		      if (yyval.node) tname = Getattr(yyval.node,"name");
		      
		      /* Check if the class is a template specialization */
		      if ((yyval.node) && (Strstr(tname,"<")) && (Strncmp(tname,"operator ",9) != 0)) {
			/* If a specialization.  Check if defined. */
			Node *tempn = 0;
			{
			  String *tbase = SwigType_templateprefix(tname);
			  tempn = Swig_symbol_clookup_local(tbase,0);
			  if (!tempn || (Strcmp(nodeType(tempn),"template") != 0)) {
			    Swig_warning(WARN_PARSE_TEMPLATE_SP_UNDEF, Getfile(yyval.node),Getline(yyval.node),"Specialization of non-template '%s'.\n", tbase);
			    tempn = 0;
			    error = 1;
			  }
			  Delete(tbase);
			}
			Setattr(yyval.node,"specialization","1");
			Setattr(yyval.node,"templatetype",nodeType(yyval.node));
			set_nodeType(yyval.node,"template");
			/* Template partial specialization */
			if (tempn && (yyvsp[-3].tparms) && (yyvsp[0].node)) {
			  List   *tlist;
			  String *targs = SwigType_templateargs(tname);
			  tlist = SwigType_parmlist(targs);
			  /*			  Printf(stdout,"targs = '%s' %s\n", targs, tlist); */
			  if (!Getattr(yyval.node,"sym:weak")) {
			    Setattr(yyval.node,"sym:typename","1");
			  }
			  
			  if (Len(tlist) != ParmList_len(Getattr(tempn,"templateparms"))) {
			    Swig_error(Getfile(yyval.node),Getline(yyval.node),"Inconsistent argument count in template partial specialization. %d %d\n", Len(tlist), ParmList_len(Getattr(tempn,"templateparms")));
			    
			  } else {

			  /* This code builds the argument list for the partial template
                             specialization.  This is a little hairy, but the idea is as
                             follows:

                             $3 contains a list of arguments supplied for the template.
                             For example template<class T>.

                             tlist is a list of the specialization arguments--which may be
                             different.  For example class<int,T>.

                             tp is a copy of the arguments in the original template definition.
     
                             The patching algorithm walks through the list of supplied
                             arguments ($3), finds the position in the specialization arguments
                             (tlist), and then patches the name in the argument list of the
                             original template.
			  */

			  {
			    String *pn;
			    Parm *p, *p1;
			    int i, nargs;
			    Parm *tp = CopyParmList(Getattr(tempn,"templateparms"));
			    nargs = Len(tlist);
			    p = yyvsp[-3].tparms;
			    while (p) {
			      for (i = 0; i < nargs; i++){
				pn = Getattr(p,"name");
				if (Strcmp(pn,SwigType_base(Getitem(tlist,i))) == 0) {
				  int j;
				  Parm *p1 = tp;
				  for (j = 0; j < i; j++) {
				    p1 = nextSibling(p1);
				  }
				  Setattr(p1,"name",pn);
				  Setattr(p1,"partialarg","1");
				}
			      }
			      p = nextSibling(p);
			    }
			    p1 = tp;
			    i = 0;
			    while (p1) {
			      if (!Getattr(p1,"partialarg")) {
				Delattr(p1,"name");
				Setattr(p1,"type", Getitem(tlist,i));
			      } 
			      i++;
			      p1 = nextSibling(p1);
			    }
			    Setattr(yyval.node,"templateparms",tp);
			  }
#if 0
			  /* Patch the parameter list */
			  if (tempn) {
			    Parm *p,*p1;
			    ParmList *tp = CopyParmList(Getattr(tempn,"templateparms"));
			    p = yyvsp[-3].tparms;
			    p1 = tp;
			    while (p && p1) {
			      String *pn = Getattr(p,"name");
			      Printf(stdout,"pn = '%s'\n", pn);
			      if (pn) Setattr(p1,"name",pn);
			      else Delattr(p1,"name");
			      pn = Getattr(p,"type");
			      if (pn) Setattr(p1,"type",pn);
			      p = nextSibling(p);
			      p1 = nextSibling(p1);
			    }
			    Setattr(yyval.node,"templateparms",tp);
			  } else {
			    Setattr(yyval.node,"templateparms",yyvsp[-3].tparms);
			  }
#endif
			  Delattr(yyval.node,"specialization");
			  Setattr(yyval.node,"partialspecialization","1");
			  /* Create a specialized name for matching */
			  {
			    Parm *p = yyvsp[-3].tparms;
			    String *fname = NewString(Getattr(yyval.node,"name"));
			    String *ffname = 0;

			    char   tmp[32];
			    int    i;
			    while (p) {
			      String *n = Getattr(p,"name");
			      if (!n) {
				p = nextSibling(p);
				continue;
			      }
			      for (i = 0; i < Len(tlist); i++) {
				if (Strstr(Getitem(tlist,i),n)) {
				  sprintf(tmp,"$%d",i+1);
				  Replaceid(fname,n,tmp);
				}
			      }
			      p = nextSibling(p);
			    }
			    /* Patch argument names with typedef */
			    {
			      Iterator tt;
			      List *tparms = SwigType_parmlist(fname);
			      ffname = SwigType_templateprefix(fname);
			      Append(ffname,"<(");
			      for (tt = First(tparms); tt.item; ) {
				SwigType *ttr = Swig_symbol_typedef_reduce(tt.item,0);
				ttr = Swig_symbol_type_qualify(ttr,0);
				Append(ffname,ttr);
				tt = Next(tt);
				if (tt.item) Putc(',',ffname);
			      }
			      Append(ffname,")>");
			    }
			    {
			      String *partials = Getattr(tempn,"partials");
			      if (!partials) {
				partials = NewList();
				Setattr(tempn,"partials",partials);
			      }
			      /*			      Printf(stdout,"partial: fname = '%s', '%s'\n", fname, Swig_symbol_typedef_reduce(fname,0)); */
			      Append(partials,ffname);
			    }
			    Setattr(yyval.node,"partialargs",ffname);
			    Swig_symbol_cadd(ffname,yyval.node);
			  }
			  }
			  Delete(tlist);
			  Delete(targs);
			} else {
			  /* Need to resolve exact specialization name */
			  /* This needs to be rewritten */
			  List *tparms;
			  String *fname;
			  Iterator tt;
			  fname = SwigType_templateprefix(tname);
			  tparms = SwigType_parmlist(tname);
			  Append(fname,"<(");
			  for (tt = First(tparms); tt.item; ) {
			    SwigType *ttr = Swig_symbol_typedef_reduce(tt.item,0);
			    ttr = Swig_symbol_type_qualify(ttr,0);
			    Append(fname,ttr);
			    tt = Next(tt);
			    if (tt.item) Putc(',',fname);
			  }
			  Append(fname,")>");
			  Swig_symbol_cadd(fname,yyval.node);
			}
		      }  else if (yyval.node) {
			Setattr(yyval.node,"templatetype",nodeType(yyvsp[0].node));
			set_nodeType(yyval.node,"template");
			Setattr(yyval.node,"templateparms", yyvsp[-3].tparms);
			if (!Getattr(yyval.node,"sym:weak")) {
			  Setattr(yyval.node,"sym:typename","1");
			}
			add_symbols(yyval.node);
			/* We also place a fully parameterized version in the symbol table */
			{
			  Parm *p;
			  String *fname = NewStringf("%s<(",Getattr(yyval.node,"name"));
			  p = yyvsp[-3].tparms;
			  while (p) {
			    String *n = Getattr(p,"name");
			    if (!n) n = Getattr(p,"type");
			    Printf(fname,"%s", n);
			    p = nextSibling(p);
			    if (p) Putc(',',fname);
			  }
			  Printf(fname,")>");
			  Swig_symbol_cadd(fname,yyval.node);
			}
		      }
		      if (error) yyval.node = 0;
                  }
    break;

  case 130:
#line 2831 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		  Swig_warning(WARN_PARSE_EXPLICIT_TEMPLATE, cparse_file, cparse_line, "Explicit template instantiation ignored.\n");
                   yyval.node = 0; 
                }
    break;

  case 131:
#line 2837 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		  yyval.node = yyvsp[0].node;
                }
    break;

  case 132:
#line 2840 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                   yyval.node = yyvsp[0].node;
                }
    break;

  case 133:
#line 2843 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                   yyval.node = yyvsp[0].node;
                }
    break;

  case 134:
#line 2846 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		  yyval.node = 0;
                }
    break;

  case 135:
#line 2849 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                  yyval.node = yyvsp[0].node;
                }
    break;

  case 136:
#line 2854 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		   /* Rip out the parameter names */
		  Parm *p = yyvsp[0].pl;
		  yyval.tparms = yyvsp[0].pl;

		  while (p) {
		    String *name = Getattr(p,"name");
		    if (!name) {
		      /* Hmmm. Maybe it's a 'class T' parameter */
		      char *type = Char(Getattr(p,"type"));
		      /* Template template parameter */
		      if (strncmp(type,"template<class> ",16) == 0) {
			type += 16;
		      }
		      if ((strncmp(type,"class ",6) == 0) || (strncmp(type,"typename ", 9) == 0)) {
			char *t = strchr(type,' ');
			Setattr(p,"name", t+1);
		      } else {
			/*
			 Swig_error(cparse_file, cparse_line, "Missing template parameter name\n");
			 $$.rparms = 0;
			 $$.parms = 0;
			 break; */
		      }
		    }
		    p = nextSibling(p);
		  }
                 }
    break;

  case 137:
#line 2886 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                  yyval.node = new_node("using");
		  Setattr(yyval.node,"uname",yyvsp[-1].str);
		  Setattr(yyval.node,"name", Swig_scopename_last(yyvsp[-1].str));
		  add_symbols(yyval.node);
             }
    break;

  case 138:
#line 2892 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
	       Node *n = Swig_symbol_clookup(yyvsp[-1].str,0);
	       if (!n) {
		 Swig_error(cparse_file, cparse_line, "Nothing known about namespace '%s'\n", yyvsp[-1].str);
		 yyval.node = 0;
	       } else {

		 while (Strcmp(nodeType(n),"using") == 0) {
		   n = Getattr(n,"node");
		 }
		 if (n) {
		   if (Strcmp(nodeType(n),"namespace") == 0) {
		     yyval.node = new_node("using");
		     Setattr(yyval.node,"node",n);
		     Setattr(yyval.node,"namespace", yyvsp[-1].str);
		     Swig_symbol_inherit(Getattr(n,"symtab"));
		   } else {
		     Swig_error(cparse_file, cparse_line, "'%s' is not a namespace.\n", yyvsp[-1].str);
		     yyval.node = 0;
		   }
		 } else {
		   yyval.node = 0;
		 }
	       }
             }
    break;

  case 139:
#line 2919 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                Hash *h;
                yyvsp[-2].node = Swig_symbol_current();
		h = Swig_symbol_clookup(yyvsp[-1].str,0);
		if (h && (Strcmp(nodeType(h),"namespace") == 0)) {
		  if (Getattr(h,"alias")) {
		    h = Getattr(h,"namespace");
		    Swig_warning(WARN_PARSE_NAMESPACE_ALIAS, cparse_file, cparse_line, "Namespace alias '%s' not allowed here. Assuming '%s'\n",
				 yyvsp[-1].str, Getattr(h,"name"));
		    yyvsp[-1].str = Getattr(h,"name");
		  }
		  Swig_symbol_setscope(Getattr(h,"symtab"));
		} else {
		  Swig_symbol_newscope();
		  Swig_symbol_setscopename(yyvsp[-1].str);
		}
		Namespaceprefix = Swig_symbol_qualifiedscopename(0);
             }
    break;

  case 140:
#line 2936 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                Node *n = yyvsp[-1].node;
		set_nodeType(n,"namespace");
		Setattr(n,"name",yyvsp[-4].str);
                Setattr(n,"symtab", Swig_symbol_popscope());
		Swig_symbol_setscope(yyvsp[-5].node);
		yyval.node = n;
		Namespaceprefix = Swig_symbol_qualifiedscopename(0);
		add_symbols(yyval.node);
             }
    break;

  case 141:
#line 2946 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
	       Hash *h;
	       yyvsp[-1].node = Swig_symbol_current();
	       h = Swig_symbol_clookup("",0);
	       if (h && (Strcmp(nodeType(h),"namespace") == 0)) {
		 Swig_symbol_setscope(Getattr(h,"symtab"));
	       } else {
		 Swig_symbol_newscope();
		 Swig_symbol_setscopename("__unnamed__");
	       }
	       Namespaceprefix = Swig_symbol_qualifiedscopename(0);
             }
    break;

  case 142:
#line 2957 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
	       yyval.node = yyvsp[-1].node;
	       set_nodeType(yyval.node,"namespace");
	       Setattr(yyval.node,"unnamed","1");
	       Setattr(yyval.node,"symtab", Swig_symbol_popscope());
	       Swig_symbol_setscope(yyvsp[-4].node);
	       Namespaceprefix = Swig_symbol_qualifiedscopename(0);
	       add_symbols(yyval.node);
             }
    break;

  case 143:
#line 2966 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
	       /* Namespace alias */
	       Node *n;
	       yyval.node = new_node("namespace");
	       Setattr(yyval.node,"name",yyvsp[-3].id);
	       Setattr(yyval.node,"alias",yyvsp[-1].str);
	       n = Swig_symbol_clookup(yyvsp[-1].str,0);
	       if (!n) {
		 Swig_error(cparse_file, cparse_line, "Unknown namespace '%s'\n", yyvsp[-1].str);
		 yyval.node = 0;
	       } else {
		 if (Strcmp(nodeType(n),"namespace") != 0) {
		   Swig_error(cparse_file, cparse_line, "'%s' is not a namespace\n",yyvsp[-1].str);
		   yyval.node = 0;
		 } else {
		   while (Getattr(n,"alias")) {
		     n = Getattr(n,"namespace");
		   }
		   Setattr(yyval.node,"namespace",n);
		   add_symbols(yyval.node);
		   /* Set up a scope alias */
		   Swig_symbol_alias(yyvsp[-3].id,Getattr(n,"symtab"));
		 }
	       }
             }
    break;

  case 144:
#line 2993 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                   yyval.node = yyvsp[-1].node;
		   if (yyval.node) {
		     Node *p = yyval.node;
		     Node *pp =0;
		     while (p) {
		       pp = p;
		       p = nextSibling(p);
		     }
		     set_nextSibling(pp,yyvsp[0].node);
		   } else {
		     yyval.node = yyvsp[0].node;
		   }
             }
    break;

  case 145:
#line 3007 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                  if (cplus_mode != CPLUS_PUBLIC) {
		     Swig_error(cparse_file,cparse_line,"%%extend can only be used in a public section\n");
		  }
             }
    break;

  case 146:
#line 3011 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
	       yyval.node = new_node("extend");
	       Swig_tag_nodes(yyvsp[-2].node,"feature:extend",(char*) "1");
	       appendChild(yyval.node,yyvsp[-2].node);
	       set_nextSibling(yyval.node,yyvsp[0].node);
	     }
    break;

  case 147:
#line 3017 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = 0;}
    break;

  case 148:
#line 3018 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
	       skip_decl();
		   {
		     static int last_error_line = -1;
		     if (last_error_line != cparse_line) {
		       Swig_error(cparse_file, cparse_line,"Syntax error in input.\n");
		       last_error_line = cparse_line;
		     }
		   }
	     }
    break;

  case 149:
#line 3027 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                yyval.node = yyvsp[0].node;
             }
    break;

  case 150:
#line 3038 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 151:
#line 3039 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                 yyval.node = yyvsp[0].node; 
		 if (extendmode) {
		   String *symname;
		   symname= make_name(Getattr(yyval.node,"name"), Getattr(yyval.node,"decl"));
		   if (Strcmp(symname,Getattr(yyval.node,"name")) == 0) {
		     /* No renaming operation.  Set name to class name */
		     yyrename = NewString(Getattr(current_class,"sym:name"));
		   } else {
		     yyrename = symname;
		   }
		 }
		 add_symbols(yyval.node);
             }
    break;

  case 152:
#line 3053 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 153:
#line 3054 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 154:
#line 3055 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 155:
#line 3056 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 156:
#line 3057 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 157:
#line 3058 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 158:
#line 3059 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = 0; }
    break;

  case 159:
#line 3060 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 160:
#line 3061 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 161:
#line 3062 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = 0; }
    break;

  case 162:
#line 3063 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 163:
#line 3064 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 164:
#line 3065 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = 0; }
    break;

  case 165:
#line 3066 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = 0; }
    break;

  case 166:
#line 3075 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
              if (Classprefix) {
		 SwigType *decl = NewString("");
		 yyval.node = new_node("constructor");
		 Setattr(yyval.node,"name",yyvsp[-4].type);
		 Setattr(yyval.node,"parms",yyvsp[-2].pl);
		 SwigType_add_function(decl,yyvsp[-2].pl);
		 Setattr(yyval.node,"decl",decl);
		 Setattr(yyval.node,"throws",yyvsp[0].decl.throws);
		 if (Len(scanner_ccode)) {
		   Setattr(yyval.node,"code",Copy(scanner_ccode));
		 }
		 Setattr(yyval.node,"feature:new","1");
	      } else {
		yyval.node = 0;
              }
              }
    break;

  case 167:
#line 3096 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
               yyval.node = new_node("destructor");
	       Setattr(yyval.node,"name",NewStringf("~%s",yyvsp[-4].str));
	       if (Len(scanner_ccode)) {
		 Setattr(yyval.node,"code",Copy(scanner_ccode));
	       }
	       {
		 String *decl = NewString("");
		 SwigType_add_function(decl,yyvsp[-2].pl);
		 Setattr(yyval.node,"decl",decl);
	       }
	       add_symbols(yyval.node);
	      }
    break;

  case 168:
#line 3112 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		yyval.node = new_node("destructor");
	       /* Check for template names.  If the class is a template
		  and the constructor is missing the template part, we
		  add it */
	       {
		 char *c = Strstr(Classprefix,"<");
		 if (c) {
		   if (!Strstr(yyvsp[-4].str,"<")) {
		     yyvsp[-4].str = NewStringf("%s%s",yyvsp[-4].str,c);
		   }
		 }
	       }
		Setattr(yyval.node,"storage","virtual");
		Setattr(yyval.node,"name",NewStringf("~%s",yyvsp[-4].str));
		if (yyvsp[0].dtype.val) {
		  Setattr(yyval.node,"value","0");
		}
		if (Len(scanner_ccode)) {
		  Setattr(yyval.node,"code",Copy(scanner_ccode));
		}
		{
		  String *decl = NewString("");
		  SwigType_add_function(decl,yyvsp[-2].pl);
		  Setattr(yyval.node,"decl",decl);
		}

		add_symbols(yyval.node);
	      }
    break;

  case 169:
#line 3145 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 yyval.node = new_node("cdecl");
                 Setattr(yyval.node,"type",yyvsp[-5].type);
		 Setattr(yyval.node,"name",yyvsp[-6].str);

		 SwigType_add_function(yyvsp[-4].type,yyvsp[-2].pl);
		 if (yyvsp[0].dtype.qualifier) {
		   SwigType_push(yyvsp[-4].type,yyvsp[0].dtype.qualifier);
		 }
		 Setattr(yyval.node,"decl",yyvsp[-4].type);
		 Setattr(yyval.node,"parms",yyvsp[-2].pl);
		 Setattr(yyval.node,"conversion_operator","1");
		 add_symbols(yyval.node);
              }
    break;

  case 170:
#line 3159 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 SwigType *decl;
                 yyval.node = new_node("cdecl");
                 Setattr(yyval.node,"type",yyvsp[-5].type);
		 Setattr(yyval.node,"name",yyvsp[-6].str);
		 decl = NewString("");
		 SwigType_add_reference(decl);
		 SwigType_add_function(decl,yyvsp[-2].pl);
		 if (yyvsp[0].dtype.qualifier) {
		   SwigType_push(decl,yyvsp[0].dtype.qualifier);
		 }
		 Setattr(yyval.node,"decl",decl);
		 Setattr(yyval.node,"parms",yyvsp[-2].pl);
		 Setattr(yyval.node,"conversion_operator","1");
		 add_symbols(yyval.node);
	       }
    break;

  case 171:
#line 3176 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		String *t = NewString("");
		yyval.node = new_node("cdecl");
		Setattr(yyval.node,"type",yyvsp[-4].type);
		Setattr(yyval.node,"name",yyvsp[-5].str);
		SwigType_add_function(t,yyvsp[-2].pl);
		if (yyvsp[0].dtype.qualifier) {
		  SwigType_push(t,yyvsp[0].dtype.qualifier);
		}
		Setattr(yyval.node,"decl",t);
		Setattr(yyval.node,"parms",yyvsp[-2].pl);
		Setattr(yyval.node,"conversion_operator","1");
		add_symbols(yyval.node);
              }
    break;

  case 172:
#line 3194 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 skip_balanced('{','}');
                 yyval.node = 0;
               }
    break;

  case 173:
#line 3201 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                yyval.node = new_node("access");
		Setattr(yyval.node,"kind","public");
                cplus_mode = CPLUS_PUBLIC;
              }
    break;

  case 174:
#line 3208 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                yyval.node = new_node("access");
                Setattr(yyval.node,"kind","private");
		cplus_mode = CPLUS_PRIVATE;
	      }
    break;

  case 175:
#line 3216 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
		yyval.node = new_node("access");
		Setattr(yyval.node,"kind","protected");
		cplus_mode = CPLUS_PROTECTED;
	      }
    break;

  case 176:
#line 3239 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { cparse_start_line = cparse_line; skip_balanced('{','}');
	      }
    break;

  case 177:
#line 3240 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
	        yyval.node = 0;
		if (cplus_mode == CPLUS_PUBLIC) {
		  if (yyvsp[-1].decl.id) {
		    if (strcmp(yyvsp[-5].id,"class") == 0) {
		      Swig_warning(WARN_PARSE_NESTED_CLASS, cparse_file, cparse_line, "Nested classes not currently supported (ignored).\n");
		      /* Generate some code for a new class */
		    } else {
		      Nested *n = (Nested *) malloc(sizeof(Nested));
		      n->code = NewString("");
		      Printv(n->code, "typedef ", yyvsp[-5].id, " ",
			     Char(scanner_ccode), " $classname_", yyvsp[-1].decl.id, ";\n", NIL);

		      n->name = Swig_copy_string(yyvsp[-1].decl.id);
		      n->line = cparse_start_line;
		      n->type = NewString("");
		      n->kind = yyvsp[-5].id;
		      SwigType_push(n->type, yyvsp[-1].decl.type);
		      n->next = 0;
		      add_nested(n);
		    }
		  } else {
		    Swig_warning(WARN_PARSE_NESTED_CLASS, cparse_file, cparse_line, "Nested %s not currently supported (ignored).\n", yyvsp[-5].id);
		  }
		}
	      }
    break;

  case 178:
#line 3268 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { cparse_start_line = cparse_line; skip_balanced('{','}');
              }
    break;

  case 179:
#line 3269 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
	        yyval.node = 0;
		if (cplus_mode == CPLUS_PUBLIC) {
		  if (strcmp(yyvsp[-4].id,"class") == 0) {
		    Swig_warning(WARN_PARSE_NESTED_CLASS,cparse_file, cparse_line,"Nested class not currently supported (ignored)\n");
		    /* Generate some code for a new class */
		  } else if (yyvsp[-1].decl.id) {
		    /* Generate some code for a new class */
		    Nested *n = (Nested *) malloc(sizeof(Nested));
		    n->code = NewString("");
		    Printv(n->code, "typedef ", yyvsp[-4].id, " " ,
			    Char(scanner_ccode), " $classname_", yyvsp[-1].decl.id, ";\n",NIL);
		    n->name = Swig_copy_string(yyvsp[-1].decl.id);
		    n->line = cparse_start_line;
		    n->type = NewString("");
		    n->kind = yyvsp[-4].id;
		    SwigType_push(n->type,yyvsp[-1].decl.type);
		    n->next = 0;
		    add_nested(n);
		  } else {
		    Swig_warning(WARN_PARSE_NESTED_CLASS, cparse_file, cparse_line, "Nested %s not currently supported (ignored).\n", yyvsp[-4].id);
		  }
		}
	      }
    break;

  case 180:
#line 3295 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.decl = yyvsp[0].decl;}
    break;

  case 181:
#line 3296 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.decl.id = 0; }
    break;

  case 182:
#line 3302 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 183:
#line 3305 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 184:
#line 3309 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 185:
#line 3312 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 186:
#line 3313 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 187:
#line 3314 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 188:
#line 3315 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 189:
#line 3316 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 190:
#line 3317 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 191:
#line 3318 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 192:
#line 3319 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 193:
#line 3322 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
	            Clear(scanner_ccode);
               }
    break;

  case 194:
#line 3325 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { skip_balanced('{','}'); }
    break;

  case 195:
#line 3328 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                     Clear(scanner_ccode);
                     yyval.dtype.val = 0;
                     yyval.dtype.qualifier = yyvsp[-1].dtype.qualifier;
                     yyval.dtype.bitfield = 0;
                     yyval.dtype.throws = yyvsp[-1].dtype.throws;
                }
    break;

  case 196:
#line 3335 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                     Clear(scanner_ccode);
                     yyval.dtype.val = yyvsp[-1].dtype.val;
                     yyval.dtype.qualifier = yyvsp[-3].dtype.qualifier;
                     yyval.dtype.bitfield = 0;
                     yyval.dtype.throws = yyvsp[-3].dtype.throws; 
               }
    break;

  case 197:
#line 3342 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                     skip_balanced('{','}');
                     yyval.dtype.val = 0;
                     yyval.dtype.qualifier = yyvsp[-1].dtype.qualifier;
                     yyval.dtype.bitfield = 0;
                     yyval.dtype.throws = yyvsp[-1].dtype.throws; 
               }
    break;

  case 198:
#line 3352 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { }
    break;

  case 199:
#line 3358 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.id = "extern"; }
    break;

  case 200:
#line 3359 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                   if (strcmp(yyvsp[0].id,"C") == 0) {
		     yyval.id = "externc";
		   } else {
		     Swig_warning(WARN_PARSE_UNDEFINED_EXTERN,cparse_file, cparse_line,"Unrecognized extern type \"%s\" (ignored).\n", yyvsp[0].id);
		     yyval.id = 0;
		   }
               }
    break;

  case 201:
#line 3367 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.id = "static"; }
    break;

  case 202:
#line 3368 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.id = "typedef"; }
    break;

  case 203:
#line 3369 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.id = "virtual"; }
    break;

  case 204:
#line 3370 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.id = "friend"; }
    break;

  case 205:
#line 3371 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.id = 0; }
    break;

  case 206:
#line 3378 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 Parm *p;
		 yyval.pl = yyvsp[0].pl;
		 p = yyvsp[0].pl;
                 while (p) {
		   Replace(Getattr(p,"type"),"typename ", "", DOH_REPLACE_ANY);
		   p = nextSibling(p);
                 }
               }
    break;

  case 207:
#line 3389 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		  if (1) { 
		    set_nextSibling(yyvsp[-1].p,yyvsp[0].pl);
		    yyval.pl = yyvsp[-1].p;
		  } else {
		    yyval.pl = yyvsp[0].pl;
		  }
		}
    break;

  case 208:
#line 3397 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.pl = 0; }
    break;

  case 209:
#line 3400 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 set_nextSibling(yyvsp[-1].p,yyvsp[0].pl);
		 yyval.pl = yyvsp[-1].p;
                }
    break;

  case 210:
#line 3404 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.pl = 0; }
    break;

  case 211:
#line 3408 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                   SwigType_push(yyvsp[-1].type,yyvsp[0].decl.type);
		   yyval.p = NewParm(yyvsp[-1].type,yyvsp[0].decl.id);
		   Setfile(yyval.p,cparse_file);
		   Setline(yyval.p,cparse_line);
		   if (yyvsp[0].decl.defarg) {
		     Setattr(yyval.p,"value",yyvsp[0].decl.defarg);
		   }
		}
    break;

  case 212:
#line 3418 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                  yyval.p = NewParm(NewStringf("template<class> %s %s", yyvsp[-1].id,yyvsp[0].str), 0);
		  Setfile(yyval.p,cparse_file);
		  Setline(yyval.p,cparse_line);
                }
    break;

  case 213:
#line 3423 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		  SwigType *t = NewString("v(...)");
		  yyval.p = NewParm(t, 0);
		  Setfile(yyval.p,cparse_file);
		  Setline(yyval.p,cparse_line);
		}
    break;

  case 214:
#line 3431 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 Parm *p;
		 yyval.p = yyvsp[0].p;
		 p = yyvsp[0].p;
                 while (p) {
		   if (Getattr(p,"type")) {
		     Replace(Getattr(p,"type"),"typename ", "", DOH_REPLACE_ANY);
		   }
		   p = nextSibling(p);
                 }
               }
    break;

  case 215:
#line 3444 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		  if (1) { 
		    set_nextSibling(yyvsp[-1].p,yyvsp[0].p);
		    yyval.p = yyvsp[-1].p;
		  } else {
		    yyval.p = yyvsp[0].p;
		  }
		}
    break;

  case 216:
#line 3452 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.p = 0; }
    break;

  case 217:
#line 3455 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 set_nextSibling(yyvsp[-1].p,yyvsp[0].p);
		 yyval.p = yyvsp[-1].p;
                }
    break;

  case 218:
#line 3459 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.p = 0; }
    break;

  case 219:
#line 3463 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		  yyval.p = yyvsp[0].p;
		  {
		    /* We need to make a possible adjustment for integer parameters. */
		    SwigType *type;
		    Node     *n = 0;

		    while (!n) {
		      type = Getattr(yyvsp[0].p,"type");
		      n = Swig_symbol_clookup(type,0);     /* See if we can find a node that matches the typename */
		      if ((n) && (Strcmp(nodeType(n),"cdecl") == 0)) {
			SwigType *decl = Getattr(n,"decl");
			if (!SwigType_isfunction(decl)) {
			  String *value = Getattr(n,"value");
			  if (value) {
			    Setattr(yyvsp[0].p,"type",Copy(value));
			    n = 0;
			  }
			}
		      } else {
			break;
		      }
		    }
		  }
		  
               }
    break;

  case 220:
#line 3489 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                  yyval.p = NewParm(0,0);
                  Setfile(yyval.p,cparse_file);
		  Setline(yyval.p,cparse_line);
		  Setattr(yyval.p,"value",yyvsp[0].dtype.val);
               }
    break;

  case 221:
#line 3495 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                  yyval.p = NewParm(0,0);
                  Setfile(yyval.p,cparse_file);
		  Setline(yyval.p,cparse_line);
		  Setattr(yyval.p,"value",NewString(yyvsp[0].id));
               }
    break;

  case 222:
#line 3503 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                  yyval.dtype = yyvsp[0].dtype; 
		  if (yyvsp[0].dtype.type == T_ERROR) {
		    Swig_warning(WARN_PARSE_BAD_DEFAULT,cparse_file, cparse_line, "Can't set default argument (ignored)\n");
		    yyval.dtype.val = 0;
		    yyval.dtype.rawval = 0;
		    yyval.dtype.bitfield = 0;
		    yyval.dtype.throws = 0;
		  }
               }
    break;

  case 223:
#line 3513 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 Node *n = Swig_symbol_clookup(yyvsp[0].decl.id,0);
		 if (n) {
		   String *q = Swig_symbol_qualified(n);
		   if (Getattr(n,"access")) {
		     if (cplus_mode == CPLUS_PUBLIC) {
		       Swig_warning(WARN_PARSE_PRIVATE, cparse_file, cparse_line,"'%s' is private in this context.\n", yyvsp[0].decl.id);
		       Swig_warning(WARN_PARSE_BAD_DEFAULT, cparse_file, cparse_line,"Can't set default argument value (ignored)\n");
		     }
		     yyval.dtype.val = 0;
		   } else {
		     if (q) {
		       String *temp = NewStringf("%s::%s", q, Getattr(n,"name"));
		       yyval.dtype.val = NewStringf("&%s", SwigType_str(yyvsp[0].decl.type,temp));
		       Delete(q);
		       Delete(temp);
		     } else {
		       yyval.dtype.val = NewStringf("&%s", SwigType_str(yyvsp[0].decl.type,yyvsp[0].decl.id));
		     }
		   }
		 } else {
		   yyval.dtype.val = NewStringf("&%s",SwigType_str(yyvsp[0].decl.type,yyvsp[0].decl.id));
		 }
		 yyval.dtype.rawval = 0;
		 yyval.dtype.type = T_USER;
		 yyval.dtype.bitfield = 0;
		 yyval.dtype.throws = 0;
	       }
    break;

  case 224:
#line 3541 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 skip_balanced('{','}');
		 yyval.dtype.val = 0;
		 yyval.dtype.rawval = 0;
                 yyval.dtype.type = T_INT;
		 yyval.dtype.bitfield = 0;
		 yyval.dtype.throws = 0;
	       }
    break;

  case 225:
#line 3549 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
		 yyval.dtype.val = 0;
		 yyval.dtype.rawval = 0;
		 yyval.dtype.type = 0;
		 yyval.dtype.bitfield = yyvsp[0].dtype.val;
		 yyval.dtype.throws = 0;
	       }
    break;

  case 226:
#line 3556 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 yyval.dtype.val = 0;
                 yyval.dtype.rawval = 0;
                 yyval.dtype.type = T_INT;
		 yyval.dtype.bitfield = 0;
		 yyval.dtype.throws = 0;
               }
    break;

  case 227:
#line 3565 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 yyval.decl = yyvsp[-1].decl;
		 yyval.decl.defarg = yyvsp[0].dtype.rawval ? yyvsp[0].dtype.rawval : yyvsp[0].dtype.val;
            }
    break;

  case 228:
#line 3569 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
              yyval.decl = yyvsp[-1].decl;
	      yyval.decl.defarg = yyvsp[0].dtype.rawval ? yyvsp[0].dtype.rawval : yyvsp[0].dtype.val;
            }
    break;

  case 229:
#line 3573 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
   	      yyval.decl.type = 0;
              yyval.decl.id = 0;
	      yyval.decl.defarg = yyvsp[0].dtype.rawval ? yyvsp[0].dtype.rawval : yyvsp[0].dtype.val;
            }
    break;

  case 230:
#line 3580 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 yyval.decl = yyvsp[0].decl;
		 if (SwigType_isfunction(yyvsp[0].decl.type)) {
		   Delete(SwigType_pop_function(yyvsp[0].decl.type));
		 } else if (SwigType_isarray(yyvsp[0].decl.type)) {
		   SwigType *ta = SwigType_pop_arrays(yyvsp[0].decl.type);
		   if (SwigType_isfunction(yyvsp[0].decl.type)) {
		     Delete(SwigType_pop_function(yyvsp[0].decl.type));
		   } else {
		     yyval.decl.parms = 0;
		   }
		   SwigType_push(yyvsp[0].decl.type,ta);
		   Delete(ta);
		 } else {
		   yyval.decl.parms = 0;
		 }
            }
    break;

  case 231:
#line 3597 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
              yyval.decl = yyvsp[0].decl;
	      if (SwigType_isfunction(yyvsp[0].decl.type)) {
		Delete(SwigType_pop_function(yyvsp[0].decl.type));
	      } else if (SwigType_isarray(yyvsp[0].decl.type)) {
		SwigType *ta = SwigType_pop_arrays(yyvsp[0].decl.type);
		if (SwigType_isfunction(yyvsp[0].decl.type)) {
		  Delete(SwigType_pop_function(yyvsp[0].decl.type));
		} else {
		  yyval.decl.parms = 0;
		}
		SwigType_push(yyvsp[0].decl.type,ta);
		Delete(ta);
	      } else {
		yyval.decl.parms = 0;
	      }
            }
    break;

  case 232:
#line 3614 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
   	      yyval.decl.type = 0;
              yyval.decl.id = 0;
	      yyval.decl.parms = 0;
	      }
    break;

  case 233:
#line 3622 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
              yyval.decl = yyvsp[0].decl;
	      if (yyval.decl.type) {
		SwigType_push(yyvsp[-1].type,yyval.decl.type);
		Delete(yyval.decl.type);
	      }
	      yyval.decl.type = yyvsp[-1].type;
           }
    break;

  case 234:
#line 3630 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
              yyval.decl = yyvsp[0].decl;
	      SwigType_add_reference(yyvsp[-2].type);
              if (yyval.decl.type) {
		SwigType_push(yyvsp[-2].type,yyval.decl.type);
		Delete(yyval.decl.type);
	      }
	      yyval.decl.type = yyvsp[-2].type;
           }
    break;

  case 235:
#line 3639 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
              yyval.decl = yyvsp[0].decl;
	      if (!yyval.decl.type) yyval.decl.type = NewString("");
           }
    break;

  case 236:
#line 3643 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
	     yyval.decl = yyvsp[0].decl;
	     yyval.decl.type = NewString("");
	     SwigType_add_reference(yyval.decl.type);
	     if (yyvsp[0].decl.type) {
	       SwigType_push(yyval.decl.type,yyvsp[0].decl.type);
	       Delete(yyvsp[0].decl.type);
	     }
           }
    break;

  case 237:
#line 3652 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
	     SwigType *t = NewString("");

	     yyval.decl = yyvsp[0].decl;
	     SwigType_add_memberpointer(t,yyvsp[-2].str);
	     if (yyval.decl.type) {
	       SwigType_push(t,yyval.decl.type);
	       Delete(yyval.decl.type);
	     }
	     yyval.decl.type = t;
	     }
    break;

  case 238:
#line 3663 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
	     SwigType *t = NewString("");
	     yyval.decl = yyvsp[0].decl;
	     SwigType_add_memberpointer(t,yyvsp[-2].str);
	     SwigType_push(yyvsp[-3].type,t);
	     if (yyval.decl.type) {
	       SwigType_push(yyvsp[-3].type,yyval.decl.type);
	       Delete(yyval.decl.type);
	     }
	     yyval.decl.type = yyvsp[-3].type;
	     Delete(t);
	   }
    break;

  case 239:
#line 3675 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
	     yyval.decl = yyvsp[0].decl;
	     SwigType_add_memberpointer(yyvsp[-4].type,yyvsp[-3].str);
	     SwigType_add_reference(yyvsp[-4].type);
	     if (yyval.decl.type) {
	       SwigType_push(yyvsp[-4].type,yyval.decl.type);
	       Delete(yyval.decl.type);
	     }
	     yyval.decl.type = yyvsp[-4].type;
	   }
    break;

  case 240:
#line 3685 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
	     SwigType *t = NewString("");
	     yyval.decl = yyvsp[0].decl;
	     SwigType_add_memberpointer(t,yyvsp[-3].str);
	     SwigType_add_reference(t);
	     if (yyval.decl.type) {
	       SwigType_push(t,yyval.decl.type);
	       Delete(yyval.decl.type);
	     } 
	     yyval.decl.type = t;
	   }
    break;

  case 241:
#line 3698 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                /* Note: This is non-standard C.  Template declarator is allowed to follow an identifier */
                 yyval.decl.id = Char(yyvsp[0].str);
		 yyval.decl.type = 0;
		 yyval.decl.parms = 0;
		 yyval.decl.have_parms = 0;
                  }
    break;

  case 242:
#line 3705 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                  yyval.decl.id = Char(NewStringf("~%s",yyvsp[0].str));
                  yyval.decl.type = 0;
                  yyval.decl.parms = 0;
                  yyval.decl.have_parms = 0;
                  }
    break;

  case 243:
#line 3713 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                  yyval.decl.id = Char(yyvsp[-1].str);
                  yyval.decl.type = 0;
                  yyval.decl.parms = 0;
                  yyval.decl.have_parms = 0;
                  }
    break;

  case 244:
#line 3729 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		    yyval.decl = yyvsp[-1].decl;
		    if (yyval.decl.type) {
		      SwigType_push(yyvsp[-2].type,yyval.decl.type);
		      Delete(yyval.decl.type);
		    }
		    yyval.decl.type = yyvsp[-2].type;
                  }
    break;

  case 245:
#line 3737 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		    SwigType *t;
		    yyval.decl = yyvsp[-1].decl;
		    t = NewString("");
		    SwigType_add_memberpointer(t,yyvsp[-3].str);
		    if (yyval.decl.type) {
		      SwigType_push(t,yyval.decl.type);
		      Delete(yyval.decl.type);
		    }
		    yyval.decl.type = t;
		    }
    break;

  case 246:
#line 3748 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
		    SwigType *t;
		    yyval.decl = yyvsp[-2].decl;
		    t = NewString("");
		    SwigType_add_array(t,(char*)"");
		    if (yyval.decl.type) {
		      SwigType_push(t,yyval.decl.type);
		      Delete(yyval.decl.type);
		    }
		    yyval.decl.type = t;
                  }
    break;

  case 247:
#line 3759 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
		    SwigType *t;
		    yyval.decl = yyvsp[-3].decl;
		    t = NewString("");
		    SwigType_add_array(t,yyvsp[-1].dtype.val);
		    if (yyval.decl.type) {
		      SwigType_push(t,yyval.decl.type);
		      Delete(yyval.decl.type);
		    }
		    yyval.decl.type = t;
                  }
    break;

  case 248:
#line 3770 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		    SwigType *t;
                    yyval.decl = yyvsp[-3].decl;
		    t = NewString("");
		    SwigType_add_function(t,yyvsp[-1].pl);
		    if (!yyval.decl.have_parms) {
		      yyval.decl.parms = yyvsp[-1].pl;
		      yyval.decl.have_parms = 1;
		    }
		    if (!yyval.decl.type) {
		      yyval.decl.type = t;
		    } else {
		      SwigType_push(t, yyval.decl.type);
		      Delete(yyval.decl.type);
		      yyval.decl.type = t;
		    }
		  }
    break;

  case 249:
#line 3789 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                /* Note: This is non-standard C.  Template declarator is allowed to follow an identifier */
                 yyval.decl.id = Char(yyvsp[0].str);
		 yyval.decl.type = 0;
		 yyval.decl.parms = 0;
		 yyval.decl.have_parms = 0;
                  }
    break;

  case 250:
#line 3797 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                  yyval.decl.id = Char(NewStringf("~%s",yyvsp[0].str));
                  yyval.decl.type = 0;
                  yyval.decl.parms = 0;
                  yyval.decl.have_parms = 0;
                  }
    break;

  case 251:
#line 3814 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		    yyval.decl = yyvsp[-1].decl;
		    if (yyval.decl.type) {
		      SwigType_push(yyvsp[-2].type,yyval.decl.type);
		      Delete(yyval.decl.type);
		    }
		    yyval.decl.type = yyvsp[-2].type;
                  }
    break;

  case 252:
#line 3822 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                    yyval.decl = yyvsp[-1].decl;
		    if (!yyval.decl.type) {
		      yyval.decl.type = NewString("");
		    }
		    SwigType_add_reference(yyval.decl.type);
                  }
    break;

  case 253:
#line 3829 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		    SwigType *t;
		    yyval.decl = yyvsp[-1].decl;
		    t = NewString("");
		    SwigType_add_memberpointer(t,yyvsp[-3].str);
		    if (yyval.decl.type) {
		      SwigType_push(t,yyval.decl.type);
		      Delete(yyval.decl.type);
		    }
		    yyval.decl.type = t;
		    }
    break;

  case 254:
#line 3840 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
		    SwigType *t;
		    yyval.decl = yyvsp[-2].decl;
		    t = NewString("");
		    SwigType_add_array(t,(char*)"");
		    if (yyval.decl.type) {
		      SwigType_push(t,yyval.decl.type);
		      Delete(yyval.decl.type);
		    }
		    yyval.decl.type = t;
                  }
    break;

  case 255:
#line 3851 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
		    SwigType *t;
		    yyval.decl = yyvsp[-3].decl;
		    t = NewString("");
		    SwigType_add_array(t,yyvsp[-1].dtype.val);
		    if (yyval.decl.type) {
		      SwigType_push(t,yyval.decl.type);
		      Delete(yyval.decl.type);
		    }
		    yyval.decl.type = t;
                  }
    break;

  case 256:
#line 3862 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		    SwigType *t;
                    yyval.decl = yyvsp[-3].decl;
		    t = NewString("");
		    SwigType_add_function(t,yyvsp[-1].pl);
		    if (!yyval.decl.have_parms) {
		      yyval.decl.parms = yyvsp[-1].pl;
		      yyval.decl.have_parms = 1;
		    }
		    if (!yyval.decl.type) {
		      yyval.decl.type = t;
		    } else {
		      SwigType_push(t, yyval.decl.type);
		      Delete(yyval.decl.type);
		      yyval.decl.type = t;
		    }
		  }
    break;

  case 257:
#line 3881 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		    yyval.decl.type = yyvsp[0].type;
                    yyval.decl.id = 0;
		    yyval.decl.parms = 0;
		    yyval.decl.have_parms = 0;
                  }
    break;

  case 258:
#line 3887 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                     yyval.decl = yyvsp[0].decl;
                     SwigType_push(yyvsp[-1].type,yyvsp[0].decl.type);
		     yyval.decl.type = yyvsp[-1].type;
		     Delete(yyvsp[0].decl.type);
                  }
    break;

  case 259:
#line 3893 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		    yyval.decl.type = yyvsp[-1].type;
		    SwigType_add_reference(yyval.decl.type);
		    yyval.decl.id = 0;
		    yyval.decl.parms = 0;
		    yyval.decl.have_parms = 0;
		  }
    break;

  case 260:
#line 3900 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		    yyval.decl = yyvsp[0].decl;
		    SwigType_add_reference(yyvsp[-2].type);
		    if (yyval.decl.type) {
		      SwigType_push(yyvsp[-2].type,yyval.decl.type);
		      Delete(yyval.decl.type);
		    }
		    yyval.decl.type = yyvsp[-2].type;
                  }
    break;

  case 261:
#line 3909 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		    yyval.decl = yyvsp[0].decl;
                  }
    break;

  case 262:
#line 3912 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		    yyval.decl = yyvsp[0].decl;
		    yyval.decl.type = NewString("");
		    SwigType_add_reference(yyval.decl.type);
		    if (yyvsp[0].decl.type) {
		      SwigType_push(yyval.decl.type,yyvsp[0].decl.type);
		      Delete(yyvsp[0].decl.type);
		    }
                  }
    break;

  case 263:
#line 3921 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                    yyval.decl.id = 0;
                    yyval.decl.parms = 0;
		    yyval.decl.have_parms = 0;
                    yyval.decl.type = NewString("");
		    SwigType_add_reference(yyval.decl.type);
                  }
    break;

  case 264:
#line 3928 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
		    yyval.decl.type = NewString("");
                    SwigType_add_memberpointer(yyval.decl.type,yyvsp[-1].str);
                    yyval.decl.id = 0;
                    yyval.decl.parms = 0;
		    yyval.decl.have_parms = 0;
      	          }
    break;

  case 265:
#line 3935 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
		    SwigType *t = NewString("");
                    yyval.decl.type = yyvsp[-2].type;
		    yyval.decl.id = 0;
		    yyval.decl.parms = 0;
		    yyval.decl.have_parms = 0;
		    SwigType_add_memberpointer(t,yyvsp[-1].str);
		    SwigType_push(yyval.decl.type,t);
		    Delete(t);
                  }
    break;

  case 266:
#line 3945 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
		    yyval.decl = yyvsp[0].decl;
		    SwigType_add_memberpointer(yyvsp[-3].type,yyvsp[-2].str);
		    if (yyval.decl.type) {
		      SwigType_push(yyvsp[-3].type,yyval.decl.type);
		      Delete(yyval.decl.type);
		    }
		    yyval.decl.type = yyvsp[-3].type;
                  }
    break;

  case 267:
#line 3956 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
		    SwigType *t;
		    yyval.decl = yyvsp[-2].decl;
		    t = NewString("");
		    SwigType_add_array(t,(char*)"");
		    if (yyval.decl.type) {
		      SwigType_push(t,yyval.decl.type);
		      Delete(yyval.decl.type);
		    }
		    yyval.decl.type = t;
                  }
    break;

  case 268:
#line 3967 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
		    SwigType *t;
		    yyval.decl = yyvsp[-3].decl;
		    t = NewString("");
		    SwigType_add_array(t,yyvsp[-1].dtype.val);
		    if (yyval.decl.type) {
		      SwigType_push(t,yyval.decl.type);
		      Delete(yyval.decl.type);
		    }
		    yyval.decl.type = t;
                  }
    break;

  case 269:
#line 3978 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
		    yyval.decl.type = NewString("");
		    yyval.decl.id = 0;
		    yyval.decl.parms = 0;
		    yyval.decl.have_parms = 0;
		    SwigType_add_array(yyval.decl.type,(char*)"");
                  }
    break;

  case 270:
#line 3985 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
		    yyval.decl.type = NewString("");
		    yyval.decl.id = 0;
		    yyval.decl.parms = 0;
		    yyval.decl.have_parms = 0;
		    SwigType_add_array(yyval.decl.type,yyvsp[-1].dtype.val);
		  }
    break;

  case 271:
#line 3992 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                    yyval.decl = yyvsp[-1].decl;
		  }
    break;

  case 272:
#line 3995 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		    SwigType *t;
                    yyval.decl = yyvsp[-3].decl;
		    t = NewString("");
                    SwigType_add_function(t,yyvsp[-1].pl);
		    if (!yyval.decl.type) {
		      yyval.decl.type = t;
		    } else {
		      SwigType_push(t,yyval.decl.type);
		      Delete(yyval.decl.type);
		      yyval.decl.type = t;
		    }
		    if (!yyval.decl.have_parms) {
		      yyval.decl.parms = yyvsp[-1].pl;
		      yyval.decl.have_parms = 1;
		    }
		  }
    break;

  case 273:
#line 4012 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                    yyval.decl.type = NewString("");
                    SwigType_add_function(yyval.decl.type,yyvsp[-1].pl);
		    yyval.decl.parms = yyvsp[-1].pl;
		    yyval.decl.have_parms = 1;
		    yyval.decl.id = 0;
                  }
    break;

  case 274:
#line 4022 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
               yyval.type = NewString("");
               SwigType_add_pointer(yyval.type);
	       SwigType_push(yyval.type,yyvsp[-1].str);
	       SwigType_push(yyval.type,yyvsp[0].type);
	       Delete(yyvsp[0].type);
           }
    break;

  case 275:
#line 4029 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
	     yyval.type = NewString("");
	     SwigType_add_pointer(yyval.type);
	     SwigType_push(yyval.type,yyvsp[0].type);
	     Delete(yyvsp[0].type);
	     }
    break;

  case 276:
#line 4035 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
	     	yyval.type = NewString("");	
		SwigType_add_pointer(yyval.type);
	        SwigType_push(yyval.type,yyvsp[0].str);
           }
    break;

  case 277:
#line 4040 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
	      yyval.type = NewString("");
	      SwigType_add_pointer(yyval.type);
           }
    break;

  case 278:
#line 4046 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                  yyval.str = NewString("");
	          SwigType_add_qualifier(yyval.str,yyvsp[0].id);
               }
    break;

  case 279:
#line 4050 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                  yyval.str = yyvsp[0].str; 
                  SwigType_add_qualifier(yyval.str,yyvsp[-1].id);
               }
    break;

  case 280:
#line 4056 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.id = "const"; }
    break;

  case 281:
#line 4057 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.id = "volatile"; }
    break;

  case 282:
#line 4063 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                   yyval.type = yyvsp[0].type;
                   Replace(yyval.type,"typename ","", DOH_REPLACE_ANY);
                }
    break;

  case 283:
#line 4069 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                   yyval.type = yyvsp[0].type;
	           SwigType_push(yyval.type,yyvsp[-1].str);
               }
    break;

  case 284:
#line 4073 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.type = yyvsp[0].type; }
    break;

  case 285:
#line 4076 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.type = yyvsp[0].type;
                  /* Printf(stdout,"primitive = '%s'\n", $$);*/
                }
    break;

  case 286:
#line 4079 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.type = yyvsp[0].type; }
    break;

  case 287:
#line 4080 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.type = yyvsp[0].type; }
    break;

  case 288:
#line 4081 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.type = NewStringf("%s%s",yyvsp[-1].type,yyvsp[0].id); }
    break;

  case 289:
#line 4082 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.type = NewStringf("enum %s", yyvsp[0].str); }
    break;

  case 290:
#line 4083 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.type = yyvsp[0].type; }
    break;

  case 291:
#line 4084 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		  yyval.type = yyvsp[-1].type;
	          SwigType_push(yyval.type,yyvsp[0].str);
     	       }
    break;

  case 292:
#line 4089 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		  yyval.type = yyvsp[0].str;
               }
    break;

  case 293:
#line 4092 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
		 yyval.type = NewStringf("%s %s", yyvsp[-1].id, yyvsp[0].str);
               }
    break;

  case 294:
#line 4097 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 if (!yyvsp[0].ptype.type) yyvsp[0].ptype.type = NewString("int");
		 if (yyvsp[0].ptype.us) {
		   yyval.type = NewStringf("%s %s", yyvsp[0].ptype.us, yyvsp[0].ptype.type);
		   Delete(yyvsp[0].ptype.us);
                   Delete(yyvsp[0].ptype.type);
		 } else {
                   yyval.type = yyvsp[0].ptype.type;
		 }
		 if (Cmp(yyval.type,"signed int") == 0) {
		   Delete(yyval.type);
		   yyval.type = NewString("int");
                 } else if (Cmp(yyval.type,"signed long") == 0) {
		   Delete(yyval.type);
                   yyval.type = NewString("long");
                 } else if (Cmp(yyval.type,"signed short") == 0) {
		   Delete(yyval.type);
		   yyval.type = NewString("short");
		 } else if (Cmp(yyval.type,"signed long long") == 0) {
		   Delete(yyval.type);
		   yyval.type = NewString("long long");
		 }
               }
    break;

  case 295:
#line 4122 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                 yyval.ptype = yyvsp[0].ptype;
               }
    break;

  case 296:
#line 4125 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                    if (yyvsp[-1].ptype.us && yyvsp[0].ptype.us) {
		      Swig_error(cparse_file, cparse_line, "Extra %s specifier.\n", yyvsp[0].ptype.us);
		    }
                    yyval.ptype = yyvsp[0].ptype;
                    if (yyvsp[-1].ptype.us) yyval.ptype.us = yyvsp[-1].ptype.us;
		    if (yyvsp[-1].ptype.type) {
		      if (!yyvsp[0].ptype.type) yyval.ptype.type = yyvsp[-1].ptype.type;
		      else {
			int err = 0;
			if ((Cmp(yyvsp[-1].ptype.type,"long") == 0)) {
			  if ((Cmp(yyvsp[0].ptype.type,"long") == 0) || (Cmp(yyvsp[0].ptype.type,"double") == 0)) {
			    yyval.ptype.type = NewStringf("long %s", yyvsp[0].ptype.type);
			  } else if (Cmp(yyvsp[0].ptype.type,"int") == 0) {
			    yyval.ptype.type = yyvsp[-1].ptype.type;
			  } else {
			    err = 1;
			  }
			} else if ((Cmp(yyvsp[-1].ptype.type,"short")) == 0) {
			  if (Cmp(yyvsp[0].ptype.type,"int") == 0) {
			    yyval.ptype.type = yyvsp[-1].ptype.type;
			  } else {
			    err = 1;
			  }
			} else if (Cmp(yyvsp[-1].ptype.type,"int") == 0) {
			  yyval.ptype.type = yyvsp[0].ptype.type;
			} else if (Cmp(yyvsp[-1].ptype.type,"double") == 0) {
			  if (Cmp(yyvsp[0].ptype.type,"long") == 0) {
			    yyval.ptype.type = NewString("long double");
			  } else {
			    err = 1;
			  }
			}
			if (err) {
			  Swig_error(cparse_file, cparse_line, "Extra %s specifier.\n", yyvsp[-1].ptype.type);
			}
		      }
		    }
               }
    break;

  case 297:
#line 4167 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
		    yyval.ptype.type = NewString("int");
                    yyval.ptype.us = 0;
               }
    break;

  case 298:
#line 4171 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                    yyval.ptype.type = NewString("short");
                    yyval.ptype.us = 0;
                }
    break;

  case 299:
#line 4175 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                    yyval.ptype.type = NewString("long");
                    yyval.ptype.us = 0;
                }
    break;

  case 300:
#line 4179 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                    yyval.ptype.type = NewString("char");
                    yyval.ptype.us = 0;
                }
    break;

  case 301:
#line 4183 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                    yyval.ptype.type = NewString("float");
                    yyval.ptype.us = 0;
                }
    break;

  case 302:
#line 4187 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                    yyval.ptype.type = NewString("double");
                    yyval.ptype.us = 0;
                }
    break;

  case 303:
#line 4191 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                    yyval.ptype.us = NewString("signed");
                    yyval.ptype.type = 0;
                }
    break;

  case 304:
#line 4195 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                    yyval.ptype.us = NewString("unsigned");
                    yyval.ptype.type = 0;
                }
    break;

  case 305:
#line 4201 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { /* scanner_check_typedef(); */ }
    break;

  case 306:
#line 4201 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                   yyval.dtype = yyvsp[0].dtype;
		   if (yyval.dtype.type == T_STRING) {
		     yyval.dtype.rawval = NewStringf("\"%(escape)s\"",yyval.dtype.val);
		   } else {
		     yyval.dtype.rawval = 0;
		   }
		   yyval.dtype.bitfield = 0;
		   yyval.dtype.throws = 0;
		   scanner_ignore_typedef();
                }
    break;

  case 307:
#line 4220 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                   yyval.dtype.val = NewString(yyvsp[0].str);
		   /*		   $$.rawval = NewStringf("\'%(escape)s\'",$$.val); */
		   /*		   Printf(stdout,"rawval = '%s'\n", $$.rawval); */
		   if (Len(yyval.dtype.val)) {
		     yyval.dtype.rawval = NewStringf("\'%(escape)s\'", yyval.dtype.val);
		   } else {
		     yyval.dtype.rawval = NewString("\'\\0'");
		   }
		   yyval.dtype.type = T_CHAR;
		   yyval.dtype.bitfield = 0;
		   yyval.dtype.throws = 0;
		 }
    break;

  case 308:
#line 4237 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.id = yyvsp[0].id; }
    break;

  case 309:
#line 4238 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.id = (char *) 0;}
    break;

  case 310:
#line 4243 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                   Node *leftSibling = Getattr(yyvsp[-2].node,"_last");
		   if (!leftSibling) {
                     leftSibling=yyvsp[-2].node;
		   }
                   set_nextSibling(leftSibling,yyvsp[0].node);
                   Setattr(yyvsp[-2].node,"_last",yyvsp[0].node);
                   if (yyvsp[0].node && !Getattr(yyvsp[0].node, "enumvalue")) {
                     /* There is no explicit enum value given, so make one. */
                     Setattr(yyvsp[0].node,"enumvalue", NewStringf("%s+1", Getattr(leftSibling,"name")));
                   }
		   yyval.node = yyvsp[-2].node;
               }
    break;

  case 311:
#line 4256 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                   yyval.node = yyvsp[0].node; 
                   if (!Getattr(yyvsp[0].node, "enumvalue")) {
                     /* first enum item value defaults to 0 */
                     Setattr(yyvsp[0].node,"enumvalue", "0");
                   }
               }
    break;

  case 312:
#line 4265 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		   yyval.node = new_node("enumitem");
		   Setattr(yyval.node,"name",yyvsp[0].id);
		   Setattr(yyval.node,"type",NewSwigType(T_INT));
		   Setattr(yyval.node,"feature:immutable","1");
		 }
    break;

  case 313:
#line 4271 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		   yyval.node = new_node("enumitem");
		   Setattr(yyval.node,"name",yyvsp[-2].id);
		   Setattr(yyval.node,"enumvalue", yyvsp[0].dtype.val);
	           if (yyvsp[0].dtype.type == T_CHAR) {
		     Setattr(yyval.node,"value",yyvsp[0].dtype.val);
		     Setattr(yyval.node,"type",NewSwigType(T_CHAR));
		   } else {
		     Setattr(yyval.node,"value",yyvsp[-2].id);
		     Setattr(yyval.node,"type",NewSwigType(T_INT));
		   }
		   Setattr(yyval.node,"feature:immutable","1");
                 }
    break;

  case 314:
#line 4284 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = 0; }
    break;

  case 315:
#line 4287 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                   yyval.dtype = yyvsp[0].dtype;
		   if ((yyval.dtype.type != T_INT) && (yyval.dtype.type != T_UINT) &&
		       (yyval.dtype.type != T_LONG) && (yyval.dtype.type != T_ULONG) &&
		       (yyval.dtype.type != T_SHORT) && (yyval.dtype.type != T_USHORT) &&
		       (yyval.dtype.type != T_SCHAR) && (yyval.dtype.type != T_UCHAR)) {
		     Swig_error(cparse_file,cparse_line,"Type error. Expecting an int\n");
		   }
                }
    break;

  case 316:
#line 4296 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                   yyval.dtype.val  = NewString(yyvsp[0].str);
		   yyval.dtype.type = T_INT;
		 }
    break;

  case 317:
#line 4307 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.dtype = yyvsp[0].dtype; }
    break;

  case 318:
#line 4308 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
		    yyval.dtype.val = NewString(yyvsp[0].id); 
                    yyval.dtype.type = T_STRING; 
               }
    break;

  case 319:
#line 4312 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
  		  SwigType_push(yyvsp[-2].type,yyvsp[-1].decl.type);
		  yyval.dtype.val = NewStringf("sizeof(%s)",SwigType_str(yyvsp[-2].type,0));
		  yyval.dtype.type = T_INT;
               }
    break;

  case 320:
#line 4317 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.dtype = yyvsp[0].dtype; }
    break;

  case 321:
#line 4318 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 Node *n;
		 yyval.dtype.val = yyvsp[0].type;
		 yyval.dtype.type = T_INT;
		 /* Check if value is in scope */
		 n = Swig_symbol_clookup(yyvsp[0].type,0);
		 if (n) {
		   if (Getattr(n,"access") && (cplus_mode == CPLUS_PUBLIC)) {
		     Swig_warning(WARN_PARSE_PRIVATE,cparse_file, cparse_line, "'%s' is private in this context.\n", yyvsp[0].type);
		     yyval.dtype.type = T_ERROR;
		   } else {
		     /* A band-aid for enum values used in expressions. */
		     if (Strcmp(nodeType(n),"enumitem") == 0) {
		       String *q = Swig_symbol_qualified(n);
		       if (q) {
			 yyval.dtype.val = NewStringf("%s::%s", q, Getattr(n,"name"));
			 Delete(q);
		       }
		     }
		   }
		 }
               }
    break;

  case 322:
#line 4342 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
   	            yyval.dtype.val = NewStringf("(%s)",yyvsp[-1].dtype.val);
		    yyval.dtype.type = yyvsp[-1].dtype.type;
   	       }
    break;

  case 323:
#line 4349 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 yyval.dtype = yyvsp[0].dtype;
		 if (yyvsp[0].dtype.type != T_STRING) {
		   yyval.dtype.val = NewStringf("(%s) %s", SwigType_str(yyvsp[-2].dtype.val,0), yyvsp[0].dtype.val);
		 }
 	       }
    break;

  case 324:
#line 4355 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 yyval.dtype = yyvsp[0].dtype;
		 if (yyvsp[0].dtype.type != T_STRING) {
		   SwigType_push(yyvsp[-3].dtype.val,yyvsp[-2].type);
		   yyval.dtype.val = NewStringf("(%s) %s", SwigType_str(yyvsp[-3].dtype.val,0), yyvsp[0].dtype.val);
		 }
 	       }
    break;

  case 325:
#line 4362 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 yyval.dtype = yyvsp[0].dtype;
		 if (yyvsp[0].dtype.type != T_STRING) {
		   SwigType_add_reference(yyvsp[-3].dtype.val);
		   yyval.dtype.val = NewStringf("(%s) %s", SwigType_str(yyvsp[-3].dtype.val,0), yyvsp[0].dtype.val);
		 }
 	       }
    break;

  case 326:
#line 4369 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 yyval.dtype = yyvsp[0].dtype;
		 if (yyvsp[0].dtype.type != T_STRING) {
		   SwigType_push(yyvsp[-4].dtype.val,yyvsp[-3].type);
		   SwigType_add_reference(yyvsp[-4].dtype.val);
		   yyval.dtype.val = NewStringf("(%s) %s", SwigType_str(yyvsp[-4].dtype.val,0), yyvsp[0].dtype.val);
		 }
 	       }
    break;

  case 327:
#line 4379 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.dtype = yyvsp[0].dtype; }
    break;

  case 328:
#line 4380 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.dtype = yyvsp[0].dtype; }
    break;

  case 329:
#line 4381 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.dtype = yyvsp[0].dtype; }
    break;

  case 330:
#line 4382 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.dtype = yyvsp[0].dtype; }
    break;

  case 331:
#line 4383 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.dtype = yyvsp[0].dtype; }
    break;

  case 332:
#line 4384 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.dtype = yyvsp[0].dtype; }
    break;

  case 333:
#line 4385 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.dtype = yyvsp[0].dtype; }
    break;

  case 334:
#line 4388 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.dtype.val = NewStringf("%s+%s",yyvsp[-2].dtype.val,yyvsp[0].dtype.val);
		 yyval.dtype.type = promote(yyvsp[-2].dtype.type,yyvsp[0].dtype.type);
	       }
    break;

  case 335:
#line 4392 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.dtype.val = NewStringf("%s-%s",yyvsp[-2].dtype.val,yyvsp[0].dtype.val);
		 yyval.dtype.type = promote(yyvsp[-2].dtype.type,yyvsp[0].dtype.type);
	       }
    break;

  case 336:
#line 4396 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.dtype.val = NewStringf("%s*%s",yyvsp[-2].dtype.val,yyvsp[0].dtype.val);
		 yyval.dtype.type = promote(yyvsp[-2].dtype.type,yyvsp[0].dtype.type);
	       }
    break;

  case 337:
#line 4400 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.dtype.val = NewStringf("%s/%s",yyvsp[-2].dtype.val,yyvsp[0].dtype.val);
		 yyval.dtype.type = promote(yyvsp[-2].dtype.type,yyvsp[0].dtype.type);
	       }
    break;

  case 338:
#line 4404 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.dtype.val = NewStringf("%s&%s",yyvsp[-2].dtype.val,yyvsp[0].dtype.val);
		 yyval.dtype.type = promote(yyvsp[-2].dtype.type,yyvsp[0].dtype.type);
	       }
    break;

  case 339:
#line 4408 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.dtype.val = NewStringf("%s|%s",yyvsp[-2].dtype.val,yyvsp[0].dtype.val);
		 yyval.dtype.type = promote(yyvsp[-2].dtype.type,yyvsp[0].dtype.type);
	       }
    break;

  case 340:
#line 4412 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.dtype.val = NewStringf("%s^%s",yyvsp[-2].dtype.val,yyvsp[0].dtype.val);
		 yyval.dtype.type = promote(yyvsp[-2].dtype.type,yyvsp[0].dtype.type);
	       }
    break;

  case 341:
#line 4416 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.dtype.val = NewStringf("%s<<%s",yyvsp[-2].dtype.val,yyvsp[0].dtype.val);
		 yyval.dtype.type = promote(yyvsp[-2].dtype.type,yyvsp[0].dtype.type);
	       }
    break;

  case 342:
#line 4420 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.dtype.val = NewStringf("%s>>%s",yyvsp[-2].dtype.val,yyvsp[0].dtype.val);
		 yyval.dtype.type = promote(yyvsp[-2].dtype.type,yyvsp[0].dtype.type);
	       }
    break;

  case 343:
#line 4424 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.dtype.val = NewStringf("%s&&%s",yyvsp[-2].dtype.val,yyvsp[0].dtype.val);
		 yyval.dtype.type = T_INT;
	       }
    break;

  case 344:
#line 4428 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.dtype.val = NewStringf("%s||%s",yyvsp[-2].dtype.val,yyvsp[0].dtype.val);
		 yyval.dtype.type = T_INT;
	       }
    break;

  case 345:
#line 4432 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.dtype.val = NewStringf("-%s",yyvsp[0].dtype.val);
		 yyval.dtype.type = yyvsp[0].dtype.type;
	       }
    break;

  case 346:
#line 4436 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 yyval.dtype.val = NewStringf("+%s",yyvsp[0].dtype.val);
		 yyval.dtype.type = yyvsp[0].dtype.type;
  	       }
    break;

  case 347:
#line 4440 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.dtype.val = NewStringf("~%s",yyvsp[0].dtype.val);
		 yyval.dtype.type = yyvsp[0].dtype.type;
	       }
    break;

  case 348:
#line 4444 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 yyval.dtype.val = NewStringf("!%s",yyvsp[0].dtype.val);
		 yyval.dtype.type = T_INT;
	       }
    break;

  case 349:
#line 4448 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 skip_balanced('(',')');
		 if (SwigType_istemplate(yyvsp[-1].type)) {
		   yyvsp[-1].type = SwigType_namestr(yyvsp[-1].type);
		 }
		 yyval.dtype.val = NewStringf("%s%s",yyvsp[-1].type,scanner_ccode);
		 Clear(scanner_ccode);
		 yyval.dtype.type = T_INT;
               }
    break;

  case 350:
#line 4459 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.bases = yyvsp[0].bases;
               }
    break;

  case 351:
#line 4464 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { inherit_list = 1; }
    break;

  case 352:
#line 4464 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.bases = yyvsp[0].bases; inherit_list = 0; }
    break;

  case 353:
#line 4465 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.bases = 0; }
    break;

  case 354:
#line 4468 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
	           yyval.bases = NewList();
	           if (yyvsp[0].node) Append(yyval.bases,yyvsp[0].node);
               }
    break;

  case 355:
#line 4473 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                   yyval.bases = yyvsp[-2].bases;
                   if (yyvsp[0].node) Append(yyval.bases,yyvsp[0].node);
               }
    break;

  case 356:
#line 4479 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 if (last_cpptype && (Strcmp(last_cpptype,"struct") != 0)) {
                     Swig_warning(WARN_PARSE_NO_ACCESS,cparse_file, cparse_line,"No access specifier given for base class %s (ignored).\n",yyvsp[0].str);
   		     yyval.node = (char *) 0;
                 } else {
		   yyval.node = yyvsp[0].str;
		   Setfile(yyval.node,cparse_file);
		   Setline(yyval.node,cparse_line);
		 }
               }
    break;

  case 357:
#line 4489 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.node = 0;
	         if (strcmp(yyvsp[-2].id,"public") == 0) {
		   yyval.node = yyvsp[0].str;
		   Setfile(yyval.node, cparse_file);
		   Setline(yyval.node, cparse_line);
		 } else {
		   Swig_warning(WARN_PARSE_PRIVATE_INHERIT, cparse_file, cparse_line, "%s inheritance ignored.\n", yyvsp[-2].id);
		 }
               }
    break;

  case 358:
#line 4501 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.id = (char*)"public"; }
    break;

  case 359:
#line 4502 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.id = (char*)"private"; }
    break;

  case 360:
#line 4503 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.id = (char*)"protected"; }
    break;

  case 361:
#line 4507 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                   yyval.id = (char*)"class"; 
		   if (!inherit_list) last_cpptype = yyval.id;
               }
    break;

  case 362:
#line 4511 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                   yyval.id = (char*)"struct"; 
		   if (!inherit_list) last_cpptype = yyval.id;
               }
    break;

  case 363:
#line 4515 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                   yyval.id = (char*)"union"; 
		   if (!inherit_list) last_cpptype = yyval.id;
               }
    break;

  case 364:
#line 4519 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                   yyval.id = (char *)"typename"; 
		   if (!inherit_list) last_cpptype = yyval.id;
               }
    break;

  case 367:
#line 4529 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                    yyval.dtype.qualifier = yyvsp[0].str;
                    yyval.dtype.throws = 0;
               }
    break;

  case 368:
#line 4533 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                    yyval.dtype.qualifier = 0;
                    yyval.dtype.throws = yyvsp[-1].pl;
               }
    break;

  case 369:
#line 4537 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                    yyval.dtype.qualifier = yyvsp[-4].str;
                    yyval.dtype.throws = yyvsp[-1].pl;
               }
    break;

  case 370:
#line 4541 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                    yyval.dtype.qualifier = 0; 
                    yyval.dtype.throws = 0;
               }
    break;

  case 371:
#line 4547 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                    Clear(scanner_ccode); 
                    yyval.decl.have_parms = 0; 
                    yyval.decl.defarg = 0; 
		    yyval.decl.throws = yyvsp[-2].dtype.throws;
               }
    break;

  case 372:
#line 4553 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                    skip_balanced('{','}'); 
                    yyval.decl.have_parms = 0; 
                    yyval.decl.defarg = 0; 
                    yyval.decl.throws = yyvsp[-2].dtype.throws;
               }
    break;

  case 373:
#line 4559 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                    Clear(scanner_ccode); 
                    yyval.decl.parms = yyvsp[-2].pl; 
                    yyval.decl.have_parms = 1; 
                    yyval.decl.defarg = 0; 
		    yyval.decl.throws = 0;
               }
    break;

  case 374:
#line 4566 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                    skip_balanced('{','}'); 
                    yyval.decl.parms = yyvsp[-2].pl; 
                    yyval.decl.have_parms = 1; 
                    yyval.decl.defarg = 0; 
                    yyval.decl.throws = 0;
               }
    break;

  case 375:
#line 4573 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                    yyval.decl.have_parms = 0; 
                    yyval.decl.defarg = yyvsp[-1].dtype.val; 
                    yyval.decl.throws = 0;
               }
    break;

  case 380:
#line 4588 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
	            skip_balanced('(',')');
                    Clear(scanner_ccode);
            	}
    break;

  case 381:
#line 4594 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                     String *s = NewString("");
                     SwigType_add_template(s,yyvsp[-1].p);
                     yyval.id = Char(s);
		     scanner_last_id(1);
                 }
    break;

  case 382:
#line 4600 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.id = (char*)"";  }
    break;

  case 383:
#line 4603 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.id = yyvsp[0].id; }
    break;

  case 384:
#line 4604 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.id = yyvsp[0].id; }
    break;

  case 385:
#line 4607 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.id = yyvsp[0].id; }
    break;

  case 386:
#line 4608 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.id = 0; }
    break;

  case 387:
#line 4611 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                  yyval.str = 0;
		  if (!yyval.str) yyval.str = NewStringf("%s%s", yyvsp[-1].str,yyvsp[0].str);
      	          Delete(yyvsp[0].str);
               }
    break;

  case 388:
#line 4616 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
		 yyval.str = NewStringf("::%s%s",yyvsp[-1].str,yyvsp[0].str);
                 Delete(yyvsp[0].str);
               }
    break;

  case 389:
#line 4620 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.str = NewString(yyvsp[0].str);
   	       }
    break;

  case 390:
#line 4623 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.str = NewStringf("::%s",yyvsp[0].str);
               }
    break;

  case 391:
#line 4626 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 yyval.str = NewString(yyvsp[0].str);
	       }
    break;

  case 392:
#line 4629 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 yyval.str = NewStringf("::%s",yyvsp[0].str);
               }
    break;

  case 393:
#line 4634 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                   yyval.str = NewStringf("::%s%s",yyvsp[-1].str,yyvsp[0].str);
		   Delete(yyvsp[0].str);
               }
    break;

  case 394:
#line 4638 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                   yyval.str = NewStringf("::%s",yyvsp[0].str);
               }
    break;

  case 395:
#line 4641 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                   yyval.str = NewStringf("::%s",yyvsp[0].str);
               }
    break;

  case 396:
#line 4648 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.str = NewStringf("::~%s",yyvsp[0].str);
               }
    break;

  case 397:
#line 4654 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                  yyval.str = NewStringf("%s%s",yyvsp[-1].id,yyvsp[0].id);
		  /*		  if (Len($2)) {
		    scanner_last_id(1);
		    } */
              }
    break;

  case 398:
#line 4663 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                  yyval.str = 0;
		  if (!yyval.str) yyval.str = NewStringf("%s%s", yyvsp[-1].id,yyvsp[0].str);
      	          Delete(yyvsp[0].str);
               }
    break;

  case 399:
#line 4668 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
		 yyval.str = NewStringf("::%s%s",yyvsp[-1].id,yyvsp[0].str);
                 Delete(yyvsp[0].str);
               }
    break;

  case 400:
#line 4672 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.str = NewString(yyvsp[0].id);
   	       }
    break;

  case 401:
#line 4675 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.str = NewStringf("::%s",yyvsp[0].id);
               }
    break;

  case 402:
#line 4678 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 yyval.str = NewString(yyvsp[0].str);
	       }
    break;

  case 403:
#line 4681 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 yyval.str = NewStringf("::%s",yyvsp[0].str);
               }
    break;

  case 404:
#line 4686 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                   yyval.str = NewStringf("::%s%s",yyvsp[-1].id,yyvsp[0].str);
		   Delete(yyvsp[0].str);
               }
    break;

  case 405:
#line 4690 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                   yyval.str = NewStringf("::%s",yyvsp[0].id);
               }
    break;

  case 406:
#line 4693 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                   yyval.str = NewStringf("::%s",yyvsp[0].str);
               }
    break;

  case 407:
#line 4696 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.str = NewStringf("::~%s",yyvsp[0].id);
               }
    break;

  case 408:
#line 4702 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { 
                   yyval.id = (char *) malloc(strlen(yyvsp[-1].id)+strlen(yyvsp[0].id)+1);
                   strcpy(yyval.id,yyvsp[-1].id);
                   strcat(yyval.id,yyvsp[0].id);
               }
    break;

  case 409:
#line 4707 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.id = yyvsp[0].id;}
    break;

  case 410:
#line 4710 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.str = NewString(yyvsp[0].id);
               }
    break;

  case 411:
#line 4713 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                  skip_balanced('{','}');
		  yyval.str = NewString(scanner_ccode);
               }
    break;

  case 412:
#line 4717 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.str = yyvsp[0].str;
              }
    break;

  case 413:
#line 4722 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                  Hash *n;
                  yyval.node = NewHash();
                  n = yyvsp[-1].node;
                  while(n) {
                     String *name, *value;
                     name = Getattr(n,"name");
                     value = Getattr(n,"value");
		     if (!value) value = (String *) "1";
                     Setattr(yyval.node,name, value);
		     n = nextSibling(n);
		  }
               }
    break;

  case 414:
#line 4735 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    { yyval.node = 0; }
    break;

  case 415:
#line 4739 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.node = NewHash();
		 Setattr(yyval.node,"name",yyvsp[-2].id);
		 Setattr(yyval.node,"value",yyvsp[0].id);
               }
    break;

  case 416:
#line 4744 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.node = NewHash();
		 Setattr(yyval.node,"name",yyvsp[-4].id);
		 Setattr(yyval.node,"value",yyvsp[-2].id);
		 set_nextSibling(yyval.node,yyvsp[0].node);
               }
    break;

  case 417:
#line 4750 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 yyval.node = NewHash();
                 Setattr(yyval.node,"name",yyvsp[0].id);
	       }
    break;

  case 418:
#line 4754 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 yyval.node = NewHash();
                 Setattr(yyval.node,"name",yyvsp[-2].id);
                 set_nextSibling(yyval.node,yyvsp[0].node);
               }
    break;

  case 419:
#line 4761 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
		 yyval.id = yyvsp[0].id;
               }
    break;

  case 420:
#line 4764 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"
    {
                 yyval.id = yyvsp[0].dtype.val;
               }
    break;


    }

/* Line 999 of yacc.c.  */
#line 8284 "/home/hoffman/Work/Andy/Swig/Swig-nightly-build/Source/CParse/parser.c"

  yyvsp -= yylen;
  yyssp -= yylen;


  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (YYPACT_NINF < yyn && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  int yytype = YYTRANSLATE (yychar);
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("syntax error, unexpected ") + 1;
	  yysize += yystrlen (yytname[yytype]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "syntax error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[yytype]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("syntax error; also virtual memory exhausted");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror ("syntax error");
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* Return failure if at end of input.  */
      if (yychar == YYEOF)
        {
	  /* Pop the error token.  */
          YYPOPSTACK;
	  /* Pop the rest of the stack.  */
	  while (yyss < yyssp)
	    {
	      YYDSYMPRINTF ("Error: popping", yystos[*yyssp], yyvsp, yylsp);
	      yydestruct (yystos[*yyssp], yyvsp);
	      YYPOPSTACK;
	    }
	  YYABORT;
        }

      YYDSYMPRINTF ("Error: discarding", yytoken, &yylval, &yylloc);
      yydestruct (yytoken, &yylval);
      yychar = YYEMPTY;

    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*----------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action.  |
`----------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      YYDSYMPRINTF ("Error: popping", yystos[*yyssp], yyvsp, yylsp);
      yydestruct (yystos[yystate], yyvsp);
      yyvsp--;
      yystate = *--yyssp;

      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;


  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*----------------------------------------------.
| yyoverflowlab -- parser overflow comes here.  |
`----------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}


#line 4771 "/home/hoffman/Work/Andy/Swig/Swig/Source/CParse/parser.y"


SwigType *Swig_cparse_type(String *s) {
   String *ns;
   ns = NewStringf("%s;",s);
   Seek(ns,0,SEEK_SET);
   scanner_file(ns);
   top = 0;
   scanner_next_token(PARSETYPE);
   yyparse();
   /*   Printf(stdout,"typeparse: '%s' ---> '%s'\n", s, top); */
   return top;
}


Parm *Swig_cparse_parm(String *s) {
   String *ns;
   ns = NewStringf("%s;",s);
   Seek(ns,0,SEEK_SET);
   scanner_file(ns);
   top = 0;
   scanner_next_token(PARSEPARM);
   yyparse();
   /*   Printf(stdout,"typeparse: '%s' ---> '%s'\n", s, top); */
   return top;
}










