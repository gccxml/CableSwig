/* A Bison parser, made by GNU Bison 1.875a.  */

/* Skeleton parser for Yacc-like parsing with Bison,
   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* Written by Richard Stallman by simplifying the original so called
   ``semantic'' parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Using locations.  */
#define YYLSP_NEEDED 0



/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ID = 258,
     HBLOCK = 259,
     POUND = 260,
     STRING = 261,
     INCLUDE = 262,
     IMPORT = 263,
     INSERT = 264,
     CHARCONST = 265,
     NUM_INT = 266,
     NUM_FLOAT = 267,
     NUM_UNSIGNED = 268,
     NUM_LONG = 269,
     NUM_ULONG = 270,
     NUM_LONGLONG = 271,
     NUM_ULONGLONG = 272,
     TYPEDEF = 273,
     TYPE_INT = 274,
     TYPE_UNSIGNED = 275,
     TYPE_SHORT = 276,
     TYPE_LONG = 277,
     TYPE_FLOAT = 278,
     TYPE_DOUBLE = 279,
     TYPE_CHAR = 280,
     TYPE_VOID = 281,
     TYPE_SIGNED = 282,
     TYPE_BOOL = 283,
     TYPE_TYPEDEF = 284,
     TYPE_RAW = 285,
     LPAREN = 286,
     RPAREN = 287,
     COMMA = 288,
     SEMI = 289,
     EXTERN = 290,
     INIT = 291,
     LBRACE = 292,
     RBRACE = 293,
     PERIOD = 294,
     CONST = 295,
     VOLATILE = 296,
     STRUCT = 297,
     UNION = 298,
     EQUAL = 299,
     SIZEOF = 300,
     MODULE = 301,
     LBRACKET = 302,
     RBRACKET = 303,
     ILLEGAL = 304,
     CONSTANT = 305,
     NAME = 306,
     RENAME = 307,
     NAMEWARN = 308,
     EXTEND = 309,
     PRAGMA = 310,
     FEATURE = 311,
     VARARGS = 312,
     ENUM = 313,
     CLASS = 314,
     TYPENAME = 315,
     PRIVATE = 316,
     PUBLIC = 317,
     PROTECTED = 318,
     COLON = 319,
     STATIC = 320,
     VIRTUAL = 321,
     FRIEND = 322,
     THROW = 323,
     CATCH = 324,
     USING = 325,
     NAMESPACE = 326,
     NATIVE = 327,
     INLINE = 328,
     TYPEMAP = 329,
     EXCEPT = 330,
     ECHO = 331,
     APPLY = 332,
     CLEAR = 333,
     SWIGTEMPLATE = 334,
     FRAGMENT = 335,
     WARN = 336,
     LESSTHAN = 337,
     GREATERTHAN = 338,
     MODULO = 339,
     DELETE = 340,
     TYPES = 341,
     PARMS = 342,
     NONID = 343,
     DSTAR = 344,
     DCNOT = 345,
     TEMPLATE = 346,
     OPERATOR = 347,
     COPERATOR = 348,
     PARSETYPE = 349,
     PARSEPARM = 350,
     CAST = 351,
     LOR = 352,
     LAND = 353,
     OR = 354,
     XOR = 355,
     AND = 356,
     RSHIFT = 357,
     LSHIFT = 358,
     MINUS = 359,
     PLUS = 360,
     SLASH = 361,
     STAR = 362,
     LNOT = 363,
     NOT = 364,
     UMINUS = 365,
     DCOLON = 366
   };
#endif
#define ID 258
#define HBLOCK 259
#define POUND 260
#define STRING 261
#define INCLUDE 262
#define IMPORT 263
#define INSERT 264
#define CHARCONST 265
#define NUM_INT 266
#define NUM_FLOAT 267
#define NUM_UNSIGNED 268
#define NUM_LONG 269
#define NUM_ULONG 270
#define NUM_LONGLONG 271
#define NUM_ULONGLONG 272
#define TYPEDEF 273
#define TYPE_INT 274
#define TYPE_UNSIGNED 275
#define TYPE_SHORT 276
#define TYPE_LONG 277
#define TYPE_FLOAT 278
#define TYPE_DOUBLE 279
#define TYPE_CHAR 280
#define TYPE_VOID 281
#define TYPE_SIGNED 282
#define TYPE_BOOL 283
#define TYPE_TYPEDEF 284
#define TYPE_RAW 285
#define LPAREN 286
#define RPAREN 287
#define COMMA 288
#define SEMI 289
#define EXTERN 290
#define INIT 291
#define LBRACE 292
#define RBRACE 293
#define PERIOD 294
#define CONST 295
#define VOLATILE 296
#define STRUCT 297
#define UNION 298
#define EQUAL 299
#define SIZEOF 300
#define MODULE 301
#define LBRACKET 302
#define RBRACKET 303
#define ILLEGAL 304
#define CONSTANT 305
#define NAME 306
#define RENAME 307
#define NAMEWARN 308
#define EXTEND 309
#define PRAGMA 310
#define FEATURE 311
#define VARARGS 312
#define ENUM 313
#define CLASS 314
#define TYPENAME 315
#define PRIVATE 316
#define PUBLIC 317
#define PROTECTED 318
#define COLON 319
#define STATIC 320
#define VIRTUAL 321
#define FRIEND 322
#define THROW 323
#define CATCH 324
#define USING 325
#define NAMESPACE 326
#define NATIVE 327
#define INLINE 328
#define TYPEMAP 329
#define EXCEPT 330
#define ECHO 331
#define APPLY 332
#define CLEAR 333
#define SWIGTEMPLATE 334
#define FRAGMENT 335
#define WARN 336
#define LESSTHAN 337
#define GREATERTHAN 338
#define MODULO 339
#define DELETE 340
#define TYPES 341
#define PARMS 342
#define NONID 343
#define DSTAR 344
#define DCNOT 345
#define TEMPLATE 346
#define OPERATOR 347
#define COPERATOR 348
#define PARSETYPE 349
#define PARSEPARM 350
#define CAST 351
#define LOR 352
#define LAND 353
#define OR 354
#define XOR 355
#define AND 356
#define RSHIFT 357
#define LSHIFT 358
#define MINUS 359
#define PLUS 360
#define SLASH 361
#define STAR 362
#define LNOT 363
#define NOT 364
#define UMINUS 365
#define DCOLON 366




/* Copy the first part of user declarations.  */
#line 1 "CableSwig/SWIG/Source/CParse/parser.y"

/* -----------------------------------------------------------------------------
 * parser.y
 *
 *     YACC parser for SWIG.   The grammar is a somewhat broken subset of C/C++.
 *     This file is a bit of a mess and probably needs to be rewritten at
 *     some point.  Beware.
 *
 * Author(s) : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (C) 1998-2001.  The University of Chicago
 * Copyright (C) 1995-1998.  The University of Utah and The Regents of the
 *                           University of California.
 *
 * See the file LICENSE for information on usage and redistribution.
 * ----------------------------------------------------------------------------- */

#define yylex yylex

char cvsroot_parser_y[] = "/cvsroot/SWIG/Source/CParse/parser.y,v 1.45 2004/01/27 23:39:34 mmatus Exp";

#include "swig.h"
#include "cparse.h"
#include "preprocessor.h"
#include <ctype.h>

/* We do this for portability */
#undef alloca
#define alloca malloc

/* -----------------------------------------------------------------------------
 *                               Externals
 * ----------------------------------------------------------------------------- */

int  yyparse();

/* NEW Variables */

static Node    *top = 0;      /* Top of the generated parse tree */
static int      unnamed = 0;  /* Unnamed datatype counter */
static Hash    *extendhash = 0;     /* Hash table of added methods */
static Hash    *classes = 0;        /* Hash table of classes */
static Symtab  *prev_symtab = 0;
static Node    *current_class = 0;
       String  *ModuleName = 0;
static Node    *module_node = 0;
static String  *Classprefix = 0;  
static String  *Namespaceprefix = 0;
static int      inclass = 0;
static char    *last_cpptype = 0;
static int      inherit_list = 0;
static Parm    *template_parameters = 0;
static int      extendmode   = 0;
static int      dirprot_mode  = 0;

/* -----------------------------------------------------------------------------
 *                            Assist Functions
 * ----------------------------------------------------------------------------- */

/* Called by the parser (yyparse) when an error is found.*/
static void yyerror (const char *e) {
  (void)e;
}

static Node *new_node(const String_or_char *tag) {
  Node *n = NewHash();
  set_nodeType(n,tag);
  Setfile(n,cparse_file);
  Setline(n,cparse_line);
  return n;
}

/* Copies a node.  Does not copy tree links or symbol table data (except for
   sym:name) */

static Node *copy_node(Node *n) {
  Node *nn;
  String *key;
  Iterator k;
  nn = NewHash();
  Setfile(nn,Getfile(n));
  Setline(nn,Getline(n));
  for (k = First(n); k.key; k = Next(k)) {
    key = k.key;
    if ((Strcmp(key,"nextSibling") == 0) ||
	(Strcmp(key,"previousSibling") == 0) ||
	(Strcmp(key,"parentNode") == 0) ||
	(Strcmp(key,"lastChild") == 0)) {
      continue;
    }
    if (Strncmp(key,"csym:",5) == 0) continue;
    /* We do copy sym:name.  For templates */
    if ((Strcmp(key,"sym:name") == 0) || 
	(Strcmp(key,"sym:weak") == 0) ||
	(Strcmp(key,"sym:typename") == 0)) {
      Setattr(nn,key, Copy(k.item));
      continue;
    }
    if (Strcmp(key,"sym:symtab") == 0) {
      Setattr(nn,"sym:needs_symtab", "1");
    }
    /* We don't copy any other symbol table attributes */
    if (Strncmp(key,"sym:",4) == 0) {
      continue;
    }
    /* If children.  We copy them recursively using this function */
    if (Strcmp(key,"firstChild") == 0) {
      /* Copy children */
      Node *cn = k.item;
      while (cn) {
	appendChild(nn,copy_node(cn));
	cn = nextSibling(cn);
      }
      continue;
    }
    /* We don't copy the symbol table.  But we drop an attribute 
       requires_symtab so that functions know it needs to be built */

    if (Strcmp(key,"symtab") == 0) {
      /* Node defined a symbol table. */
      Setattr(nn,"requires_symtab","1");
      continue;
    }
    /* Can't copy nodes */
    if (Strcmp(key,"node") == 0) {
      continue;
    }
    if ((Strcmp(key,"parms") == 0) || (Strcmp(key,"pattern") == 0) || (Strcmp(key,"throws") == 0))  {
      Setattr(nn,key,CopyParmList(k.item));
      continue;
    }
    /* Looks okay.  Just copy the data using Copy */
    Setattr(nn, key, Copy(k.item));
  }
  return nn;
}

/* -----------------------------------------------------------------------------
 *                              Variables
 * ----------------------------------------------------------------------------- */

      char  *typemap_lang = 0;    /* Current language setting */

static int cplus_mode  = 0;
static String  *class_rename = 0;

/* C++ modes */

#define  CPLUS_PUBLIC    1
#define  CPLUS_PRIVATE   2
#define  CPLUS_PROTECTED 3

void SWIG_typemap_lang(const char *tm_lang) {
  typemap_lang = Swig_copy_string(tm_lang);
}

/* -----------------------------------------------------------------------------
 *                           Assist functions
 * ----------------------------------------------------------------------------- */

/* Perform type-promotion for binary operators */
static int promote(int t1, int t2) {
  return t1 > t2 ? t1 : t2;
}

static String *yyrename = 0;

/* Forward renaming operator */
static Hash   *rename_hash = 0;
static Hash   *namewarn_hash = 0;
static Hash   *features_hash = 0;

static String *feature_identifier_fix(String *s) {
  if (SwigType_istemplate(s)) {
    String *tp, *ts, *ta, *tq;
    tp = SwigType_templateprefix(s);
    ts = SwigType_templatesuffix(s);
    ta = SwigType_templateargs(s);
    tq = Swig_symbol_type_qualify(ta,0);
    Append(tp,tq);
    Append(tp,ts);
    Delete(ts);
    Delete(ta);
    Delete(tq);
    return tp;
  } else {
    return NewString(s);
  }
}

static void
rename_add(char *name, SwigType *decl, char *newname) {
  String *nname;
  if (!rename_hash) rename_hash = NewHash();
  if (Namespaceprefix) {
    nname = NewStringf("%s::%s",Namespaceprefix, name);
  } else {
    nname = NewString(name);
  }
  Swig_name_object_set(rename_hash,nname,decl,NewString(newname));
  Delete(nname);
}

static void
namewarn_add(char *name, SwigType *decl, char *warning) {
  String *nname;
  if (!namewarn_hash) namewarn_hash = NewHash();
  if (Namespaceprefix) {
    nname = NewStringf("%s::%s",Namespaceprefix, name);
  } else {
    nname = NewString(name);
  }

  Swig_name_object_set(namewarn_hash,nname,decl,NewString(warning));
  Delete(nname);
}

static void
rename_inherit(String *base, String *derived) {
  /*  Printf(stdout,"base = '%s', derived = '%s'\n", base, derived); */
  Swig_name_object_inherit(rename_hash,base,derived);
  Swig_name_object_inherit(namewarn_hash,base,derived);
  Swig_name_object_inherit(features_hash,base,derived);
}

/* Generate the symbol table name for an object */
/* This is a bit of a mess. Need to clean up */
static String *add_oldname = 0;

static String *make_name(String *name,SwigType *decl) {
  String *rn = 0;
  String *origname = name;
  int     destructor = 0;

  if (name && (*(Char(name)) == '~')) {
    destructor = 1;
  }
  if (yyrename) {
    String *s = yyrename;
    yyrename = 0;
    if (destructor) {
      Insert(s,0,"~");
    }
    return s;
  }


  if (!name) return 0;
  /* Check to see if the name is in the hash */
  if (!rename_hash) {
    if (add_oldname) return Copy(add_oldname);
    return origname;
  }
  rn = Swig_name_object_get(rename_hash, Namespaceprefix, name, decl);
  if (!rn) {
    if (add_oldname) return Copy(add_oldname);
    return name;
  }
  if (destructor) {
    if (Strcmp(rn,"$ignore") != 0) {
      String *s = NewStringf("~%s", rn);
      return s;
    }
  }
  return Copy(rn);
}

/* Generate an unnamed identifier */
static String *make_unnamed() {
  unnamed++;
  return NewStringf("$unnamed%d$",unnamed);
}

/* Return the node name when it requires to emit a name warning */
static String *name_warning(Node *n,String *name,SwigType *decl) {
  /* Return in the obvious cases */
  if (!namewarn_hash || !name || !need_name_warning(n)) return 0;

  /* Check to see if the name is in the hash */
  return Swig_name_object_get(namewarn_hash,Namespaceprefix,name,decl);
}

/* Return if the node is a friend declaration */
static int is_friend(Node *n) {
 return Cmp(Getattr(n,"storage"),"friend") == 0;
}

/* Add declaration list to symbol table */
static int  add_only_one = 0;

static void add_symbols(Node *n) {
  String *decl;
  String *wrn = 0;

  if (inclass) {
    cparse_normalize_void(n);
  }

  while (n) {
    String *symname;
    /* for friends, we need to pop the scope once */
    int isfriend = is_friend(n);
    Symtab *class_scope = isfriend ? Swig_symbol_popscope() : 0;

    if (!isfriend && inclass && (cplus_mode != CPLUS_PUBLIC)) {
      int only_csymbol = 1;
      if (cplus_mode == CPLUS_PROTECTED) {
	Setattr(n,"access", "protected");
	only_csymbol = !need_protected(n, dirprot_mode);
      } else {
	Setattr(n,"access", "private");
      }
      if (only_csymbol) {
	/* Only add to C symbol table and continue */
	Swig_symbol_add(0, n); 
	if (add_only_one) break;
	n = nextSibling(n);
	continue;
      }
    }
    if (Getattr(n,"sym:name")) {
      n = nextSibling(n);
      continue;
    }
    decl = Getattr(n,"decl");
    if (!SwigType_isfunction(decl)) {
      symname = make_name(Getattr(n,"name"),0);
      if (!symname) {
	symname = Getattr(n,"unnamed");
      }
      if (symname) {
	wrn = name_warning(n,symname,0);
	Swig_features_get(features_hash, Namespaceprefix, Getattr(n,"name"), 0, n);
      }
    } else {
      SwigType *fdecl = Copy(decl);
      SwigType *fun = SwigType_pop_function(fdecl);

      /* for friends, we need to disable the class prefix */
      String* class_prefix = isfriend ? Namespaceprefix : 0;
      if (isfriend) Namespaceprefix = 0;

      symname = make_name(Getattr(n,"name"),fun);
      wrn = name_warning(n,symname,fun);
      
      Swig_features_get(features_hash,Namespaceprefix,Getattr(n,"name"),fun,n);
      Delete(fdecl);
      Delete(fun);
      
      /* restore the class prefix if needed */
      if (isfriend) Namespaceprefix = class_prefix;
    }
    if (!symname) {
      n = nextSibling(n);
      continue;
    }
    if (strncmp(Char(symname),"$ignore",7) == 0) {
      char *c = Char(symname)+7;
      Setattr(n,"feature:ignore","1");
      if (strlen(c)) {
	Swig_warning(0,Getfile(n), Getline(n), "%s\n",c+1);
      }
      Swig_symbol_add(0, n);
    } else {
      Node *c;
      if ((wrn) && (Len(wrn))) {
	Swig_warning(0,Getfile(n),Getline(n), "%s\n", wrn);
      }
      if (Strcmp(nodeType(n),"enum") != 0) {
	c = Swig_symbol_add(symname,n);
	if (c != n) {
	  if (Getattr(n,"sym:weak")) {
	    Setattr(n,"sym:name",symname);
	  } else if ((Strcmp(nodeType(n),"template") == 0) && (Strcmp(Getattr(n,"templatetype"),"cdecl") == 0)) {
	    Setattr(n,"sym:name",symname);
	  } else {
	    String *e = NewString("");
	    String *en = NewString("");
	    String *ec = NewString("");
	    int redefined = need_redefined_warn(n,c,inclass);
	    if (redefined) {
	      Printf(en,"Identifier '%s' redefined (ignored)",symname);
	      Printf(ec,"previous definition of '%s'",symname);
	    } else {
	      Printf(en,"Redundant redeclaration of '%s'",symname);
	      Printf(ec,"previous declaration of '%s'",symname);
	    }
	    if (Cmp(symname,Getattr(n,"name"))) {
	      Printf(en," (Renamed from '%s')", SwigType_namestr(Getattr(n,"name")));
	    }
	    Printf(en,",");
	    if (Cmp(symname,Getattr(c,"name"))) {
	      Printf(ec," (Renamed from '%s')", SwigType_namestr(Getattr(c,"name")));
	    }
	    Printf(ec,".");
	    if (redefined) {
	      Swig_warning(WARN_PARSE_REDEFINED,Getfile(n),Getline(n),"%s\n",en);
	      Swig_warning(WARN_PARSE_REDEFINED,Getfile(c),Getline(c),"%s\n",ec);
	    } else if (!is_friend(n) && !is_friend(c)) {
	      Swig_warning(WARN_PARSE_REDUNDANT,Getfile(n),Getline(n),"%s\n",en);
	      Swig_warning(WARN_PARSE_REDUNDANT,Getfile(c),Getline(c),"%s\n",ec);
	    }
	    Printf(e,"%s:%d:%s\n%s:%d:%s\n",Getfile(n),Getline(n),en,
		   Getfile(c),Getline(c),ec);
	    Setattr(n,"error",e);
	    Delete(en);
	    Delete(ec);
	  }
	}
      } else {
	Setattr(n,"sym:name", symname);
      }
    }
    /* restore the class scope if needed */
    if (isfriend) Swig_symbol_setscope(class_scope);

    if (add_only_one) return;
    n = nextSibling(n);
  }
}


/* add symbols a parse tree node copy */

void add_symbols_copy(Node *n) {
  String *name;
  int    emode = 0;

  while (n) {

    if (Strcmp(nodeType(n),"access") == 0) {
      String *kind = Getattr(n,"kind");
      if (Strcmp(kind,"public") == 0) {
	cplus_mode = CPLUS_PUBLIC;
      } else if (Strcmp(kind,"private") == 0) {
	cplus_mode = CPLUS_PRIVATE;
      } else if (Strcmp(kind,"protected") == 0) {
	cplus_mode = CPLUS_PROTECTED;
      }
      n = nextSibling(n);
      continue;
    }

    add_oldname = Getattr(n,"sym:name");
    if ((add_oldname) || (Getattr(n,"sym:needs_symtab"))) {
      if (add_oldname) {
	DohIncref(add_oldname);
	/* If already renamed, we used that name */
	if (Strcmp(add_oldname, Getattr(n,"name")) != 0) {
	  yyrename = add_oldname;
	}
      }
      Delattr(n,"sym:needs_symtab");
      Delattr(n,"sym:name");

      add_only_one = 1;
      add_symbols(n);

      if (Getattr(n,"partialargs")) {
	Swig_symbol_cadd(Getattr(n,"partialargs"),n);
      }
      add_only_one = 0;
      name = Getattr(n,"name");
      if (Getattr(n,"requires_symtab")) {
	Swig_symbol_newscope();
	Swig_symbol_setscopename(name);
	Namespaceprefix = Swig_symbol_qualifiedscopename(0);
      }
      if (Strcmp(nodeType(n),"class") == 0) {
	inclass = 1;
	if (Strcmp(Getattr(n,"kind"),"class") == 0) {
	  cplus_mode = CPLUS_PRIVATE;
	} else {
	  cplus_mode = CPLUS_PUBLIC;
	}
      }
      if (Strcmp(nodeType(n),"extend") == 0) {
	emode = cplus_mode;
	cplus_mode = CPLUS_PUBLIC;
      }
      add_symbols_copy(firstChild(n));
      if (Strcmp(nodeType(n),"extend") == 0) {
	cplus_mode = emode;
      }
      if (Getattr(n,"requires_symtab")) {
	Setattr(n,"symtab", Swig_symbol_popscope());
	Delattr(n,"requires_symtab");
	Namespaceprefix = Swig_symbol_qualifiedscopename(0);
      }
      if (add_oldname) {
	Delete(add_oldname);
      }
      if (Strcmp(nodeType(n),"class") == 0) {
	inclass = 0;
      }
      add_oldname = 0;
    } else {
      if (Strcmp(nodeType(n),"extend") == 0) {
	emode = cplus_mode;
	cplus_mode = CPLUS_PUBLIC;
      }
      add_symbols_copy(firstChild(n));
      if (Strcmp(nodeType(n),"extend") == 0) {
	cplus_mode = emode;
      }
    }
    n = nextSibling(n);
  }
}

/* Extension merge.  This function is used to handle the %extend directive
   when it appears before a class definition.   To handle this, the %extend
   actually needs to take precedence.  Therefore, we will selectively nuke symbols
   from the current symbol table, replacing them with the added methods */

static void merge_extensions(Node *cls, Node *am) {
  Node *n;
  Node *csym;

  n = firstChild(am);
  while (n) {
    String *symname;
    if (Strcmp(nodeType(n),"constructor") == 0) {
      symname = Getattr(n,"sym:name");
      if (symname) {
	if (Strcmp(symname,Getattr(n,"name")) == 0) {
	  /* If the name and the sym:name of a constructor are the same,
             then it hasn't been renamed.  However---the name of the class
             itself might have been renamed so we need to do a consistency
             check here */
	  if (Getattr(cls,"sym:name")) {
	    Setattr(n,"sym:name", Getattr(cls,"sym:name"));
	  }
	}
      } 
    }

    symname = Getattr(n,"sym:name");
    DohIncref(symname);
    if ((symname) && (!Getattr(n,"error"))) {
      /* Remove node from its symbol table */
      Swig_symbol_remove(n);
      csym = Swig_symbol_add(symname,n);
      if (csym != n) {
	/* Conflict with previous definition.  Nuke previous definition */
	String *e = NewString("");
	String *en = NewString("");
	String *ec = NewString("");
	Printf(ec,"Identifier '%s' redefined by %%extend (ignored),",symname);
	Printf(en,"%%extend definition of '%s'.",symname);
	Swig_warning(WARN_PARSE_REDEFINED,Getfile(csym),Getline(csym),"%s\n",ec);
	Swig_warning(WARN_PARSE_REDEFINED,Getfile(n),Getline(n),"%s\n",en);
	Printf(e,"%s:%d:%s\n%s:%d:%s\n",Getfile(csym),Getline(csym),ec, 
	       Getfile(n),Getline(n),en);
	Setattr(csym,"error",e);
	Delete(en);
	Delete(ec);
	Swig_symbol_remove(csym);              /* Remove class definition */
	Swig_symbol_add(symname,n);            /* Insert extend definition */
      }
    }
    n = nextSibling(n);
  }
}

/* Check for unused %extend.  Special case, don't report unused
   extensions for templates */
 
 static void check_extensions() {
   Iterator ki;

   if (!extendhash) return;
   for (ki = First(extendhash); ki.key; ki = Next(ki)) {
     if (!Strstr(ki.key,"<")) {
       Swig_warning(WARN_PARSE_EXTEND_UNDEF,Getfile(ki.item), Getline(ki.item), "%%extend defined for an undeclared class %s.\n", ki.key);
     }
   }
 }

/* Check a set of declarations to see if any are pure-abstract */

 static List *pure_abstract(Node *n) {
   List *abs = 0;
   while (n) {
     if (Cmp(nodeType(n),"cdecl") == 0) {
       String *decl = Getattr(n,"decl");
       if (SwigType_isfunction(decl)) {
	 String *init = Getattr(n,"value");
	 if (Cmp(init,"0") == 0) {
	   if (!abs) {
	     abs = NewList();
	   }
	   Append(abs,n);
	   Setattr(n,"abstract","1");
	 }
       }
     } else if (Cmp(nodeType(n),"destructor") == 0) {
       if (Cmp(Getattr(n,"value"),"0") == 0) {
	 if (!abs) {
	   abs = NewList();
	 }
	 Append(abs,n);
	 Setattr(n,"abstract","1");
       }
     }
     n = nextSibling(n);
   }
   return abs;
 }

 /* Make a classname */

 static String *make_class_name(String *name) {
   String *nname = 0;
   if (Namespaceprefix) {
     nname= NewStringf("%s::%s", Namespaceprefix, name);
   } else {
     nname = NewString(name);
   }
   if (SwigType_istemplate(nname)) {
     String *prefix, *args, *qargs;
     prefix = SwigType_templateprefix(nname);
     args   = SwigType_templateargs(nname);
     qargs  = Swig_symbol_type_qualify(args,0);
     Append(prefix,qargs);
     Delete(nname);
     nname = prefix;
   }
   return nname;
 }

 static List *make_inherit_list(String *clsname, List *names) {
   int i;
   String *derived;
   List *bases = NewList();

   if (Namespaceprefix) derived = NewStringf("%s::%s", Namespaceprefix,clsname);
   else derived = NewString(clsname);

   for (i = 0; i < Len(names); i++) {
     Node *s;
     String *base;
     String *n = Getitem(names,i);
     /* Try to figure out where this symbol is */
     s = Swig_symbol_clookup(n,0);
     if (s) {
       while (s && (Strcmp(nodeType(s),"class") != 0)) {
	 /* Not a class.  Could be a typedef though. */
	 String *storage = Getattr(s,"storage");
	 if (storage && (Strcmp(storage,"typedef") == 0)) {
	   String *nn = Getattr(s,"type");
	   s = Swig_symbol_clookup(nn,Getattr(s,"sym:symtab"));
	 } else {
	   break;
	 }
       }
       if (s && ((Strcmp(nodeType(s),"class") == 0) || (Strcmp(nodeType(s),"template") == 0))) {
	 String *q = Swig_symbol_qualified(s);
	 Append(bases,s);
	 if (q) {
	   base = NewStringf("%s::%s", q, Getattr(s,"name"));
	 } else {
	   base = NewString(Getattr(s,"name"));
	 }
       } else {
	 base = NewString(n);
       }
     } else {
       base = NewString(n);
     }
     if (base) {
       rename_inherit(base,derived);
       Delete(base);
     }
   }
   return bases;
 }

/* Structures for handling code fragments built for nested classes */

typedef struct Nested {
  String   *code;        /* Associated code fragment */
  int      line;         /* line number where it starts */
  char     *name;        /* Name associated with this nested class */
  char     *kind;        /* Kind of class */
  SwigType *type;        /* Datatype associated with the name */
  struct Nested   *next;        /* Next code fragment in list */
} Nested;

/* Some internal variables for saving nested class information */

static Nested      *nested_list = 0;

/* Add a function to the nested list */

static void add_nested(Nested *n) {
  Nested *n1;
  if (!nested_list) nested_list = n;
  else {
    n1 = nested_list;
    while (n1->next) n1 = n1->next;
    n1->next = n;
  }
}

/* Dump all of the nested class declarations to the inline processor
 * However.  We need to do a few name replacements and other munging
 * first.  This function must be called before closing a class! */

static Node *dump_nested(char *parent) {
  Nested *n,*n1;
  Node *ret = 0;
  n = nested_list;
  if (!parent) {
    nested_list = 0;
    return 0;
  }
  while (n) {
    char temp[256];
    Node *retx;
    /* Token replace the name of the parent class */
    Replace(n->code, "$classname", parent, DOH_REPLACE_ANY);
    /* Fix up the name of the datatype (for building typedefs and other stuff) */
    sprintf(temp,"%s_%s", parent,n->name);

    Append(n->type,parent);
    Append(n->type,"_");
    Append(n->type,n->name);

    /* Add the appropriate declaration to the C++ processor */
    retx = new_node("cdecl");
    Setattr(retx,"name",n->name);
    Setattr(retx,"type",Copy(n->type));
    Setattr(retx,"nested",parent);
    add_symbols(retx);
    if (ret) {
      set_nextSibling(retx,ret);
    }
    ret = retx;

    /* Insert a forward class declaration */
    /* Disabled: [ 597599 ] union in class: incorrect scope 
    retx = new_node("classforward");
    Setattr(retx,"kind",n->kind);
    Setattr(retx,"name",Copy(n->type));
    Setattr(retx,"sym:name", make_name(n->type,0));
    set_nextSibling(retx,ret);
    ret = retx; 
    */

    /* Make all SWIG created typedef structs/unions/classes unnamed else 
       redefinition errors occur - nasty hack alert.*/

    {
      const char* types_array[3] = {"struct", "union", "class"};
      int i;
      for (i=0; i<3; i++) {
	char* code_ptr = Char(n->code);
      while (code_ptr) {
        /* Replace struct name (as in 'struct name {' ) with whitespace
           name will be between struct and { */
	
        code_ptr = strstr(code_ptr, types_array[i]);
        if (code_ptr) {
	  char *open_bracket_pos;
          code_ptr += strlen(types_array[i]);
          open_bracket_pos = strstr(code_ptr, "{");
          if (open_bracket_pos) { 
            /* Make sure we don't have something like struct A a; */
            char* semi_colon_pos = strstr(code_ptr, ";");
            if (!(semi_colon_pos && (semi_colon_pos < open_bracket_pos)))
              while (code_ptr < open_bracket_pos)
                *code_ptr++ = ' ';
          }
        }
      }
      }
    }
    
    {
      /* Remove SWIG directive %constant which may be left in the SWIG created typedefs */
      char* code_ptr = Char(n->code);
      while (code_ptr) {
	code_ptr = strstr(code_ptr, "%constant");
	if (code_ptr) {
	  char* directive_end_pos = strstr(code_ptr, ";");
	  if (directive_end_pos) { 
            while (code_ptr <= directive_end_pos)
              *code_ptr++ = ' ';
	  }
	}
      }
    }
    {
      Node *head;
      head = new_node("insert");
      Setattr(head,"code",NewStringf("\n%s\n",n->code));
      set_nextSibling(head,ret);
      ret = head;
    }
      
    /* Dump the code to the scanner */
    start_inline(Char(n->code),n->line);

    n1 = n->next;
    Delete(n->code);
    free(n);
    n = n1;
  }
  nested_list = 0;
  return ret;
}

Node *Swig_cparse(File *f) {
  scanner_file(f);
  top = 0;
  yyparse();
  return top;
}



/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

#if ! defined (YYSTYPE) && ! defined (YYSTYPE_IS_DECLARED)
#line 823 "CableSwig/SWIG/Source/CParse/parser.y"
typedef union YYSTYPE {
  char  *id;
  List  *bases;
  struct Define {
    String *val;
    String *rawval;
    int     type;
    String *qualifier;
    String *bitfield;
    Parm   *throws;
  } dtype;
  struct {
    char *type;
    char *filename;
    int   line;
  } loc;
  struct {
    char      *id;
    SwigType  *type;
    String    *defarg;
    ParmList  *parms;
    short      have_parms;
    ParmList  *throws;
  } decl;
  Parm         *tparms;
  struct {
    String     *op;
    Hash       *kwargs;
  } tmap;
  struct {
    String     *type;
    String     *us;
  } ptype;
  SwigType     *type;
  String       *str;
  Parm         *p;
  ParmList     *pl;
  int           ivalue;
  Node         *node;
} YYSTYPE;
/* Line 191 of yacc.c.  */
#line 1161 "CableSwig-build/SWIG/Source/CParse/parser.c"
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */


/* Line 214 of yacc.c.  */
#line 1173 "CableSwig-build/SWIG/Source/CParse/parser.c"

#if ! defined (yyoverflow) || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || YYERROR_VERBOSE */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif

#if defined (__STDC__) || defined (__cplusplus)
   typedef signed char yysigned_char;
#else
   typedef short yysigned_char;
#endif

/* YYFINAL -- State number of the termination state. */
#define YYFINAL  44
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   3362

/* YYNTOKENS -- Number of terminals. */
#define YYNTOKENS  112
/* YYNNTS -- Number of nonterminals. */
#define YYNNTS  137
/* YYNRULES -- Number of rules. */
#define YYNRULES  421
/* YYNRULES -- Number of states. */
#define YYNSTATES  813

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   366

#define YYTRANSLATE(YYX) 						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const unsigned char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const unsigned short yyprhs[] =
{
       0,     0,     3,     5,     9,    12,    16,    19,    22,    24,
      26,    28,    30,    32,    34,    36,    39,    41,    43,    45,
      47,    49,    51,    53,    55,    57,    59,    61,    63,    65,
      67,    69,    71,    73,    75,    77,    79,    81,    82,    90,
      96,   100,   106,   112,   116,   119,   122,   128,   131,   137,
     140,   146,   152,   153,   161,   163,   165,   168,   171,   173,
     179,   185,   191,   195,   200,   204,   212,   221,   227,   231,
     233,   235,   239,   241,   246,   254,   261,   263,   265,   273,
     283,   289,   297,   299,   301,   307,   315,   317,   321,   328,
     335,   344,   346,   349,   353,   355,   358,   362,   369,   375,
     385,   388,   390,   392,   398,   404,   406,   411,   413,   415,
     418,   424,   431,   439,   448,   455,   457,   459,   461,   463,
     465,   467,   468,   478,   479,   488,   490,   493,   498,   499,
     506,   510,   512,   514,   516,   518,   520,   522,   526,   531,
     532,   539,   540,   546,   552,   555,   556,   563,   565,   566,
     570,   572,   574,   576,   578,   580,   582,   584,   586,   590,
     592,   594,   596,   598,   600,   602,   604,   611,   618,   626,
     635,   644,   652,   658,   661,   664,   667,   668,   676,   677,
     684,   686,   688,   690,   692,   694,   696,   698,   700,   702,
     704,   706,   708,   710,   713,   716,   719,   724,   727,   733,
     735,   738,   740,   742,   744,   746,   748,   750,   753,   755,
     759,   761,   764,   771,   775,   777,   780,   782,   786,   788,
     790,   792,   794,   797,   801,   804,   807,   809,   812,   815,
     817,   819,   821,   823,   826,   830,   832,   835,   839,   844,
     850,   855,   857,   860,   864,   869,   875,   879,   884,   889,
     891,   894,   899,   904,   910,   914,   919,   924,   926,   929,
     932,   936,   938,   941,   943,   946,   950,   955,   959,   964,
     967,   971,   975,   980,   984,   988,   991,   994,   996,   998,
    1001,  1003,  1005,  1007,  1010,  1012,  1014,  1016,  1018,  1021,
    1024,  1026,  1029,  1031,  1034,  1036,  1038,  1041,  1043,  1045,
    1047,  1049,  1051,  1053,  1055,  1057,  1058,  1061,  1063,  1065,
    1067,  1071,  1073,  1075,  1079,  1081,  1083,  1085,  1087,  1089,
    1095,  1097,  1099,  1103,  1108,  1114,  1120,  1127,  1129,  1131,
    1133,  1135,  1137,  1139,  1141,  1145,  1149,  1153,  1157,  1161,
    1165,  1169,  1173,  1177,  1181,  1185,  1188,  1191,  1194,  1197,
    1200,  1202,  1203,  1207,  1209,  1211,  1215,  1218,  1223,  1225,
    1227,  1229,  1231,  1233,  1235,  1237,  1239,  1241,  1243,  1248,
    1254,  1256,  1260,  1264,  1269,  1274,  1278,  1281,  1283,  1285,
    1289,  1292,  1296,  1298,  1300,  1302,  1304,  1306,  1309,  1314,
    1316,  1320,  1322,  1326,  1330,  1333,  1336,  1339,  1342,  1345,
    1350,  1352,  1356,  1358,  1362,  1366,  1369,  1372,  1375,  1378,
    1380,  1382,  1384,  1386,  1390,  1392,  1396,  1402,  1404,  1408,
    1410,  1412
};

/* YYRHS -- A `-1'-separated list of the rules' RHS. */
static const short yyrhs[] =
{
     113,     0,    -1,   114,    -1,    94,   191,    34,    -1,    94,
       1,    -1,    95,   191,    34,    -1,    95,     1,    -1,   114,
     115,    -1,   248,    -1,   116,    -1,   150,    -1,   156,    -1,
      34,    -1,     1,    -1,   155,    -1,     1,    93,    -1,   117,
      -1,   119,    -1,   120,    -1,   121,    -1,   122,    -1,   123,
      -1,   124,    -1,   125,    -1,   128,    -1,   129,    -1,   130,
      -1,   131,    -1,   132,    -1,   133,    -1,   136,    -1,   138,
      -1,   140,    -1,   142,    -1,   147,    -1,   148,    -1,   149,
      -1,    -1,    54,   245,   238,    37,   118,   170,    38,    -1,
      77,   146,    37,   144,    38,    -1,    78,   144,    34,    -1,
      50,     3,    44,   213,    34,    -1,    50,   207,   199,   196,
      34,    -1,    50,     1,    34,    -1,    76,     4,    -1,    76,
     243,    -1,    75,    31,     3,    32,    37,    -1,    75,    37,
      -1,    75,    31,     3,    32,    34,    -1,    75,    34,    -1,
      80,    31,   246,    32,     4,    -1,    80,    31,   246,    32,
      37,    -1,    -1,   127,   245,   243,    47,   126,   114,    48,
      -1,     7,    -1,     8,    -1,    73,     4,    -1,    73,    37,
      -1,     4,    -1,     9,    31,   236,    32,   243,    -1,     9,
      31,   236,    32,     4,    -1,     9,    31,   236,    32,    37,
      -1,    46,   245,   236,    -1,    51,    31,   236,    32,    -1,
      51,    31,    32,    -1,    72,    31,     3,    32,   187,     3,
      34,    -1,    72,    31,     3,    32,   187,   207,   199,    34,
      -1,    55,   135,     3,    44,   134,    -1,    55,   135,     3,
      -1,   243,    -1,     4,    -1,    31,     3,    32,    -1,   248,
      -1,   137,   199,   236,    34,    -1,   137,    31,   236,    32,
     199,   230,    34,    -1,   137,    31,   236,    32,   243,    34,
      -1,    52,    -1,    53,    -1,    56,    31,   236,    32,   199,
     230,   139,    -1,    56,    31,   236,    33,   236,    32,   199,
     230,    34,    -1,    56,    31,   236,    32,   139,    -1,    56,
      31,   236,    33,   236,    32,    34,    -1,   244,    -1,    34,
      -1,    87,    31,   188,    32,    34,    -1,    57,    31,   141,
      32,   199,   230,    34,    -1,   188,    -1,    11,    33,   191,
      -1,    74,    31,   143,    32,   144,   244,    -1,    74,    31,
     143,    32,   144,    34,    -1,    74,    31,   143,    32,   144,
      44,   146,    34,    -1,   246,    -1,   146,   145,    -1,    33,
     146,   145,    -1,   248,    -1,   207,   198,    -1,    31,   188,
      32,    -1,    31,   188,    32,    31,   188,    32,    -1,    86,
      31,   188,    32,    34,    -1,    79,    31,   237,    32,   241,
      82,   192,    83,    34,    -1,    81,   243,    -1,   151,    -1,
     154,    -1,    35,   243,    37,   114,    38,    -1,   187,   207,
     199,   153,   152,    -1,    34,    -1,    33,   199,   153,   152,
      -1,    37,    -1,   196,    -1,   205,   196,    -1,    68,    31,
     188,    32,   196,    -1,   205,    68,    31,   188,    32,   196,
      -1,   187,    58,   215,    37,   216,    38,    34,    -1,   187,
      58,   215,    37,   216,    38,   199,   152,    -1,   187,   207,
      31,   188,    32,   231,    -1,   157,    -1,   161,    -1,   162,
      -1,   166,    -1,   167,    -1,   177,    -1,    -1,   187,   228,
     238,   222,    37,   158,   170,    38,   160,    -1,    -1,   187,
     228,    37,   159,   170,    38,   199,   152,    -1,    34,    -1,
     199,   152,    -1,   187,   228,   238,    34,    -1,    -1,    91,
      82,   165,    83,   163,   164,    -1,    91,   228,   238,    -1,
     151,    -1,   157,    -1,   174,    -1,   162,    -1,   161,    -1,
     189,    -1,    70,   238,    34,    -1,    70,    71,   238,    34,
      -1,    -1,    71,   238,    37,   168,   114,    38,    -1,    -1,
      71,    37,   169,   114,    38,    -1,    71,     3,    44,   238,
      34,    -1,   173,   170,    -1,    -1,    54,    37,   171,   170,
      38,   170,    -1,   248,    -1,    -1,     1,   172,   170,    -1,
     150,    -1,   174,    -1,   175,    -1,   178,    -1,   183,    -1,
     176,    -1,   161,    -1,   179,    -1,   187,   238,    34,    -1,
     166,    -1,   162,    -1,   177,    -1,   148,    -1,   149,    -1,
     186,    -1,    34,    -1,   187,   207,    31,   188,    32,   231,
      -1,   109,   240,    31,   188,    32,   184,    -1,    66,   109,
     240,    31,   188,    32,   185,    -1,   187,    93,   207,   204,
      31,   188,    32,   185,    -1,   187,    93,   207,   101,    31,
     188,    32,   185,    -1,   187,    93,   207,    31,   188,    32,
     185,    -1,    69,    31,   188,    32,    37,    -1,    62,    64,
      -1,    61,    64,    -1,    63,    64,    -1,    -1,   187,   228,
       3,    37,   180,   182,    34,    -1,    -1,   187,   228,    37,
     181,   182,    34,    -1,   199,    -1,   248,    -1,   133,    -1,
     121,    -1,   131,    -1,   136,    -1,   138,    -1,   140,    -1,
     129,    -1,   142,    -1,   119,    -1,   120,    -1,   122,    -1,
     230,    34,    -1,   230,    37,    -1,   230,    34,    -1,   230,
      44,   213,    34,    -1,   230,    37,    -1,   187,   207,    64,
      11,    34,    -1,    35,    -1,    35,   243,    -1,    65,    -1,
      18,    -1,    66,    -1,    67,    -1,   248,    -1,   189,    -1,
     191,   190,    -1,   248,    -1,    33,   191,   190,    -1,   248,
      -1,   208,   197,    -1,    91,    82,   228,    83,   228,   238,
      -1,    39,    39,    39,    -1,   193,    -1,   195,   194,    -1,
     248,    -1,    33,   195,   194,    -1,   248,    -1,   191,    -1,
     220,    -1,     6,    -1,    44,   213,    -1,    44,   101,   199,
      -1,    44,    37,    -1,    64,    11,    -1,   248,    -1,   199,
     196,    -1,   202,   196,    -1,   196,    -1,   199,    -1,   202,
      -1,   248,    -1,   204,   200,    -1,   204,   101,   200,    -1,
     201,    -1,   101,   200,    -1,   238,    89,   200,    -1,   204,
     238,    89,   200,    -1,   204,   238,    89,   101,   200,    -1,
     238,    89,   101,   200,    -1,   238,    -1,   109,   238,    -1,
      31,   238,    32,    -1,    31,   204,   200,    32,    -1,    31,
     238,    89,   200,    32,    -1,   200,    47,    48,    -1,   200,
      47,   219,    48,    -1,   200,    31,   188,    32,    -1,   238,
      -1,   109,   238,    -1,    31,   204,   201,    32,    -1,    31,
     101,   201,    32,    -1,    31,   238,    89,   201,    32,    -1,
     201,    47,    48,    -1,   201,    47,   219,    48,    -1,   201,
      31,   188,    32,    -1,   204,    -1,   204,   203,    -1,   204,
     101,    -1,   204,   101,   203,    -1,   203,    -1,   101,   203,
      -1,   101,    -1,   238,    89,    -1,   204,   238,    89,    -1,
     204,   238,    89,   203,    -1,   203,    47,    48,    -1,   203,
      47,   219,    48,    -1,    47,    48,    -1,    47,   219,    48,
      -1,    31,   202,    32,    -1,   203,    31,   188,    32,    -1,
      31,   188,    32,    -1,   107,   205,   204,    -1,   107,   204,
      -1,   107,   205,    -1,   107,    -1,   206,    -1,   206,   205,
      -1,    40,    -1,    41,    -1,   208,    -1,   205,   209,    -1,
     209,    -1,   210,    -1,    28,    -1,    26,    -1,    29,   235,
      -1,    58,   238,    -1,    30,    -1,   209,   205,    -1,   238,
      -1,   228,   238,    -1,   211,    -1,   212,    -1,   212,   211,
      -1,    19,    -1,    21,    -1,    22,    -1,    25,    -1,    23,
      -1,    24,    -1,    27,    -1,    20,    -1,    -1,   214,   219,
      -1,    10,    -1,     3,    -1,   248,    -1,   216,    33,   217,
      -1,   217,    -1,     3,    -1,     3,    44,   218,    -1,   248,
      -1,   219,    -1,    10,    -1,   220,    -1,   243,    -1,    45,
      31,   207,   197,    32,    -1,   221,    -1,   207,    -1,    31,
     219,    32,    -1,    31,   219,    32,   219,    -1,    31,   219,
     204,    32,   219,    -1,    31,   219,   101,    32,   219,    -1,
      31,   219,   204,   101,    32,   219,    -1,    11,    -1,    12,
      -1,    13,    -1,    14,    -1,    15,    -1,    16,    -1,    17,
      -1,   219,   105,   219,    -1,   219,   104,   219,    -1,   219,
     107,   219,    -1,   219,   106,   219,    -1,   219,   101,   219,
      -1,   219,    99,   219,    -1,   219,   100,   219,    -1,   219,
     103,   219,    -1,   219,   102,   219,    -1,   219,    98,   219,
      -1,   219,    97,   219,    -1,   104,   219,    -1,   105,   219,
      -1,   109,   219,    -1,   108,   219,    -1,   207,    31,    -1,
     223,    -1,    -1,    64,   224,   225,    -1,   248,    -1,   226,
      -1,   225,    33,   226,    -1,   229,   238,    -1,   229,   227,
     229,   238,    -1,    62,    -1,    61,    -1,    63,    -1,    59,
      -1,    42,    -1,    43,    -1,    60,    -1,    66,    -1,   248,
      -1,   205,    -1,    68,    31,   188,    32,    -1,   205,    68,
      31,   188,    32,    -1,   248,    -1,   230,   232,    34,    -1,
     230,   232,    37,    -1,    31,   188,    32,    34,    -1,    31,
     188,    32,    37,    -1,    44,   213,    34,    -1,    64,   233,
      -1,   248,    -1,   234,    -1,   233,    33,   234,    -1,   238,
      31,    -1,    82,   192,    83,    -1,   248,    -1,     3,    -1,
     243,    -1,   236,    -1,   248,    -1,   240,   239,    -1,    88,
     111,   240,   239,    -1,   240,    -1,    88,   111,   240,    -1,
      92,    -1,    88,   111,    92,    -1,   111,   240,   239,    -1,
     111,   240,    -1,   111,    92,    -1,    90,   240,    -1,     3,
     235,    -1,     3,   242,    -1,    88,   111,     3,   242,    -1,
       3,    -1,    88,   111,     3,    -1,    92,    -1,    88,   111,
      92,    -1,   111,     3,   242,    -1,   111,     3,    -1,   111,
      92,    -1,    90,     3,    -1,   243,     6,    -1,     6,    -1,
     243,    -1,    37,    -1,     4,    -1,    31,   246,    32,    -1,
     248,    -1,   236,    44,   247,    -1,   236,    44,   247,    33,
     246,    -1,   236,    -1,   236,    33,   246,    -1,   243,    -1,
     220,    -1,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const unsigned short yyrline[] =
{
       0,   965,   965,   977,   980,   983,   986,   991,   995,  1000,
    1001,  1002,  1003,  1004,  1016,  1032,  1042,  1043,  1044,  1045,
    1046,  1047,  1048,  1049,  1050,  1051,  1052,  1053,  1054,  1055,
    1056,  1057,  1058,  1059,  1060,  1061,  1062,  1069,  1069,  1141,
    1151,  1162,  1181,  1203,  1214,  1223,  1242,  1248,  1254,  1259,
    1269,  1277,  1295,  1295,  1322,  1323,  1330,  1350,  1377,  1381,
    1391,  1396,  1411,  1427,  1431,  1443,  1449,  1475,  1481,  1488,
    1489,  1492,  1493,  1501,  1512,  1556,  1567,  1570,  1583,  1630,
    1682,  1693,  1706,  1707,  1708,  1713,  1749,  1750,  1779,  1791,
    1799,  1812,  1834,  1840,  1844,  1847,  1855,  1860,  1872,  1882,
    2127,  2137,  2143,  2147,  2163,  2216,  2220,  2239,  2245,  2250,
    2255,  2260,  2272,  2280,  2328,  2375,  2376,  2377,  2378,  2379,
    2380,  2386,  2386,  2520,  2520,  2618,  2619,  2631,  2649,  2649,
    2862,  2868,  2871,  2874,  2877,  2880,  2885,  2917,  2923,  2950,
    2950,  2977,  2977,  2997,  3024,  3038,  3038,  3048,  3049,  3049,
    3069,  3070,  3084,  3085,  3086,  3087,  3088,  3089,  3090,  3091,
    3092,  3093,  3094,  3095,  3096,  3097,  3106,  3127,  3143,  3176,
    3190,  3207,  3225,  3232,  3239,  3247,  3270,  3270,  3299,  3299,
    3326,  3327,  3333,  3336,  3340,  3343,  3344,  3345,  3346,  3347,
    3348,  3349,  3350,  3353,  3356,  3359,  3366,  3373,  3383,  3389,
    3390,  3398,  3399,  3400,  3401,  3402,  3409,  3420,  3428,  3431,
    3435,  3439,  3449,  3454,  3462,  3475,  3483,  3486,  3490,  3494,
    3520,  3526,  3534,  3544,  3572,  3580,  3587,  3596,  3600,  3604,
    3611,  3628,  3645,  3653,  3661,  3670,  3674,  3683,  3694,  3706,
    3716,  3729,  3736,  3744,  3760,  3768,  3779,  3790,  3801,  3820,
    3828,  3845,  3853,  3860,  3871,  3882,  3893,  3912,  3918,  3924,
    3931,  3940,  3943,  3952,  3959,  3966,  3976,  3987,  3998,  4009,
    4016,  4023,  4026,  4043,  4053,  4060,  4066,  4071,  4077,  4081,
    4087,  4088,  4094,  4100,  4104,  4107,  4110,  4111,  4112,  4113,
    4114,  4115,  4120,  4123,  4128,  4153,  4156,  4198,  4202,  4206,
    4210,  4214,  4218,  4222,  4226,  4232,  4232,  4251,  4268,  4269,
    4274,  4287,  4296,  4302,  4315,  4318,  4327,  4338,  4339,  4343,
    4348,  4349,  4373,  4380,  4386,  4393,  4400,  4410,  4411,  4412,
    4413,  4414,  4415,  4416,  4419,  4423,  4427,  4431,  4435,  4439,
    4443,  4447,  4451,  4455,  4459,  4463,  4467,  4471,  4475,  4479,
    4490,  4495,  4495,  4496,  4499,  4504,  4510,  4520,  4532,  4533,
    4534,  4538,  4542,  4546,  4550,  4556,  4557,  4560,  4564,  4568,
    4572,  4578,  4584,  4590,  4597,  4604,  4611,  4612,  4615,  4616,
    4619,  4625,  4631,  4634,  4635,  4638,  4639,  4642,  4647,  4651,
    4654,  4657,  4660,  4665,  4669,  4672,  4679,  4685,  4694,  4699,
    4703,  4706,  4709,  4712,  4717,  4721,  4724,  4727,  4733,  4738,
    4741,  4744,  4748,  4753,  4766,  4770,  4775,  4781,  4785,  4792,
    4795,  4800
};
#endif

#if YYDEBUG || YYERROR_VERBOSE
/* YYTNME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals. */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ID", "HBLOCK", "POUND", "STRING", 
  "INCLUDE", "IMPORT", "INSERT", "CHARCONST", "NUM_INT", "NUM_FLOAT", 
  "NUM_UNSIGNED", "NUM_LONG", "NUM_ULONG", "NUM_LONGLONG", 
  "NUM_ULONGLONG", "TYPEDEF", "TYPE_INT", "TYPE_UNSIGNED", "TYPE_SHORT", 
  "TYPE_LONG", "TYPE_FLOAT", "TYPE_DOUBLE", "TYPE_CHAR", "TYPE_VOID", 
  "TYPE_SIGNED", "TYPE_BOOL", "TYPE_TYPEDEF", "TYPE_RAW", "LPAREN", 
  "RPAREN", "COMMA", "SEMI", "EXTERN", "INIT", "LBRACE", "RBRACE", 
  "PERIOD", "CONST", "VOLATILE", "STRUCT", "UNION", "EQUAL", "SIZEOF", 
  "MODULE", "LBRACKET", "RBRACKET", "ILLEGAL", "CONSTANT", "NAME", 
  "RENAME", "NAMEWARN", "EXTEND", "PRAGMA", "FEATURE", "VARARGS", "ENUM", 
  "CLASS", "TYPENAME", "PRIVATE", "PUBLIC", "PROTECTED", "COLON", 
  "STATIC", "VIRTUAL", "FRIEND", "THROW", "CATCH", "USING", "NAMESPACE", 
  "NATIVE", "INLINE", "TYPEMAP", "EXCEPT", "ECHO", "APPLY", "CLEAR", 
  "SWIGTEMPLATE", "FRAGMENT", "WARN", "LESSTHAN", "GREATERTHAN", "MODULO", 
  "DELETE", "TYPES", "PARMS", "NONID", "DSTAR", "DCNOT", "TEMPLATE", 
  "OPERATOR", "COPERATOR", "PARSETYPE", "PARSEPARM", "CAST", "LOR", 
  "LAND", "OR", "XOR", "AND", "RSHIFT", "LSHIFT", "MINUS", "PLUS", 
  "SLASH", "STAR", "LNOT", "NOT", "UMINUS", "DCOLON", "$accept", 
  "program", "interface", "declaration", "swig_directive", 
  "extend_directive", "@1", "apply_directive", "clear_directive", 
  "constant_directive", "echo_directive", "except_directive", 
  "fragment_directive", "include_directive", "@2", "includetype", 
  "inline_directive", "insert_directive", "module_directive", 
  "name_directive", "native_directive", "pragma_directive", "pragma_arg", 
  "pragma_lang", "rename_directive", "rename_namewarn", 
  "feature_directive", "stringbracesemi", "varargs_directive", 
  "varargs_parms", "typemap_directive", "typemap_type", "tm_list", 
  "tm_tail", "typemap_parm", "types_directive", "template_directive", 
  "warn_directive", "c_declaration", "c_decl", "c_decl_tail", 
  "initializer", "c_enum_decl", "c_constructor_decl", "cpp_declaration", 
  "cpp_class_decl", "@3", "@4", "cpp_opt_declarators", 
  "cpp_forward_class_decl", "cpp_template_decl", "@5", 
  "cpp_temp_possible", "template_parms", "cpp_using_decl", 
  "cpp_namespace_decl", "@6", "@7", "cpp_members", "@8", "@9", 
  "cpp_member", "cpp_constructor_decl", "cpp_destructor_decl", 
  "cpp_conversion_operator", "cpp_catch_decl", "cpp_protection_decl", 
  "cpp_nested", "@10", "@11", "nested_decl", "cpp_swig_directive", 
  "cpp_end", "cpp_vend", "anonymous_bitfield", "storage_class", "parms", 
  "rawparms", "ptail", "parm", "valparms", "rawvalparms", "valptail", 
  "valparm", "def_args", "parameter_declarator", 
  "typemap_parameter_declarator", "declarator", "notso_direct_declarator", 
  "direct_declarator", "abstract_declarator", 
  "direct_abstract_declarator", "pointer", "type_qualifier", 
  "type_qualifier_raw", "type", "rawtype", "type_right", "primitive_type", 
  "primitive_type_list", "type_specifier", "definetype", "@12", "ename", 
  "enumlist", "edecl", "etype", "expr", "exprnum", "exprcompound", 
  "inherit", "raw_inherit", "@13", "base_list", "base_specifier", 
  "access_specifier", "cpptype", "opt_virtual", "cpp_const", "ctor_end", 
  "ctor_initializer", "mem_initializer_list", "mem_initializer", 
  "template_decl", "idstring", "idstringopt", "idcolon", "idcolontail", 
  "idtemplate", "idcolonnt", "idcolontailnt", "string", "stringbrace", 
  "options", "kwargs", "stringnum", "empty", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const unsigned short yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const unsigned char yyr1[] =
{
       0,   112,   113,   113,   113,   113,   113,   114,   114,   115,
     115,   115,   115,   115,   115,   115,   116,   116,   116,   116,
     116,   116,   116,   116,   116,   116,   116,   116,   116,   116,
     116,   116,   116,   116,   116,   116,   116,   118,   117,   119,
     120,   121,   121,   121,   122,   122,   123,   123,   123,   123,
     124,   124,   126,   125,   127,   127,   128,   128,   129,   129,
     129,   129,   130,   131,   131,   132,   132,   133,   133,   134,
     134,   135,   135,   136,   136,   136,   137,   137,   138,   138,
     138,   138,   139,   139,   139,   140,   141,   141,   142,   142,
     142,   143,   144,   145,   145,   146,   146,   146,   147,   148,
     149,   150,   150,   150,   151,   152,   152,   152,   153,   153,
     153,   153,   154,   154,   155,   156,   156,   156,   156,   156,
     156,   158,   157,   159,   157,   160,   160,   161,   163,   162,
     162,   164,   164,   164,   164,   164,   165,   166,   166,   168,
     167,   169,   167,   167,   170,   171,   170,   170,   172,   170,
     173,   173,   173,   173,   173,   173,   173,   173,   173,   173,
     173,   173,   173,   173,   173,   173,   174,   175,   175,   176,
     176,   176,   177,   178,   178,   178,   180,   179,   181,   179,
     182,   182,   183,   183,   183,   183,   183,   183,   183,   183,
     183,   183,   183,   184,   184,   185,   185,   185,   186,   187,
     187,   187,   187,   187,   187,   187,   188,   189,   189,   190,
     190,   191,   191,   191,   192,   193,   193,   194,   194,   195,
     195,   195,   196,   196,   196,   196,   196,   197,   197,   197,
     198,   198,   198,   199,   199,   199,   199,   199,   199,   199,
     199,   200,   200,   200,   200,   200,   200,   200,   200,   201,
     201,   201,   201,   201,   201,   201,   201,   202,   202,   202,
     202,   202,   202,   202,   202,   202,   202,   203,   203,   203,
     203,   203,   203,   203,   204,   204,   204,   204,   205,   205,
     206,   206,   207,   208,   208,   209,   209,   209,   209,   209,
     209,   209,   209,   209,   210,   211,   211,   212,   212,   212,
     212,   212,   212,   212,   212,   214,   213,   213,   215,   215,
     216,   216,   217,   217,   217,   218,   218,   219,   219,   219,
     219,   219,   219,   219,   219,   219,   219,   220,   220,   220,
     220,   220,   220,   220,   221,   221,   221,   221,   221,   221,
     221,   221,   221,   221,   221,   221,   221,   221,   221,   221,
     222,   224,   223,   223,   225,   225,   226,   226,   227,   227,
     227,   228,   228,   228,   228,   229,   229,   230,   230,   230,
     230,   231,   231,   231,   231,   231,   232,   232,   233,   233,
     234,   235,   235,   236,   236,   237,   237,   238,   238,   238,
     238,   238,   238,   239,   239,   239,   239,   240,   241,   241,
     241,   241,   241,   241,   242,   242,   242,   242,   243,   243,
     244,   244,   244,   245,   245,   246,   246,   246,   246,   247,
     247,   248
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const unsigned char yyr2[] =
{
       0,     2,     1,     3,     2,     3,     2,     2,     1,     1,
       1,     1,     1,     1,     1,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     7,     5,
       3,     5,     5,     3,     2,     2,     5,     2,     5,     2,
       5,     5,     0,     7,     1,     1,     2,     2,     1,     5,
       5,     5,     3,     4,     3,     7,     8,     5,     3,     1,
       1,     3,     1,     4,     7,     6,     1,     1,     7,     9,
       5,     7,     1,     1,     5,     7,     1,     3,     6,     6,
       8,     1,     2,     3,     1,     2,     3,     6,     5,     9,
       2,     1,     1,     5,     5,     1,     4,     1,     1,     2,
       5,     6,     7,     8,     6,     1,     1,     1,     1,     1,
       1,     0,     9,     0,     8,     1,     2,     4,     0,     6,
       3,     1,     1,     1,     1,     1,     1,     3,     4,     0,
       6,     0,     5,     5,     2,     0,     6,     1,     0,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     1,
       1,     1,     1,     1,     1,     1,     6,     6,     7,     8,
       8,     7,     5,     2,     2,     2,     0,     7,     0,     6,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     2,     4,     2,     5,     1,
       2,     1,     1,     1,     1,     1,     1,     2,     1,     3,
       1,     2,     6,     3,     1,     2,     1,     3,     1,     1,
       1,     1,     2,     3,     2,     2,     1,     2,     2,     1,
       1,     1,     1,     2,     3,     1,     2,     3,     4,     5,
       4,     1,     2,     3,     4,     5,     3,     4,     4,     1,
       2,     4,     4,     5,     3,     4,     4,     1,     2,     2,
       3,     1,     2,     1,     2,     3,     4,     3,     4,     2,
       3,     3,     4,     3,     3,     2,     2,     1,     1,     2,
       1,     1,     1,     2,     1,     1,     1,     1,     2,     2,
       1,     2,     1,     2,     1,     1,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     2,     1,     1,     1,
       3,     1,     1,     3,     1,     1,     1,     1,     1,     5,
       1,     1,     3,     4,     5,     5,     6,     1,     1,     1,
       1,     1,     1,     1,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     2,     2,     2,     2,     2,
       1,     0,     3,     1,     1,     3,     2,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     4,     5,
       1,     3,     3,     4,     4,     3,     2,     1,     1,     3,
       2,     3,     1,     1,     1,     1,     1,     2,     4,     1,
       3,     1,     3,     3,     2,     2,     2,     2,     2,     4,
       1,     3,     1,     3,     3,     2,     2,     2,     2,     1,
       1,     1,     1,     3,     1,     3,     5,     1,     3,     1,
       1,     0
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const unsigned short yydefact[] =
{
     421,     0,     0,     0,     0,     8,     4,   421,   297,   304,
     298,   299,   301,   302,   300,   287,   303,   286,   421,   290,
       0,   280,   281,   362,   363,     0,   361,   364,     0,     0,
     391,     0,     0,   278,   421,   284,   285,   294,   295,     0,
     292,   389,     6,     0,     1,    13,    58,    54,    55,     0,
     202,    12,   199,   421,     0,     0,    76,    77,   421,   421,
       0,     0,   201,   203,   204,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       7,     9,    16,    17,    18,    19,    20,    21,    22,    23,
     421,    24,    25,    26,    27,    28,    29,    30,     0,    31,
      32,    33,    34,    35,    36,    10,   101,   102,    14,    11,
     115,   116,   117,   118,   119,   120,     0,   205,   421,   397,
     382,   288,     0,   289,     0,     0,     3,   283,   279,   421,
     305,     0,     0,   263,   277,     0,   229,   211,   421,   235,
     421,   261,   257,   249,   226,   291,   296,   293,     0,     0,
     387,     5,    15,     0,   409,   200,     0,     0,   414,     0,
     421,     0,   282,     0,     0,     0,     0,    72,     0,   421,
     421,     0,     0,   421,   141,     0,     0,    56,    57,     0,
       0,    49,    47,    44,    45,   421,     0,   421,     0,   421,
     421,     0,   100,   421,   421,     0,     0,     0,     0,     0,
       0,   249,   421,     0,     0,   221,   327,   328,   329,   330,
     331,   332,   333,   219,     0,   214,   421,   220,   216,   213,
     392,   390,     0,   421,   263,     0,   206,   421,     0,   257,
     292,   208,   307,   224,     0,   222,     0,     0,     0,   269,
       0,     0,     0,     0,   321,     0,   317,   320,   318,   225,
     421,     0,   236,   262,   241,   275,   276,   250,   227,   421,
       0,   228,   421,     0,   259,   233,   258,   241,   264,   396,
     395,   394,   383,     0,   384,   408,   421,   417,     0,    62,
      43,   305,     0,   421,    64,     0,     0,     0,    68,     0,
       0,     0,    86,     0,     0,   137,     0,   421,   139,     0,
       0,    91,     0,     0,     0,    95,   230,   231,   232,    40,
       0,    92,    94,   385,     0,   386,     0,     0,     0,   136,
     130,     0,   421,     0,     0,     0,     0,     0,     0,     0,
     241,     0,   421,     0,   309,   421,   421,   123,   293,   381,
       0,   215,   218,   388,     0,   263,   257,   292,     0,   249,
     273,     0,   207,   210,   271,   259,     0,   249,   264,   223,
     306,     0,     0,   345,   346,   348,   347,   349,   270,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     257,   292,   242,   421,     0,   274,     0,   254,     0,     0,
     267,     0,   234,   260,   265,     0,   237,   393,     0,     0,
       0,     0,   413,     0,     0,    63,    37,    71,     0,     0,
       0,     0,     0,     0,   138,     0,     0,   421,   421,     0,
       0,    96,     0,   421,     0,     0,     0,   128,    52,     0,
       0,     0,     0,    73,     0,   421,     0,   292,     0,     0,
     108,   421,     0,   127,   351,     0,   350,   353,   421,     0,
       0,   264,   252,   421,   251,   265,     0,   322,     0,   277,
       0,   421,   344,   343,   339,   340,   338,   342,   341,   335,
     334,   337,   336,     0,   241,   243,   264,     0,   246,     0,
     256,   255,   272,   268,     0,   238,   266,   240,    60,    61,
      59,   103,   418,   420,   419,   415,    41,    42,     0,    70,
      67,    69,   412,    83,   411,     0,    80,   421,   410,    82,
       0,    87,   421,   172,   143,   142,     0,   199,     0,     0,
      48,    46,   421,    39,    93,   400,     0,   402,     0,    50,
      51,    98,   421,   421,   421,     0,     0,   312,     0,   311,
     314,   421,   421,     0,   105,   107,   104,     0,   109,   148,
     165,     0,     0,     0,     0,   203,     0,   190,   191,   183,
     192,   188,   184,   182,   185,   186,   187,   189,   162,   163,
     150,   156,   160,   159,     0,     0,   151,   152,   155,   161,
     153,   157,   154,   164,     0,   205,   421,   121,   217,   212,
     209,   253,   323,     0,   276,     0,     0,     0,   244,     0,
     248,   247,   239,     0,     0,   421,     0,   367,     0,   370,
       0,     0,   140,   200,   421,     0,    89,     0,    88,     0,
       0,     0,   398,     0,   421,   131,   132,   135,   134,   129,
     133,     0,     0,     0,    75,     0,   421,     0,   421,   305,
     421,   114,     0,   421,   421,     0,   145,   174,   173,   175,
       0,     0,     0,   144,     0,     0,     0,   292,   365,   352,
     354,     0,   366,     0,   325,   324,     0,   319,   245,   416,
      38,     0,   421,     0,    78,    81,   421,    85,    65,     0,
       0,    97,   407,   405,   406,   401,   403,     0,     0,    53,
      74,   316,   313,   315,   310,   112,     0,     0,     0,     0,
       0,   377,   421,     0,     0,   149,     0,     0,   421,     0,
       0,   421,     0,   421,   178,   293,   158,   421,   359,   358,
     360,   421,   356,     0,   326,     0,     0,   421,     0,    66,
      90,   404,   399,     0,   113,     0,   375,   376,   378,     0,
     371,   372,   110,   106,   421,     0,   421,     0,   124,   421,
       0,     0,     0,     0,   176,   421,   355,     0,     0,    84,
     368,     0,    79,    99,   373,   374,     0,   380,   111,     0,
       0,   421,     0,   421,   421,   421,   198,   421,     0,   180,
     181,   357,   125,   122,     0,   369,   379,   146,   421,   167,
       0,   421,     0,     0,   166,     0,   179,   126,   168,     0,
     193,   194,   171,   421,   421,   177,   195,   197,   305,   170,
     169,     0,   196
};

/* YYDEFGOTO[NTERM-NUM]. */
static const short yydefgoto[] =
{
      -1,     3,     4,    80,    81,    82,   498,   557,   558,   559,
     560,    87,    88,    89,   533,    90,    91,   561,    93,   562,
      95,   563,   500,   166,   564,    98,   565,   506,   566,   291,
     567,   300,   188,   311,   189,   102,   568,   569,   570,   106,
     546,   439,   107,   108,   109,   110,   663,   442,   783,   571,
     572,   532,   629,   318,   573,   114,   417,   297,   574,   706,
     645,   575,   576,   577,   578,   579,   580,   581,   777,   755,
     778,   582,   789,   798,   583,   584,   225,   226,   352,   227,
     214,   215,   341,   216,   136,   137,   305,   336,   252,   139,
     228,   141,   200,    32,    33,   244,   162,    35,    36,    37,
      38,   235,   236,   333,   538,   539,   692,   466,   246,   247,
     445,   446,   586,   659,   660,   721,    39,   661,   799,   641,
     700,   737,   738,   119,   277,   314,    40,   150,    41,   528,
     622,   248,   509,   157,   278,   495,   231
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -615
static const short yypact[] =
{
     364,  2764,  2807,    42,  2339,  -615,  -615,   -28,  -615,  -615,
    -615,  -615,  -615,  -615,  -615,  -615,  -615,  -615,   -28,  -615,
      74,  -615,  -615,  -615,  -615,   249,  -615,  -615,     9,    -1,
    -615,   113,  3270,   483,   762,   483,  -615,  -615,   812,   249,
    -615,    88,  -615,   117,  -615,   115,  -615,  -615,  -615,   211,
    -615,  -615,   185,   217,  2850,   237,  -615,  -615,   217,   246,
     269,   298,  -615,  -615,  -615,   308,    45,   183,   349,    98,
     377,   326,   313,  3102,  3102,   401,   408,   185,   440,   467,
    -615,  -615,  -615,  -615,  -615,  -615,  -615,  -615,  -615,  -615,
     217,  -615,  -615,  -615,  -615,  -615,  -615,  -615,   889,  -615,
    -615,  -615,  -615,  -615,  -615,  -615,  -615,  -615,  -615,  -615,
    -615,  -615,  -615,  -615,  -615,  -615,  3144,  -615,  2976,  -615,
    -615,  -615,   444,  -615,    23,   500,  -615,   483,  -615,  2100,
      30,  1457,   280,    62,   178,   249,  -615,  -615,   160,    24,
     160,   231,   105,   405,  -615,  -615,  -615,  -615,   494,    35,
    -615,  -615,  -615,   460,  -615,    29,   460,   460,  -615,   471,
      44,   954,  -615,   284,   249,   528,   532,  -615,   460,  3018,
    3060,   249,   522,    63,  -615,   514,   558,  -615,  -615,   460,
     560,  -615,  -615,  -615,   565,  3060,   541,   108,   549,   571,
     460,   460,   565,  3060,  3060,   249,   185,   266,   192,   460,
     138,   502,   260,  1013,   342,  -615,  -615,  -615,  -615,  -615,
    -615,  -615,  -615,  -615,   510,  -615,   573,  -615,  -615,  -615,
    -615,    88,   525,  2190,    65,   580,  -615,   590,   596,   517,
     544,  -615,  -615,  -615,   954,  -615,  2057,  2057,   603,  -615,
    2057,  2057,  2057,  2057,   604,  1176,  -615,  -615,   565,  -615,
    2190,   249,   263,   231,  -615,  -615,   534,  -615,  -615,  3060,
    1557,  -615,  3060,  1657,    62,   263,   231,   562,   651,  -615,
    -615,    88,  -615,   615,   565,  -615,  -615,   202,   623,  -615,
    -615,   655,   252,   160,  -615,   624,   632,   638,   628,   507,
     640,   648,  -615,   654,   657,  -615,   249,  -615,  -615,   656,
     660,  -615,   663,   664,  3102,  -615,  -615,  -615,  -615,  -615,
    3102,  -615,  -615,  -615,   675,  -615,   677,   678,   606,  -615,
    -615,    99,    -9,   293,   293,   682,   643,    96,   693,   192,
     653,   651,    -8,   692,  -615,  2244,   513,  -615,   130,  -615,
    2976,  -615,  -615,  -615,   500,   299,   646,   670,   359,  -615,
    -615,  3060,  -615,  -615,  -615,   299,   433,   674,   293,  -615,
    1421,  1136,  3186,  -615,  -615,  -615,  -615,  -615,  -615,  2057,
    2057,  2057,  2057,  2057,  2057,  2057,  2057,  2057,  2057,  2057,
     719,   -11,  -615,  3060,  1757,  -615,   708,  -615,  1214,   714,
    -615,  1241,   263,   231,  1099,   192,   263,  -615,   383,  2425,
     460,   923,  -615,   715,   730,  -615,  -615,  -615,   380,   255,
     460,  3060,   954,   711,  -615,   734,  2511,  -615,   555,  3102,
     451,   741,   740,   571,   368,   164,   745,  -615,  -615,   226,
     293,   192,    14,  -615,   750,   777,   754,   643,   751,   582,
    -615,   244,  1366,  -615,  -615,   748,  -615,  -615,   573,   249,
     674,  -615,  -615,   590,  -615,   299,   459,  2057,  1068,  1857,
      31,   762,   920,  1201,   899,  1035,  1112,   619,   619,   439,
     439,  -615,  -615,   468,   674,  -615,   192,   764,  -615,  1527,
    -615,  -615,  -615,  -615,   192,   263,   231,   263,  -615,  -615,
     565,  -615,  -615,  -615,   565,   765,  -615,  -615,  1366,  -615,
    -615,   565,  -615,  -615,  -615,   768,  -615,   241,   565,  -615,
     770,  -615,   241,  -615,  -615,  -615,  2597,   185,  3228,   366,
    -615,  -615,  3060,  -615,  -615,   143,   689,  -615,   726,  -615,
    -615,  -615,   592,  -615,   241,   215,   192,   769,   360,  -615,
    -615,   557,  3060,   954,  -615,  -615,  -615,   781,  -615,  -615,
    -615,   786,   757,   760,   763,   705,   494,  -615,  -615,  -615,
    -615,  -615,  -615,  -615,  -615,  -615,  -615,  -615,  -615,  -615,
    -615,  -615,  -615,  -615,   805,  1366,  -615,  -615,  -615,  -615,
    -615,  -615,  -615,  -615,  2893,   810,   783,  -615,  -615,  -615,
    -615,  -615,  1421,  2057,  2295,  2057,   820,   821,  -615,   470,
    -615,  -615,   263,   460,   817,  3060,   827,   793,   173,  -615,
     219,   831,  -615,   565,    60,   954,  -615,  3102,  -615,   834,
     864,    36,  -615,    66,  2976,  -615,  -615,  -615,  -615,  -615,
    -615,  3186,  2683,   839,  -615,  1957,   777,   300,  3060,   655,
     811,  -615,   842,   513,  3060,  1366,  -615,  -615,  -615,  -615,
     494,   846,   954,  -615,  3186,   867,   358,   844,  -615,   848,
    -615,   784,  -615,  1366,  1421,  1421,  2057,  -615,  -615,  -615,
    -615,   850,  3060,   852,  -615,  -615,   241,  -615,  -615,   851,
     854,  -615,  -615,   143,  -615,   143,  -615,   803,  1104,  -615,
    -615,  -615,  -615,  1421,  -615,  -615,   582,   857,   856,   249,
     542,  -615,   160,   582,   861,  -615,  1366,   863,  3060,   582,
      75,  2244,   886,     4,  -615,   869,  -615,   783,  -615,  -615,
    -615,   783,  -615,   866,  1421,   878,   882,  3060,   881,  -615,
    -615,  -615,  -615,   883,  -615,   605,  -615,   885,  -615,   892,
    -615,  -615,  -615,  -615,   160,   887,  3060,   894,  -615,  3060,
     893,   902,   898,   907,  -615,   954,  -615,   249,   877,  -615,
    -615,   914,  -615,  -615,  -615,  -615,   249,  -615,  -615,  1366,
     915,   241,   916,  3060,  3060,   557,  -615,   954,   917,  -615,
    -615,  -615,  -615,  -615,   582,  -615,  -615,  -615,   241,  -615,
     627,   241,   921,   922,  -615,   924,  -615,  -615,  -615,   331,
    -615,  -615,  -615,   241,   241,  -615,  -615,  -615,   655,  -615,
    -615,   927,  -615
};

/* YYPGOTO[NTERM-NUM].  */
static const short yypgoto[] =
{
    -615,  -615,  -212,  -615,  -615,  -615,  -615,     6,    12,    20,
      28,  -615,  -615,  -615,  -615,  -615,  -615,    39,  -615,    46,
    -615,    52,  -615,  -615,    53,  -615,    58,   365,    68,  -615,
      71,  -615,  -289,   543,   -67,  -615,    73,    76,    79,   443,
    -614,   329,  -615,  -615,  -615,   447,  -615,  -615,  -615,    -2,
       5,  -615,  -615,  -615,    80,  -615,  -615,  -615,  -465,  -615,
    -615,  -615,   448,  -615,  -615,    87,  -615,  -615,  -615,  -615,
     206,  -615,  -615,  -379,  -615,    -3,   625,   794,   536,    26,
     363,  -615,   545,   652,   -91,   530,  -615,    64,   576,  -199,
     -21,   -81,   -12,   -30,  -615,   -37,    43,   -24,  -615,   957,
    -615,  -270,  -615,  -615,  -615,   361,  -615,   659,  -106,  -615,
    -615,  -615,  -615,  -615,   294,  -615,   -65,   291,  -420,   238,
    -615,  -615,   248,   997,   -34,  -615,   533,  -201,   -48,  -615,
    -252,   753,   520,    91,  -160,  -615,     0
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -422
static const short yytable[] =
{
       5,   116,   111,   128,   117,   145,   186,   120,   127,   112,
      83,   403,   217,   140,   195,   422,    84,   161,   120,   301,
     343,   475,   142,  -383,    85,   348,     7,    31,    43,  -308,
     356,   316,    86,   604,   144,   275,   187,   187,     7,   683,
     232,   754,    44,    92,    34,    34,   475,   258,     7,   261,
      94,   204,   253,   158,   118,   259,    96,    97,   158,   167,
     222,   266,    99,   595,   399,     7,   276,   233,     7,   685,
     397,   260,   100,   118,   118,   101,   221,   103,   476,   203,
     104,   125,   734,   105,   113,   416,   118,   608,   281,   743,
     158,   115,   611,   250,   678,   748,   129,   145,   138,     7,
     269,   271,   177,   536,   256,   275,   749,   296,     7,   131,
     653,     7,   131,   122,   633,   220,   171,   229,   218,   273,
     124,   640,   255,   279,   348,   356,   118,   270,   684,   285,
     519,   234,   596,    28,   289,   178,   250,    30,   144,   129,
     144,     7,   118,   253,   213,   118,   428,   126,   266,   164,
      28,   151,   131,    28,    30,   131,   313,    30,   686,   456,
     120,    34,   199,   325,   443,   328,   307,  -421,   529,   327,
     797,   251,    34,   120,   135,   142,   750,   502,   148,   154,
     705,   196,   134,   393,    28,   324,   173,   308,    30,   312,
     315,   154,   404,    28,   444,     7,    28,    30,   723,   149,
      30,   530,   334,   134,   130,   516,   264,   503,   152,   133,
     504,   346,    34,    34,   251,   134,   342,   135,    21,    22,
     174,   275,     7,   327,   132,   283,    28,   353,    34,     7,
      30,   456,   154,   620,   217,   400,    34,    34,   380,   329,
     492,   745,   153,   423,   385,   440,   401,   251,   156,   634,
     282,   306,     7,   675,   621,     7,   728,   282,     7,   502,
     505,   154,   262,   332,   253,   266,    34,   187,   163,   322,
     324,    28,   154,   187,   393,    30,     5,   165,   263,   449,
      28,    21,    22,   144,    30,   134,   282,   272,   130,   503,
     154,   249,   504,    34,   383,   493,     7,     5,   359,   266,
     168,   251,    34,     7,   787,    34,   441,    28,   132,   606,
     384,    30,   547,   486,    28,   431,   284,   183,    30,   154,
     198,   632,   120,   324,   282,   461,   134,   198,   135,   169,
     223,   282,   120,   134,   695,   135,   144,    28,   447,   170,
      28,    30,   505,    28,    30,     7,   131,    30,    28,   460,
     548,   790,    30,   323,    28,   640,   198,   180,    30,   134,
     181,   713,   134,   182,   135,   806,   213,   323,   807,   698,
     502,   525,   154,   134,   486,   808,   510,   453,    34,   337,
     176,    28,   187,    34,   499,    30,   154,   488,    28,   154,
     259,   452,    30,   636,    34,   714,   116,   111,   637,   117,
     616,   198,   135,   504,   112,    83,   260,   134,   179,   135,
     617,    84,   802,   116,   111,   518,   117,     5,   117,    85,
     489,   112,    83,   312,   809,   810,    34,    86,    84,   594,
      28,   731,   190,   732,    30,   540,    85,   511,    92,   191,
     140,   144,   585,   669,    86,    94,    28,   255,   342,   142,
      30,    96,    97,   353,    34,    92,   526,    99,     1,     2,
     527,   144,    94,   272,   259,   454,   154,   100,    96,    97,
     101,   193,   103,   507,    99,   104,   512,   607,   105,   113,
     260,   615,   607,   219,   100,   520,   115,   101,   521,   103,
     259,   591,   104,   534,   268,   105,   113,     7,   585,   383,
     598,   383,   668,   115,   607,   280,   260,   609,   651,    23,
      24,   607,   609,   116,   111,   384,   117,   384,   217,   656,
       7,   112,    83,    21,    22,   138,    26,    27,    84,   631,
     627,   287,   117,     5,   609,   288,    85,   628,   811,   409,
     410,   609,    23,    24,    86,   378,   379,   655,   129,   194,
     680,   298,   440,    21,    22,    92,   295,   130,   123,    26,
      27,   299,    94,   302,   131,    34,   204,   143,    96,    97,
     127,   275,   147,    50,    99,   585,   740,   132,   304,   741,
     187,   438,   385,   309,   100,    34,   662,   101,   638,   103,
     517,   331,   104,   339,   688,   105,   113,    21,    22,   172,
     175,   639,   707,   115,   310,    28,   340,   643,   344,    30,
      50,   742,   350,   441,   120,   543,   544,   710,   355,   545,
      62,    63,    64,   351,   218,   606,   135,   517,   354,   116,
     111,   201,   117,   358,   362,   367,   540,   112,    83,   764,
     701,   134,   765,   144,    84,   585,   607,   398,    34,     7,
     213,   394,    85,   768,     7,   402,   405,    62,    63,    64,
      86,   800,   230,   585,   801,   232,   254,    34,   257,   406,
     407,    92,   408,   411,   676,   267,   609,   223,    94,   679,
     412,    34,   327,    79,    96,    97,   413,    34,   418,   427,
      99,   414,   419,   131,   201,   420,   421,   286,   751,   324,
     100,   696,   144,   101,   294,   103,   585,   424,   104,   425,
     426,   105,   113,   120,   429,    34,   709,   662,   265,   115,
     143,   662,     7,   376,   377,   378,   379,   433,   320,   435,
     326,   254,   430,   330,    28,   123,   201,   338,    30,    28,
     480,   607,   434,    30,   144,   607,   482,   355,   513,   496,
     250,    34,   395,     7,    34,   780,   347,   349,   607,   451,
     251,   607,   357,   455,   497,     7,   131,   201,   514,   585,
      34,   609,   522,   607,   607,   609,   265,   780,   523,   531,
     537,   327,   542,   381,   382,   587,   541,     7,   609,    34,
     245,   609,    34,   129,   292,   293,   600,   254,   603,   605,
     623,   254,   610,   609,   609,   155,   130,    28,   624,   131,
     303,    30,   644,   635,   650,   326,    34,    34,   317,   779,
     355,   647,   784,   646,   648,   184,   132,   649,   251,   415,
     192,     8,     9,    10,    11,    12,    13,    14,    28,    16,
     392,   779,    30,   652,   396,   718,   719,   720,  -147,   658,
      28,   484,   666,   667,    30,   670,   349,   349,   672,   251,
     432,   673,   254,   133,   254,   677,   681,   682,   437,   134,
       7,   135,    28,   690,   702,   699,    30,   708,   716,   450,
       7,   717,   725,   727,   386,   729,   733,   389,   730,   735,
     736,   349,     7,   744,   746,   360,   361,   753,   711,   363,
     364,   365,   366,   443,   758,   392,   274,   396,   282,   274,
     274,   782,   759,   474,   760,   762,   274,   763,   766,   388,
     197,   274,   391,   767,   773,   769,   771,   254,   254,   154,
     775,   712,   274,   774,   206,   207,   208,   209,   210,   211,
     212,   776,   201,   274,   274,   201,   785,   788,   791,   321,
     274,   796,   274,   803,   804,    28,   473,     7,   805,    30,
     436,   812,   201,   349,   254,    28,   524,   254,   198,    30,
     485,   487,   703,   674,   134,   625,   135,    28,   198,   626,
     630,    30,   589,   795,   134,   282,   135,   687,   319,   590,
     198,   597,   448,   588,   143,   146,   134,   694,   135,   372,
     373,   374,   375,   376,   377,   378,   379,   473,   477,   254,
     485,   756,   757,   794,   786,   121,     7,   254,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   462,   463,
     464,   465,     0,   467,   468,   469,   470,   471,   472,   618,
       0,     0,    28,   479,   335,     0,    30,     0,     0,     0,
       0,     0,   599,     0,     0,   198,     0,     0,     0,     0,
     602,   134,     0,   135,     0,     0,     0,     0,     0,   254,
       0,     7,     0,     0,   154,     0,   201,     0,     0,   206,
     207,   208,   209,   210,   211,   212,     0,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,   237,
     593,    28,     7,     0,     0,    30,     0,     7,    21,    22,
      23,    24,   599,   238,   198,     0,   592,   657,   472,     0,
     134,     0,   135,     0,     0,     0,    25,    26,    27,     0,
     250,     0,     0,     0,     0,   711,   373,   374,   375,   376,
     377,   378,   379,   201,     0,     0,   131,   619,   201,     0,
       0,   490,     0,   274,   494,     0,    28,     0,     0,     0,
      30,   501,   508,   274,     0,     0,     0,   642,   457,     0,
     201,     0,   240,   241,     0,     0,   242,   243,     0,     0,
       0,     0,   535,     0,     0,   201,     0,    28,   201,   715,
       0,    30,    28,     0,   722,     0,    30,     0,     0,     0,
     484,     0,     0,     0,     0,   198,     0,     0,   251,     0,
       0,   134,     0,   135,   374,   375,   376,   377,   378,   379,
       0,   201,     0,     0,   368,     0,     0,     0,     0,     0,
     671,     0,   739,   369,   370,   371,   372,   458,   374,   375,
     376,   377,   378,   459,   437,     0,     0,     0,     0,     0,
       0,     0,   664,     0,   665,     0,     0,     0,     0,     0,
       0,     0,   481,   697,     0,     0,     0,     0,     0,   704,
     613,     0,   508,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,     0,     0,     0,     0,   201,   483,
     781,   201,     0,     0,   693,     0,     0,   726,     0,   739,
     371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
     201,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,     0,     0,     0,   724,     0,     0,     0,     0,
       0,     0,     0,   747,     0,     0,   752,     0,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
       0,     0,   761,     0,     0,     0,   274,     0,     0,     0,
       0,   508,     0,     0,     0,     0,     0,   549,     0,  -421,
      46,   770,     0,     0,   772,    49,     0,     0,     0,     0,
       0,     0,     0,     0,    50,  -421,  -421,  -421,  -421,  -421,
    -421,  -421,  -421,  -421,  -421,  -421,  -421,     0,   792,   793,
     550,    52,     0,     0,  -421,     0,  -421,  -421,  -421,  -421,
       0,     0,     0,     0,     0,     0,    54,    55,    56,    57,
     551,    59,    60,    61,  -421,  -421,  -421,   552,   553,   554,
       0,    62,   555,    64,     0,    65,    66,     0,     0,     0,
      70,     0,    72,    73,    74,    75,     0,    77,     0,     0,
       0,     0,     0,     0,  -421,     0,     0,    79,  -421,  -421,
       7,     0,     0,   154,     0,     0,     0,     0,   206,   207,
     208,   209,   210,   211,   212,   556,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,   237,     0,
       0,     0,     0,     0,     0,     0,     0,    21,    22,    23,
      24,     0,   238,     0,     0,   239,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    25,    26,    27,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    28,     0,     0,     0,    30,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       7,   240,   241,   154,     0,   242,   243,     0,   206,   207,
     208,   209,   210,   211,   212,   601,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,   237,     0,
       0,     0,     0,     0,     0,     0,     0,    21,    22,    23,
      24,     0,   238,     0,     0,   387,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    25,    26,    27,     0,     0,
       0,     0,     0,     0,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    28,     0,     0,     0,    30,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       7,   240,   241,   154,     0,   242,   243,     0,   206,   207,
     208,   209,   210,   211,   212,     0,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,   237,     0,
       0,     0,     0,     0,     0,     0,     0,    21,    22,    23,
      24,     0,   238,     0,     0,   390,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    28,     0,     0,     0,    30,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       7,   240,   241,   154,     0,   242,   243,     0,   206,   207,
     208,   209,   210,   211,   212,     0,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,   237,     0,
       0,     0,     0,     0,     0,     0,     0,    21,    22,    23,
      24,     0,   238,     0,     0,   478,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    28,     0,     0,     0,    30,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       7,   240,   241,   154,     0,   242,   243,     0,   206,   207,
     208,   209,   210,   211,   212,     0,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,   237,     0,
       0,     0,     0,     0,     0,     0,     0,    21,    22,    23,
      24,     0,   238,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    28,     0,     0,     0,    30,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       7,   240,   241,   154,   134,   242,   243,   691,   206,   207,
     208,   209,   210,   211,   212,     0,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,   237,     0,
       0,     0,     0,     0,     0,     0,     0,    21,    22,    23,
      24,     0,   238,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    28,     0,     0,     0,    30,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       7,   240,   241,   154,     0,   242,   243,     0,   206,   207,
     208,   209,   210,   211,   212,     0,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,   237,     0,
       0,     0,     0,     0,     0,     0,     0,    21,    22,    23,
      24,     0,   238,     7,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    25,    26,    27,     0,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,   223,     0,     0,     0,     0,     0,     0,     0,    20,
      21,    22,    23,    24,     0,    28,     0,   131,     0,    30,
       0,     0,     0,     0,     0,     0,     0,     0,    25,    26,
      27,   240,   241,     0,     0,   242,   243,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    28,     0,
       0,    29,    30,     7,     0,     0,     0,     0,     0,     0,
       0,   224,     0,     0,     0,     0,     0,   134,     0,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,   223,     0,     0,     0,     0,     0,     0,     0,    20,
      21,    22,    23,    24,     0,     0,     0,   131,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     7,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,     0,     0,     0,    28,     0,
       0,    29,    30,    20,    21,    22,    23,    24,     0,     0,
       0,   345,     0,     0,     0,     0,     0,   134,     7,     0,
       0,     0,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,     0,     0,     0,     0,
       0,     0,    28,     0,     0,    29,    30,    23,    24,    -2,
      45,     0,  -421,    46,     0,   323,    47,    48,    49,     0,
       0,   134,     0,    25,    26,    27,     0,    50,  -421,  -421,
    -421,  -421,  -421,  -421,  -421,  -421,  -421,  -421,  -421,  -421,
       0,     0,     0,    51,    52,     0,     0,     0,     0,  -421,
    -421,  -421,  -421,    28,     0,    53,     0,    30,     0,    54,
      55,    56,    57,    58,    59,    60,    61,  -421,  -421,  -421,
       0,     0,   134,     0,    62,    63,    64,     0,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,     0,     0,     0,     0,    78,    45,  -421,  -421,    46,
      79,  -421,    47,    48,    49,     0,     0,     0,     0,     0,
       0,     0,     0,    50,  -421,  -421,  -421,  -421,  -421,  -421,
    -421,  -421,  -421,  -421,  -421,  -421,     0,     0,     0,    51,
      52,     0,     0,   491,     0,  -421,  -421,  -421,  -421,     0,
       0,    53,     0,     0,     0,    54,    55,    56,    57,    58,
      59,    60,    61,  -421,  -421,  -421,     0,     0,     0,     0,
      62,    63,    64,     0,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,     0,     0,     0,
       0,    78,    45,  -421,  -421,    46,    79,  -421,    47,    48,
      49,     0,     0,     0,     0,     0,     0,     0,     0,    50,
    -421,  -421,  -421,  -421,  -421,  -421,  -421,  -421,  -421,  -421,
    -421,  -421,     0,     0,     0,    51,    52,     0,     0,   515,
       0,  -421,  -421,  -421,  -421,     0,     0,    53,     0,     0,
       0,    54,    55,    56,    57,    58,    59,    60,    61,  -421,
    -421,  -421,     0,     0,     0,     0,    62,    63,    64,     0,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,     0,     0,     0,     0,    78,    45,  -421,
    -421,    46,    79,  -421,    47,    48,    49,     0,     0,     0,
       0,     0,     0,     0,     0,    50,  -421,  -421,  -421,  -421,
    -421,  -421,  -421,  -421,  -421,  -421,  -421,  -421,     0,     0,
       0,    51,    52,     0,     0,   612,     0,  -421,  -421,  -421,
    -421,     0,     0,    53,     0,     0,     0,    54,    55,    56,
      57,    58,    59,    60,    61,  -421,  -421,  -421,     0,     0,
       0,     0,    62,    63,    64,     0,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,     0,
       0,     0,     0,    78,    45,  -421,  -421,    46,    79,  -421,
      47,    48,    49,     0,     0,     0,     0,     0,     0,     0,
       0,    50,  -421,  -421,  -421,  -421,  -421,  -421,  -421,  -421,
    -421,  -421,  -421,  -421,     0,     0,     0,    51,    52,     0,
       0,     0,     0,  -421,  -421,  -421,  -421,     0,     0,    53,
       0,   689,     0,    54,    55,    56,    57,    58,    59,    60,
      61,  -421,  -421,  -421,     0,     0,     0,     0,    62,    63,
      64,     0,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,     6,     0,     7,     0,    78,
       0,  -421,     0,     0,    79,  -421,     0,     0,     0,     0,
       0,     0,     0,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,     0,     0,     0,     0,     0,
       0,     0,     0,    20,    21,    22,    23,    24,    42,     0,
       7,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    25,    26,    27,     0,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,     0,     0,
       0,     0,     0,     0,     0,     0,    20,    21,    22,    23,
      24,   159,    28,   160,     0,    29,    30,     0,     0,     0,
       0,     0,     0,     0,     0,    25,    26,    27,     0,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      21,    22,    23,    24,     0,    28,     7,     0,    29,    30,
       0,     0,     0,     0,     0,     0,     0,     0,    25,    26,
      27,     0,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    21,    22,    23,    24,     0,    28,     0,
       0,     0,    30,     0,     0,     0,     0,     0,     0,     0,
       0,   202,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     7,
       0,    28,   205,     0,     0,    30,   654,   206,   207,   208,
     209,   210,   211,   212,     0,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,     0,     0,     0,
       0,     0,     0,     0,     0,    20,    21,    22,    23,    24,
       0,     7,     0,     0,     0,     0,     0,     0,     0,   290,
       0,     0,     0,     0,    25,    26,    27,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,     0,
       0,     0,     0,     0,     0,     0,     0,    20,    21,    22,
      23,    24,     0,     7,    28,     0,     0,    29,    30,     0,
       0,     0,     0,     0,     0,     0,    25,    26,    27,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,     0,     0,     0,     0,     0,     0,     0,     0,    20,
      21,    22,    23,    24,     0,     7,    28,     0,     0,    29,
      30,     0,     0,     0,     0,     0,     0,     0,    25,    26,
      27,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,   185,     0,     0,     0,     0,     0,     0,
       0,     0,    21,    22,    23,    24,     0,     7,    28,     0,
       0,    29,    30,     0,     0,     0,     0,     0,     0,     0,
      25,    26,    27,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    21,    22,    23,    24,     0,     7,
      28,     0,     0,     0,    30,     0,     0,     0,     0,     0,
       0,     0,   202,    26,    27,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    21,    22,    23,    24,
       0,   614,    28,     0,     0,     0,    30,     0,     0,     0,
       0,     0,     0,     0,    25,    26,    27,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    21,    22,
      23,    24,     0,     7,    28,     0,     0,     0,    30,     0,
       0,     0,     0,     0,     0,     0,    25,    26,    27,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    23,    24,     0,     0,    28,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    28,     0,
       0,     0,    30
};

static const short yycheck[] =
{
       0,     4,     4,    33,     4,    35,    73,     7,    32,     4,
       4,   281,   118,    34,    79,   304,     4,    54,    18,   179,
     221,    32,    34,    32,     4,   224,     3,     1,     2,    37,
     229,   191,     4,   498,    34,     6,    73,    74,     3,     3,
      10,    37,     0,     4,     1,     2,    32,   138,     3,   140,
       4,   116,   133,    53,    82,    31,     4,     4,    58,    59,
     125,   142,     4,    32,   276,     3,    37,    37,     3,     3,
     271,    47,     4,    82,    82,     4,   124,     4,    89,   116,
       4,    82,   696,     4,     4,   297,    82,   507,    44,   703,
      90,     4,   512,    31,    34,   709,    31,   127,    34,     3,
     148,   149,     4,    89,   134,     6,    31,    44,     3,    47,
     575,     3,    47,    39,   534,    92,    71,   129,   118,   153,
     111,   541,   134,   157,   323,   324,    82,    92,    92,   163,
     419,   101,   101,    88,   168,    37,    31,    92,   138,    31,
     140,     3,    82,   224,   118,    82,    47,    34,   229,    58,
      88,    34,    47,    88,    92,    47,   190,    92,    92,   358,
     160,   118,    98,   197,    34,   199,   187,    37,     4,    31,
     784,   109,   129,   173,   109,   187,   101,     4,    90,     6,
     645,    90,   107,   264,    88,   197,     3,   187,    92,   189,
     190,     6,   283,    88,    64,     3,    88,    92,   663,   111,
      92,    37,   202,   107,    44,   417,   101,    34,    93,   101,
      37,   223,   169,   170,   109,   107,   216,   109,    40,    41,
      37,     6,     3,    31,    64,   161,    88,   227,   185,     3,
      92,   430,     6,    90,   340,    33,   193,   194,   250,   101,
     400,   706,    31,   310,   256,   336,    44,   109,    31,    34,
      31,   187,     3,    34,   111,     3,   676,    31,     3,     4,
      87,     6,    31,     3,   345,   346,   223,   304,    31,     3,
     282,    88,     6,   310,   355,    92,   276,    31,    47,   344,
      88,    40,    41,   283,    92,   107,    31,     3,    44,    34,
       6,    11,    37,   250,    31,   401,     3,   297,   234,   380,
      31,   109,   259,     3,   769,   262,   336,    88,    64,    68,
      47,    92,    68,   394,    88,   327,    32,     4,    92,     6,
     101,   533,   322,   335,    31,   362,   107,   101,   109,    31,
      31,    31,   332,   107,    34,   109,   336,    88,   338,    31,
      88,    92,    87,    88,    92,     3,    47,    92,    88,   361,
     441,   771,    92,   101,    88,   775,   101,    31,    92,   107,
      34,     3,   107,    37,   109,    34,   340,   101,    37,   639,
       4,     3,     6,   107,   455,    44,   410,   351,   335,    37,
      31,    88,   419,   340,     4,    92,     6,     4,    88,     6,
      31,    32,    92,    33,   351,    37,   399,   399,    38,   399,
      34,   101,   109,    37,   399,   399,    47,   107,    31,   109,
      44,   399,   791,   416,   416,   418,   416,   417,   418,   399,
      37,   416,   416,   423,   803,   804,   383,   399,   416,   459,
      88,   683,    31,   685,    92,   435,   416,   411,   399,    31,
     461,   441,   442,   603,   416,   399,    88,   459,   448,   461,
      92,   399,   399,   453,   411,   416,    88,   399,    94,    95,
      92,   461,   416,     3,    31,    32,     6,   399,   416,   416,
     399,    31,   399,   409,   416,   399,   412,   507,   399,   399,
      47,   518,   512,    39,   416,    34,   399,   416,    37,   416,
      31,    32,   416,   429,    89,   416,   416,     3,   498,    31,
      32,    31,    32,   416,   534,    34,    47,   507,   556,    42,
      43,   541,   512,   516,   516,    47,   516,    47,   624,   584,
       3,   516,   516,    40,    41,   461,    59,    60,   516,   532,
     532,     3,   532,   533,   534,     3,   516,   532,   808,    32,
      33,   541,    42,    43,   516,   106,   107,   584,    31,    82,
     617,    37,   643,    40,    41,   516,    34,    44,    25,    59,
      60,     3,   516,     3,    47,   522,   631,    34,   516,   516,
     594,     6,    39,    18,   516,   575,    34,    64,    37,    37,
     617,    68,   594,    34,   516,   542,   586,   516,    31,   516,
      35,    89,   516,    83,   631,   516,   516,    40,    41,    66,
      67,    44,   650,   516,    33,    88,    33,   543,    83,    92,
      18,   702,    32,   643,   614,    33,    34,   654,   101,    37,
      65,    66,    67,    33,   624,    68,   109,    35,    32,   632,
     632,    98,   632,    89,    31,    31,   636,   632,   632,    34,
     640,   107,    37,   643,   632,   645,   676,    32,   605,     3,
     624,    89,   632,   744,     3,    32,    32,    65,    66,    67,
     632,    34,   129,   663,    37,    10,   133,   624,   135,    37,
      32,   632,    44,    33,   610,   142,   676,    31,   632,   615,
      32,   638,    31,    91,   632,   632,    32,   644,    32,    83,
     632,    34,    32,    47,   161,    32,    32,   164,   710,   711,
     632,   637,   702,   632,   171,   632,   706,    32,   632,    32,
      32,   632,   632,   713,    32,   672,   652,   717,   142,   632,
     187,   721,     3,   104,   105,   106,   107,    34,   195,    37,
     197,   198,    89,   200,    88,   202,   203,   204,    92,    88,
      32,   771,    89,    92,   744,   775,    32,   101,    37,    34,
      31,   708,   101,     3,   711,   755,   223,   224,   788,    89,
     109,   791,   229,    89,    34,     3,    47,   234,    34,   769,
     727,   771,    31,   803,   804,   775,   200,   777,    38,    34,
       3,    31,    31,   250,   251,    37,    32,     3,   788,   746,
     131,   791,   749,    31,   169,   170,    32,   264,    33,    31,
     111,   268,    32,   803,   804,    52,    44,    88,    82,    47,
     185,    92,    31,    44,   109,   282,   773,   774,   193,   755,
     101,    64,   758,    37,    64,    72,    64,    64,   109,   296,
      77,    19,    20,    21,    22,    23,    24,    25,    88,    27,
     264,   777,    92,    38,   268,    61,    62,    63,    38,    66,
      88,   101,    32,    32,    92,    38,   323,   324,    31,   109,
     327,    68,   329,   101,   331,    34,    32,     3,   335,   107,
       3,   109,    88,    34,    32,    64,    92,    31,    34,   346,
       3,    33,    32,    31,   259,    34,    83,   262,    34,    32,
      34,   358,     3,    32,    31,   236,   237,    11,    31,   240,
     241,   242,   243,    34,    38,   329,   153,   331,    31,   156,
     157,    34,    34,   380,    32,    34,   163,    34,    33,   260,
      31,   168,   263,    31,    31,    38,    32,   394,   395,     6,
      32,    64,   179,    31,    11,    12,    13,    14,    15,    16,
      17,    34,   409,   190,   191,   412,    32,    32,    32,   196,
     197,    34,   199,    32,    32,    88,   380,     3,    34,    92,
     335,    34,   429,   430,   431,    88,   423,   434,   101,    92,
     394,   395,   643,   608,   107,   532,   109,    88,   101,   532,
     532,    92,   449,   777,   107,    31,   109,   624,   194,   453,
     101,   461,   340,   448,   461,    38,   107,   636,   109,   100,
     101,   102,   103,   104,   105,   106,   107,   431,   383,   476,
     434,   717,   721,   775,   766,    18,     3,   484,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   369,   370,
     371,   372,    -1,   374,   375,   376,   377,   378,   379,   519,
      -1,    -1,    88,   384,    31,    -1,    92,    -1,    -1,    -1,
      -1,    -1,   476,    -1,    -1,   101,    -1,    -1,    -1,    -1,
     484,   107,    -1,   109,    -1,    -1,    -1,    -1,    -1,   536,
      -1,     3,    -1,    -1,     6,    -1,   543,    -1,    -1,    11,
      12,    13,    14,    15,    16,    17,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    88,     3,    -1,    -1,    92,    -1,     3,    40,    41,
      42,    43,   536,    45,   101,    -1,   457,   584,   459,    -1,
     107,    -1,   109,    -1,    -1,    -1,    58,    59,    60,    -1,
      31,    -1,    -1,    -1,    -1,    31,   101,   102,   103,   104,
     105,   106,   107,   610,    -1,    -1,    47,   522,   615,    -1,
      -1,   398,    -1,   400,   401,    -1,    88,    -1,    -1,    -1,
      92,   408,   409,   410,    -1,    -1,    -1,   542,    32,    -1,
     637,    -1,   104,   105,    -1,    -1,   108,   109,    -1,    -1,
      -1,    -1,   429,    -1,    -1,   652,    -1,    88,   655,   656,
      -1,    92,    88,    -1,   661,    -1,    92,    -1,    -1,    -1,
     101,    -1,    -1,    -1,    -1,   101,    -1,    -1,   109,    -1,
      -1,   107,    -1,   109,   102,   103,   104,   105,   106,   107,
      -1,   688,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,
     605,    -1,   699,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   711,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   593,    -1,   595,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    48,   638,    -1,    -1,    -1,    -1,    -1,   644,
     517,    -1,   519,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,    -1,    -1,    -1,    -1,   755,    48,
     757,   758,    -1,    -1,   635,    -1,    -1,   672,    -1,   766,
      99,   100,   101,   102,   103,   104,   105,   106,   107,    -1,
     777,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,    -1,    -1,    -1,   666,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   708,    -1,    -1,   711,    -1,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,    -1,
      -1,    -1,   727,    -1,    -1,    -1,   603,    -1,    -1,    -1,
      -1,   608,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,
       4,   746,    -1,    -1,   749,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,   773,   774,
      34,    35,    -1,    -1,    38,    -1,    40,    41,    42,    43,
      -1,    -1,    -1,    -1,    -1,    -1,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      -1,    65,    66,    67,    -1,    69,    70,    -1,    -1,    -1,
      74,    -1,    76,    77,    78,    79,    -1,    81,    -1,    -1,
      -1,    -1,    -1,    -1,    88,    -1,    -1,    91,    92,    93,
       3,    -1,    -1,     6,    -1,    -1,    -1,    -1,    11,    12,
      13,    14,    15,    16,    17,   109,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    42,
      43,    -1,    45,    -1,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    58,    59,    60,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,    92,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,   104,   105,     6,    -1,   108,   109,    -1,    11,    12,
      13,    14,    15,    16,    17,    48,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    42,
      43,    -1,    45,    -1,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    58,    59,    60,    -1,    -1,
      -1,    -1,    -1,    -1,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,    92,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,   104,   105,     6,    -1,   108,   109,    -1,    11,    12,
      13,    14,    15,    16,    17,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    42,
      43,    -1,    45,    -1,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    58,    59,    60,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,    92,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,   104,   105,     6,    -1,   108,   109,    -1,    11,    12,
      13,    14,    15,    16,    17,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    42,
      43,    -1,    45,    -1,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    58,    59,    60,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,    92,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,   104,   105,     6,    -1,   108,   109,    -1,    11,    12,
      13,    14,    15,    16,    17,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    42,
      43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    58,    59,    60,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,    92,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,   104,   105,     6,   107,   108,   109,    10,    11,    12,
      13,    14,    15,    16,    17,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    42,
      43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    58,    59,    60,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,    92,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,   104,   105,     6,    -1,   108,   109,    -1,    11,    12,
      13,    14,    15,    16,    17,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    42,
      43,    -1,    45,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    58,    59,    60,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,
      40,    41,    42,    43,    -1,    88,    -1,    47,    -1,    92,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,
      60,   104,   105,    -1,    -1,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,
      -1,    91,    92,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   101,    -1,    -1,    -1,    -1,    -1,   107,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,
      40,    41,    42,    43,    -1,    -1,    -1,    47,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    58,    59,
      60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    -1,    -1,    88,    -1,
      -1,    91,    92,    39,    40,    41,    42,    43,    -1,    -1,
      -1,   101,    -1,    -1,    -1,    -1,    -1,   107,     3,    -1,
      -1,    -1,    58,    59,    60,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    88,    -1,    -1,    91,    92,    42,    43,     0,
       1,    -1,     3,     4,    -1,   101,     7,     8,     9,    -1,
      -1,   107,    -1,    58,    59,    60,    -1,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    -1,    -1,    34,    35,    -1,    -1,    -1,    -1,    40,
      41,    42,    43,    88,    -1,    46,    -1,    92,    -1,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      -1,    -1,   107,    -1,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    -1,    -1,    -1,    -1,    86,     1,    88,     3,     4,
      91,    92,     7,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    -1,    -1,    34,
      35,    -1,    -1,    38,    -1,    40,    41,    42,    43,    -1,
      -1,    46,    -1,    -1,    -1,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    -1,    -1,    -1,    -1,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    -1,    -1,    -1,
      -1,    86,     1,    88,     3,     4,    91,    92,     7,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    -1,    -1,    34,    35,    -1,    -1,    38,
      -1,    40,    41,    42,    43,    -1,    -1,    46,    -1,    -1,
      -1,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    -1,    -1,    -1,    -1,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    -1,    -1,    -1,    -1,    86,     1,    88,
       3,     4,    91,    92,     7,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    -1,
      -1,    34,    35,    -1,    -1,    38,    -1,    40,    41,    42,
      43,    -1,    -1,    46,    -1,    -1,    -1,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    -1,    -1,
      -1,    -1,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      -1,    -1,    -1,    86,     1,    88,     3,     4,    91,    92,
       7,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    -1,    -1,    34,    35,    -1,
      -1,    -1,    -1,    40,    41,    42,    43,    -1,    -1,    46,
      -1,    48,    -1,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    -1,    -1,    -1,    -1,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,     1,    -1,     3,    -1,    86,
      -1,    88,    -1,    -1,    91,    92,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    39,    40,    41,    42,    43,     1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    58,    59,    60,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    41,    42,
      43,     1,    88,     3,    -1,    91,    92,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    58,    59,    60,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    42,    43,    -1,    88,     3,    -1,    91,    92,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,
      60,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    40,    41,    42,    43,    -1,    88,    -1,
      -1,    -1,    92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    58,    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
      -1,    88,     6,    -1,    -1,    92,    93,    11,    12,    13,
      14,    15,    16,    17,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    41,    42,    43,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    11,
      -1,    -1,    -1,    -1,    58,    59,    60,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    41,
      42,    43,    -1,     3,    88,    -1,    -1,    91,    92,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,
      40,    41,    42,    43,    -1,     3,    88,    -1,    -1,    91,
      92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,
      60,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    42,    43,    -1,     3,    88,    -1,
      -1,    91,    92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      58,    59,    60,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    40,    41,    42,    43,    -1,     3,
      88,    -1,    -1,    -1,    92,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    58,    59,    60,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    42,    43,
      -1,     3,    88,    -1,    -1,    -1,    92,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    58,    59,    60,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,
      42,    43,    -1,     3,    88,    -1,    -1,    -1,    92,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    -1,    -1,    88,    -1,    -1,    -1,
      92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,
      60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,
      -1,    -1,    92
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const unsigned char yystos[] =
{
       0,    94,    95,   113,   114,   248,     1,     3,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      39,    40,    41,    42,    43,    58,    59,    60,    88,    91,
      92,   191,   205,   206,   208,   209,   210,   211,   212,   228,
     238,   240,     1,   191,     0,     1,     4,     7,     8,     9,
      18,    34,    35,    46,    50,    51,    52,    53,    54,    55,
      56,    57,    65,    66,    67,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    86,    91,
     115,   116,   117,   119,   120,   121,   122,   123,   124,   125,
     127,   128,   129,   130,   131,   132,   133,   136,   137,   138,
     140,   142,   147,   148,   149,   150,   151,   154,   155,   156,
     157,   161,   162,   166,   167,   177,   187,   248,    82,   235,
     248,   235,    39,   238,   111,    82,    34,   209,   205,    31,
      44,    47,    64,   101,   107,   109,   196,   197,   199,   201,
     202,   203,   204,   238,   248,   205,   211,   238,    90,   111,
     239,    34,    93,    31,     6,   243,    31,   245,   248,     1,
       3,   207,   208,    31,   245,    31,   135,   248,    31,    31,
      31,    71,   238,     3,    37,   238,    31,     4,    37,    31,
      31,    34,    37,     4,   243,    31,   146,   207,   144,   146,
      31,    31,   243,    31,    82,   228,   245,    31,   101,   199,
     204,   238,    58,   207,   228,     6,    11,    12,    13,    14,
      15,    16,    17,   191,   192,   193,   195,   220,   248,    39,
      92,   240,   228,    31,   101,   188,   189,   191,   202,   204,
     238,   248,    10,    37,   101,   213,   214,    31,    45,    48,
     104,   105,   108,   109,   207,   219,   220,   221,   243,    11,
      31,   109,   200,   203,   238,   204,   205,   238,   196,    31,
      47,   196,    31,    47,   101,   200,   203,   238,    89,   240,
      92,   240,     3,   236,   243,     6,    37,   236,   246,   236,
      34,    44,    31,   199,    32,   236,   238,     3,     3,   236,
      11,   141,   188,   188,   238,    34,    44,   169,    37,     3,
     143,   246,     3,   188,    37,   198,   199,   202,   248,    34,
      33,   145,   248,   236,   237,   248,   246,   188,   165,   189,
     238,   243,     3,   101,   204,   236,   238,    31,   236,   101,
     238,    89,     3,   215,   248,    31,   199,    37,   238,    83,
      33,   194,   248,   239,    83,   101,   204,   238,   201,   238,
      32,    33,   190,   248,    32,   101,   201,   238,    89,   199,
     219,   219,    31,   219,   219,   219,   219,    31,    48,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     204,   238,   238,    31,    47,   204,   188,    48,   219,   188,
      48,   219,   200,   203,    89,   101,   200,   239,    32,   114,
      33,    44,    32,   213,   196,    32,    37,    32,    44,    32,
      33,    33,    32,    32,    34,   238,   114,   168,    32,    32,
      32,    32,   144,   146,    32,    32,    32,    83,    47,    32,
      89,   204,   238,    34,    89,    37,   188,   238,    68,   153,
     196,   205,   159,    34,    64,   222,   223,   248,   195,   228,
     238,    89,    32,   191,    32,    89,   201,    32,   101,   107,
     204,   207,   219,   219,   219,   219,   219,   219,   219,   219,
     219,   219,   219,   200,   238,    32,    89,   188,    48,   219,
      32,    48,    32,    48,   101,   200,   203,   200,     4,    37,
     243,    38,   246,   220,   243,   247,    34,    34,   118,     4,
     134,   243,     4,    34,    37,    87,   139,   199,   243,   244,
     236,   191,   199,    37,    34,    38,   114,    35,   187,   144,
      34,    37,    31,    38,   145,     3,    88,    92,   241,     4,
      37,    34,   163,   126,   199,   243,    89,     3,   216,   217,
     248,    32,    31,    33,    34,    37,   152,    68,   196,     1,
      34,    54,    61,    62,    63,    66,   109,   119,   120,   121,
     122,   129,   131,   133,   136,   138,   140,   142,   148,   149,
     150,   161,   162,   166,   170,   173,   174,   175,   176,   177,
     178,   179,   183,   186,   187,   248,   224,    37,   194,   238,
     190,    32,   219,    32,   205,    32,   101,   197,    32,   200,
      32,    48,   200,    33,   170,    31,    68,   205,   230,   248,
      32,   230,    38,   243,     3,   207,    34,    44,   244,   188,
      90,   111,   242,   111,    82,   151,   157,   161,   162,   164,
     174,   187,   114,   230,    34,    44,    33,    38,    31,    44,
     230,   231,   188,   199,    31,   172,    37,    64,    64,    64,
     109,   240,    38,   170,    93,   207,   228,   238,    66,   225,
     226,   229,   248,   158,   219,   219,    32,    32,    32,   246,
      38,   188,    31,    68,   139,    34,   199,    34,    34,   199,
     146,    32,     3,     3,    92,     3,    92,   192,   207,    48,
      34,    10,   218,   219,   217,    34,   199,   188,   213,    64,
     232,   248,    32,   153,   188,   170,   171,   240,    31,   199,
     207,    31,    64,     3,    37,   238,    34,    33,    61,    62,
      63,   227,   238,   170,   219,    32,   188,    31,   230,    34,
      34,   242,   242,    83,   152,    32,    34,   233,   234,   238,
      34,    37,   196,   152,    32,   170,    31,   188,   152,    31,
     101,   204,   188,    11,    37,   181,   226,   229,    38,    34,
      32,   188,    34,    34,    34,    37,    33,    31,   196,    38,
     188,    32,   188,    31,    31,    32,    34,   180,   182,   199,
     248,   238,    34,   160,   199,    32,   234,   170,    32,   184,
     230,    32,   188,   188,   231,   182,    34,   152,   185,   230,
      34,    37,   185,    32,    32,    34,    34,    37,    44,   185,
     185,   213,    34
};

#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrlab1


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)         \
  Current.first_line   = Rhs[1].first_line;      \
  Current.first_column = Rhs[1].first_column;    \
  Current.last_line    = Rhs[N].last_line;       \
  Current.last_column  = Rhs[N].last_column;
#endif

/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)

# define YYDSYMPRINT(Args)			\
do {						\
  if (yydebug)					\
    yysymprint Args;				\
} while (0)

# define YYDSYMPRINTF(Title, Token, Value, Location)		\
do {								\
  if (yydebug)							\
    {								\
      YYFPRINTF (stderr, "%s ", Title);				\
      yysymprint (stderr, 					\
                  Token, Value);	\
      YYFPRINTF (stderr, "\n");					\
    }								\
} while (0)

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (cinluded).                                                   |
`------------------------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_stack_print (short *bottom, short *top)
#else
static void
yy_stack_print (bottom, top)
    short *bottom;
    short *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (/* Nothing. */; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_reduce_print (int yyrule)
#else
static void
yy_reduce_print (yyrule)
    int yyrule;
#endif
{
  int yyi;
  unsigned int yylineno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %u), ",
             yyrule - 1, yylineno);
  /* Print the symbols being reduced, and their result.  */
  for (yyi = yyprhs[yyrule]; 0 <= yyrhs[yyi]; yyi++)
    YYFPRINTF (stderr, "%s ", yytname [yyrhs[yyi]]);
  YYFPRINTF (stderr, "-> %s\n", yytname [yyr1[yyrule]]);
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (Rule);		\
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YYDSYMPRINT(Args)
# define YYDSYMPRINTF(Title, Token, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

#endif /* !YYERROR_VERBOSE */



#if YYDEBUG
/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yysymprint (FILE *yyoutput, int yytype, YYSTYPE *yyvaluep)
#else
static void
yysymprint (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  if (yytype < YYNTOKENS)
    {
      YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
# ifdef YYPRINT
      YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
    }
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  switch (yytype)
    {
      default:
        break;
    }
  YYFPRINTF (yyoutput, ")");
}

#endif /* ! YYDEBUG */
/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yydestruct (int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yytype, yyvaluep)
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  switch (yytype)
    {

      default:
        break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM);
# else
int yyparse ();
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */



/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;



/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM)
# else
int yyparse (YYPARSE_PARAM)
  void *YYPARSE_PARAM;
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
  
  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;



#define YYPOPSTACK   (yyvsp--, yyssp--)

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* When reducing, the number of symbols on the RHS of the reduced
     rule.  */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YYDSYMPRINTF ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %s, ", yytname[yytoken]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;


  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 965 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		   Setattr(yyvsp[0].node,"classes",classes); 
		   Setattr(yyvsp[0].node,"name",ModuleName);
		   
		   if ((!module_node) && ModuleName) {
		     module_node = new_node("module");
		     Setattr(module_node,"name",ModuleName);
		   }
		   Setattr(yyvsp[0].node,"module",module_node);
		   check_extensions();
	           top = yyvsp[0].node;
               }
    break;

  case 3:
#line 977 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 top = Getattr(yyvsp[-1].p,"type");
               }
    break;

  case 4:
#line 980 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 top = 0;
               }
    break;

  case 5:
#line 983 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 top = yyvsp[-1].p;
               }
    break;

  case 6:
#line 986 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 top = 0;
               }
    break;

  case 7:
#line 991 "CableSwig/SWIG/Source/CParse/parser.y"
    {  
                   appendChild(yyvsp[-1].node,yyvsp[0].node);
                   yyval.node = yyvsp[-1].node;
               }
    break;

  case 8:
#line 995 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                   yyval.node = new_node("top");
               }
    break;

  case 9:
#line 1000 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 10:
#line 1001 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 11:
#line 1002 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 12:
#line 1003 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = 0; }
    break;

  case 13:
#line 1004 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                  yyval.node = 0;
		  if (!Swig_error_count()) {
		    static int last_error_line = -1;
		    if (last_error_line != cparse_line) {
		      Swig_error(cparse_file, cparse_line,"Syntax error in input.\n");
		      last_error_line = cparse_line;
		      skip_decl();
		    }
		  }
               }
    break;

  case 14:
#line 1016 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                  if (yyval.node) {
   		      add_symbols(yyval.node);
                  }
                  yyval.node = yyvsp[0].node; 
	       }
    break;

  case 15:
#line 1032 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                  yyval.node = 0;
                  skip_decl();
               }
    break;

  case 16:
#line 1042 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 17:
#line 1043 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 18:
#line 1044 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 19:
#line 1045 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 20:
#line 1046 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 21:
#line 1047 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 22:
#line 1048 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 23:
#line 1049 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 24:
#line 1050 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 25:
#line 1051 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 26:
#line 1052 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 27:
#line 1053 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 28:
#line 1054 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 29:
#line 1055 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 30:
#line 1056 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 31:
#line 1057 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 32:
#line 1058 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 33:
#line 1059 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 34:
#line 1060 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 35:
#line 1061 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 36:
#line 1062 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 37:
#line 1069 "CableSwig/SWIG/Source/CParse/parser.y"
    {
               Node *cls;
	       String *clsname;
	       cplus_mode = CPLUS_PUBLIC;
	       if (!classes) classes = NewHash();
	       if (!extendhash) extendhash = NewHash();
	       clsname = make_class_name(yyvsp[-1].str);
	       cls = Getattr(classes,clsname);
	       if (!cls) {
		 /* No previous definition. Create a new scope */
		 Node *am = Getattr(extendhash,clsname);
		 if (!am) {
		   Swig_symbol_newscope();
		   Swig_symbol_setscopename(yyvsp[-1].str);
		   prev_symtab = 0;
		 } else {
		   prev_symtab = Swig_symbol_setscope(Getattr(am,"symtab"));
		 }
		 current_class = 0;
	       } else {
		 /* Previous class definition.  Use its symbol table */
		 prev_symtab = Swig_symbol_setscope(Getattr(cls,"symtab"));
		 current_class = cls;
		 extendmode = 1;
	       }
	       Classprefix = NewString(yyvsp[-1].str);
	       Namespaceprefix= Swig_symbol_qualifiedscopename(0);
	       Delete(clsname);
	     }
    break;

  case 38:
#line 1097 "CableSwig/SWIG/Source/CParse/parser.y"
    {
               String *clsname;
	       extendmode = 0;
               yyval.node = new_node("extend");
	       Setattr(yyval.node,"symtab",Swig_symbol_popscope());
	       if (prev_symtab) {
		 Swig_symbol_setscope(prev_symtab);
	       }
	       Namespaceprefix = Swig_symbol_qualifiedscopename(0);
               clsname = make_class_name(yyvsp[-4].str);
	       Setattr(yyval.node,"name",clsname);

	       /* Mark members as extend */

	       Swig_tag_nodes(yyvsp[-1].node,"feature:extend",(char*) "1");
	       if (current_class) {
		 /* We add the extension to the previously defined class */
		 appendChild(yyval.node,yyvsp[-1].node);
		 appendChild(current_class,yyval.node);
	       } else {
		 /* We store the extensions in the extensions hash */
		 Node *am = Getattr(extendhash,clsname);
		 if (am) {
		   /* Append the members to the previous extend methods */
		   appendChild(am,yyvsp[-1].node);
		 } else {
		   appendChild(yyval.node,yyvsp[-1].node);
		   Setattr(extendhash,clsname,yyval.node);
		 }
	       }
	       current_class = 0;
	       Delete(Classprefix);
	       Delete(clsname);
	       Classprefix = 0;
	       prev_symtab = 0;
	       yyval.node = 0;

	     }
    break;

  case 39:
#line 1141 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                    yyval.node = new_node("apply");
                    Setattr(yyval.node,"pattern",Getattr(yyvsp[-3].p,"pattern"));
		    appendChild(yyval.node,yyvsp[-1].p);
               }
    break;

  case 40:
#line 1151 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.node = new_node("clear");
		 appendChild(yyval.node,yyvsp[-1].p);
               }
    break;

  case 41:
#line 1162 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		   if ((yyvsp[-1].dtype.type != T_ERROR) && (yyvsp[-1].dtype.type != T_SYMBOL)) {
		     yyval.node = new_node("constant");
		     Setattr(yyval.node,"name",yyvsp[-3].id);
		     Setattr(yyval.node,"type",NewSwigType(yyvsp[-1].dtype.type));
		     Setattr(yyval.node,"value",yyvsp[-1].dtype.val);
		     if (yyvsp[-1].dtype.rawval) Setattr(yyval.node,"rawval", yyvsp[-1].dtype.rawval);
		     Setattr(yyval.node,"storage","%constant");
		     Setattr(yyval.node,"feature:immutable","1");
		     add_symbols(yyval.node);
		   } else {
		     if (yyvsp[-1].dtype.type == T_ERROR) {
		       Swig_warning(WARN_PARSE_UNSUPPORTED_VALUE,cparse_file,cparse_line,"Unsupported constant value (ignored)\n");
		     }
		     yyval.node = 0;
		   }

	       }
    break;

  case 42:
#line 1181 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 if ((yyvsp[-1].dtype.type != T_ERROR) && (yyvsp[-1].dtype.type != T_SYMBOL)) {
		   SwigType_push(yyvsp[-3].type,yyvsp[-2].decl.type);
		   /* Sneaky callback function trick */
		   if (SwigType_isfunction(yyvsp[-3].type)) {
		     SwigType_add_pointer(yyvsp[-3].type);
		   }
		   yyval.node = new_node("constant");
		   Setattr(yyval.node,"name",yyvsp[-2].decl.id);
		   Setattr(yyval.node,"type",yyvsp[-3].type);
		   Setattr(yyval.node,"value",yyvsp[-1].dtype.val);
		   if (yyvsp[-1].dtype.rawval) Setattr(yyval.node,"rawval", yyvsp[-1].dtype.rawval);
		   Setattr(yyval.node,"storage","%constant");
		   Setattr(yyval.node,"feature:immutable","1");
		   add_symbols(yyval.node);
		 } else {
		     if (yyvsp[-1].dtype.type == T_ERROR) {
		       Swig_warning(WARN_PARSE_UNSUPPORTED_VALUE,cparse_file,cparse_line,"Unsupported constant value\n");
		     }
		   yyval.node = 0;
		 }
               }
    break;

  case 43:
#line 1203 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 Swig_warning(WARN_PARSE_BAD_VALUE,cparse_file,cparse_line,"Bad constant value (ignored).\n");
		 yyval.node = 0;
	       }
    break;

  case 44:
#line 1214 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 char temp[64];
		 Replace(yyvsp[0].str,"$file",cparse_file, DOH_REPLACE_ANY);
		 sprintf(temp,"%d", cparse_line);
		 Replace(yyvsp[0].str,"$line",temp,DOH_REPLACE_ANY);
		 Printf(stderr,"%s\n", yyvsp[0].str);
		 Delete(yyvsp[0].str);
                 yyval.node = 0;
	       }
    break;

  case 45:
#line 1223 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 char temp[64];
		 String *s = NewString(yyvsp[0].id);
		 Replace(s,"$file",cparse_file, DOH_REPLACE_ANY);
		 sprintf(temp,"%d", cparse_line);
		 Replace(s,"$line",temp,DOH_REPLACE_ANY);
		 Printf(stderr,"%s\n", s);
		 Delete(s);
                 yyval.node = 0;
               }
    break;

  case 46:
#line 1242 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                    skip_balanced('{','}');
		    yyval.node = 0;
		    Swig_warning(WARN_DEPRECATED_EXCEPT,cparse_file, cparse_line, "%%except is deprecated.  Use %%exception instead.\n");
	       }
    break;

  case 47:
#line 1248 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                    skip_balanced('{','}');
		    yyval.node = 0;
		    Swig_warning(WARN_DEPRECATED_EXCEPT,cparse_file, cparse_line, "%%except is deprecated.  Use %%exception instead.\n");
               }
    break;

  case 48:
#line 1254 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.node = 0;
		 Swig_warning(WARN_DEPRECATED_EXCEPT,cparse_file, cparse_line, "%%except is deprecated.  Use %%exception instead.\n");
               }
    break;

  case 49:
#line 1259 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.node = 0;
		 Swig_warning(WARN_DEPRECATED_EXCEPT,cparse_file, cparse_line, "%%except is deprecated.  Use %%exception instead.\n");
	       }
    break;

  case 50:
#line 1269 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 Hash *p = nextSibling(yyvsp[-2].node);
                 yyval.node = new_node("fragment");
                 Setattr(yyval.node,"section", Getattr(p,"name"));
                 Setattr(yyval.node,"name",Getattr(yyvsp[-2].node,"name"));
                 Setattr(yyval.node,"kwargs",nextSibling(p));
                 Setattr(yyval.node,"code",yyvsp[0].str);
                 }
    break;

  case 51:
#line 1277 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		   Hash *p = nextSibling(yyvsp[-2].node);
                   skip_balanced('{','}');
		   yyval.node = new_node("fragment");
		   Setattr(yyval.node,"section", Getattr(p,"name"));
		   Setattr(yyval.node,"name",Getattr(yyvsp[-2].node,"name"));
		   Setattr(yyval.node,"kwargs",nextSibling(p));
		   Delitem(scanner_ccode,0);
		   Delitem(scanner_ccode,DOH_END);
		   Setattr(yyval.node,"code",Copy(scanner_ccode));
		 }
    break;

  case 52:
#line 1295 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                     yyvsp[-3].loc.filename = Swig_copy_string(cparse_file);
		     yyvsp[-3].loc.line = cparse_line;
		     cparse_file = Swig_copy_string(yyvsp[-1].id);
		     cparse_line = 0;
               }
    break;

  case 53:
#line 1300 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                     yyval.node = yyvsp[-1].node;
		     cparse_file = yyvsp[-6].loc.filename;
		     cparse_line = yyvsp[-6].loc.line;
		     if (strcmp(yyvsp[-6].loc.type,"include") == 0) set_nodeType(yyval.node,"include");
		     if (strcmp(yyvsp[-6].loc.type,"import") == 0) set_nodeType(yyval.node,"import");
		     Setattr(yyval.node,"name",yyvsp[-4].id);
		     /* Search for the module (if any) */
		     {
			 Node *n = firstChild(yyval.node);
			 while (n) {
			     if (Strcmp(nodeType(n),"module") == 0) {
				 Setattr(yyval.node,"module",Getattr(n,"name"));
				 break;
			     }
			     n = nextSibling(n);
			 }
		     }
		     Setattr(yyval.node,"options",yyvsp[-5].node);
               }
    break;

  case 54:
#line 1322 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.loc.type = (char *) "include"; }
    break;

  case 55:
#line 1323 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.loc.type = (char *) "import"; }
    break;

  case 56:
#line 1330 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 String *cpps;
		 if (Namespaceprefix) {
		   Swig_error(cparse_file, cparse_start_line, "%%inline directive inside a namespace is disallowed.\n");

		   yyval.node = 0;
		 } else {
		   yyval.node = new_node("insert");
		   Setattr(yyval.node,"code",yyvsp[0].str);
		   /* Need to run through the preprocessor */
		   Setline(yyvsp[0].str,cparse_start_line);
		   Setfile(yyvsp[0].str,cparse_file);
		   Seek(yyvsp[0].str,0,SEEK_SET);
		   cpps = Preprocessor_parse(yyvsp[0].str);
		   start_inline(Char(cpps), cparse_start_line);
		   Delete(yyvsp[0].str);
		   Delete(cpps);
		 }
		 
	       }
    break;

  case 57:
#line 1350 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 String *cpps;
		 skip_balanced('{','}');
		 if (Namespaceprefix) {
		   Swig_error(cparse_file, cparse_start_line, "%%inline directive inside a namespace is disallowed.\n");
		   
		   yyval.node = 0;
		 } else {
                   yyval.node = new_node("insert");
		   Delitem(scanner_ccode,0);
		   Delitem(scanner_ccode,DOH_END);
		   Setattr(yyval.node,"code", Copy(scanner_ccode));
		   cpps=Copy(scanner_ccode);
		   start_inline(Char(cpps), cparse_start_line);
		   Delete(cpps);
		 }
               }
    break;

  case 58:
#line 1377 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 yyval.node = new_node("insert");
		 Setattr(yyval.node,"code",yyvsp[0].str);
	       }
    break;

  case 59:
#line 1381 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 String *code = NewString("");
		 yyval.node = new_node("insert");
		 Setattr(yyval.node,"section",yyvsp[-2].id);
		 Setattr(yyval.node,"code",code);
		 if (Swig_insert_file(yyvsp[0].id,code) < 0) {
		   Swig_error(cparse_file, cparse_line, "Couldn't find '%s'.\n", yyvsp[0].id);
		   yyval.node = 0;
		 } 
               }
    break;

  case 60:
#line 1391 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.node = new_node("insert");
		 Setattr(yyval.node,"section",yyvsp[-2].id);
		 Setattr(yyval.node,"code",yyvsp[0].str);
               }
    break;

  case 61:
#line 1396 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 skip_balanced('{','}');
		 yyval.node = new_node("insert");
		 Setattr(yyval.node,"section",yyvsp[-2].id);
		 Delitem(scanner_ccode,0);
		 Delitem(scanner_ccode,DOH_END);
		 Setattr(yyval.node,"code", Copy(scanner_ccode));
	       }
    break;

  case 62:
#line 1411 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 yyval.node = new_node("module");
		 Setattr(yyval.node,"name",yyvsp[0].id);
		 if (yyvsp[-1].node) Setattr(yyval.node,"options",yyvsp[-1].node);
		 if (yyvsp[-1].node && Getattr(yyvsp[-1].node,"directors") && Getattr(yyvsp[-1].node,"dirprot"))
		   dirprot_mode = 1;
		 if (!ModuleName) ModuleName = NewString(yyvsp[0].id);
		 if (!module_node) module_node = yyval.node;
	       }
    break;

  case 63:
#line 1427 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 yyrename = NewString(yyvsp[-1].id);
		 yyval.node = 0;
               }
    break;

  case 64:
#line 1431 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                   yyval.node = 0;
		   Swig_error(cparse_file,cparse_line,"Missing argument to %%name directive.\n");
	       }
    break;

  case 65:
#line 1443 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 yyval.node = new_node("native");
		 Setattr(yyval.node,"name",yyvsp[-4].id);
		 Setattr(yyval.node,"wrap:name",yyvsp[-1].id);
	         add_symbols(yyval.node);
	       }
    break;

  case 66:
#line 1449 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 if (!SwigType_isfunction(yyvsp[-1].decl.type)) {
		   Swig_error(cparse_file,cparse_line,"%%native declaration '%s' is not a function.\n", yyvsp[-1].decl.id);
		   yyval.node = 0;
		 } else {
		     Delete(SwigType_pop_function(yyvsp[-1].decl.type));
		     /* Need check for function here */
		     SwigType_push(yyvsp[-2].type,yyvsp[-1].decl.type);
		     yyval.node = new_node("native");
	             Setattr(yyval.node,"name",yyvsp[-5].id);
		     Setattr(yyval.node,"wrap:name",yyvsp[-1].decl.id);
		     Setattr(yyval.node,"type",yyvsp[-2].type);
		     Setattr(yyval.node,"parms",yyvsp[-1].decl.parms);
		     Setattr(yyval.node,"decl",yyvsp[-1].decl.type);
		 }
	         add_symbols(yyval.node);
	       }
    break;

  case 67:
#line 1475 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 yyval.node = new_node("pragma");
		 Setattr(yyval.node,"lang",yyvsp[-3].id);
		 Setattr(yyval.node,"name",yyvsp[-2].id);
		 Setattr(yyval.node,"value",yyvsp[0].str);
	       }
    break;

  case 68:
#line 1481 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		yyval.node = new_node("pragma");
		Setattr(yyval.node,"lang",yyvsp[-1].id);
		Setattr(yyval.node,"name",yyvsp[0].id);
	      }
    break;

  case 69:
#line 1488 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.str = NewString(yyvsp[0].id); }
    break;

  case 70:
#line 1489 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.str = yyvsp[0].str; }
    break;

  case 71:
#line 1492 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.id = yyvsp[-1].id; }
    break;

  case 72:
#line 1493 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.id = (char *) "swig"; }
    break;

  case 73:
#line 1501 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                    SwigType *t = yyvsp[-2].decl.type;
		    if (!Len(t)) t = 0;
		    if (yyvsp[-3].ivalue) {
		      rename_add(yyvsp[-2].decl.id,t,yyvsp[-1].id);
		    } else {
		      namewarn_add(yyvsp[-2].decl.id,t,yyvsp[-1].id);
		    }
		    yyval.node = 0;
		    scanner_clear_rename();
              }
    break;

  case 74:
#line 1512 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		String *fixname;
		SwigType *t = yyvsp[-2].decl.type;
		fixname = feature_identifier_fix(yyvsp[-2].decl.id);
		if (!Len(t)) t = 0;
		/* Special declarator check */
		if (t) {
		  if (yyvsp[-1].dtype.qualifier) SwigType_push(t,yyvsp[-1].dtype.qualifier);
		  if (SwigType_isfunction(t)) {
		    SwigType *decl = SwigType_pop_function(t);
		    if (SwigType_ispointer(t)) {
		      String *nname = NewStringf("*%s",fixname);
		      if (yyvsp[-6].ivalue) {
			rename_add(Char(nname),decl,yyvsp[-4].id);
		      } else {
			namewarn_add(Char(nname),decl,yyvsp[-4].id);
		      }
		      Delete(nname);
		    } else {
		      if (yyvsp[-6].ivalue) {
			rename_add(Char(fixname),decl,yyvsp[-4].id);
		      } else {
			namewarn_add(Char(fixname),decl,yyvsp[-4].id);
		      }
		    }
		  } else if (SwigType_ispointer(t)) {
		    String *nname = NewStringf("*%s",fixname);
		    if (yyvsp[-6].ivalue) {
		      rename_add(Char(nname),0,yyvsp[-4].id);
		    } else {
		      namewarn_add(Char(nname),0,yyvsp[-4].id);
		    }
		    Delete(nname);
		  }
		} else {
		  if (yyvsp[-6].ivalue) {
		    rename_add(Char(fixname),0,yyvsp[-4].id);
		  } else {
		    namewarn_add(Char(fixname),0,yyvsp[-4].id);
		  }
		}
                yyval.node = 0;
		scanner_clear_rename();
              }
    break;

  case 75:
#line 1556 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		if (yyvsp[-5].ivalue) {
		  rename_add(yyvsp[-1].id,0,yyvsp[-3].id);
		} else {
		  namewarn_add(yyvsp[-1].id,0,yyvsp[-3].id);
		}
		yyval.node = 0;
		scanner_clear_rename();
              }
    break;

  case 76:
#line 1567 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		    yyval.ivalue = 1;
                }
    break;

  case 77:
#line 1570 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                    yyval.ivalue = 0;
                }
    break;

  case 78:
#line 1583 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 String *fname;
                 String *val;
		 String *name;
		 String *fixname;
		 SwigType *t;
                 if (!features_hash) features_hash = NewHash();
		 fname = NewStringf("feature:%s",yyvsp[-4].id);
		 fixname = feature_identifier_fix(yyvsp[-2].decl.id);
		 if (Namespaceprefix) {
		   name = NewStringf("%s::%s",Namespaceprefix, fixname);
		 } else {
		   name = fixname;
		 }
		 val = yyvsp[0].str ? NewString(yyvsp[0].str) : NewString("1");
		 if (yyvsp[-2].decl.parms) {
		   Setmeta(val,"parms",yyvsp[-2].decl.parms);
		 }
		 t = yyvsp[-2].decl.type;
		 if (yyvsp[-2].decl.parms) Setmeta(val,"parms",yyvsp[-2].decl.parms);
		 if (!Len(t)) t = 0;
		 if (t) {
		   if (yyvsp[-1].dtype.qualifier) SwigType_push(t,yyvsp[-1].dtype.qualifier);
		   if (SwigType_isfunction(t)) {
		     SwigType *decl = SwigType_pop_function(t);
		     if (SwigType_ispointer(t)) {
		       String *nname = NewStringf("*%s",name);
		       Swig_feature_set(features_hash, nname, decl, fname, val);
		       Delete(nname);
		     } else {
		       Swig_feature_set(features_hash, name, decl, fname, val);
		     }
		   } else if (SwigType_ispointer(t)) {
		     String *nname = NewStringf("*%s",name);
		     Swig_feature_set(features_hash,nname,0,fname,val);
		     Delete(nname);
		   }
		 } else {
		   Swig_feature_set(features_hash,name,0,fname,val);
		 }
		 Delete(fname);
		 Delete(name);
		 yyval.node = 0;
              }
    break;

  case 79:
#line 1630 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 String *fname;
                 String *val;
		 String *name;
		 String *fixname;
		 SwigType *t;

                 if (!features_hash) features_hash = NewHash();
		 fname = NewStringf("feature:%s",yyvsp[-6].id);
		 fixname = feature_identifier_fix(yyvsp[-2].decl.id);
		 if (Namespaceprefix) {
		   name = NewStringf("%s::%s",Namespaceprefix, fixname);
		 } else {
		   name = fixname;
		 }
		 if (Len(yyvsp[-4].id)) {
		   val = NewString(yyvsp[-4].id);
		 } else {
		   val = 0;
		 }
		 if (yyvsp[-2].decl.parms) {
		   Setmeta(val,"parms",yyvsp[-2].decl.parms);
		 }
		 t = yyvsp[-2].decl.type;
		 if (yyvsp[-2].decl.parms) Setmeta(val,"parms",yyvsp[-2].decl.parms);
		 if (!Len(t)) t = 0;
		 if (t) {
		   if (yyvsp[-1].dtype.qualifier) SwigType_push(t,yyvsp[-1].dtype.qualifier);
		   if (SwigType_isfunction(t)) {
		     SwigType *decl = SwigType_pop_function(t);
		     if (SwigType_ispointer(t)) {
		       String *nname = NewStringf("*%s",name);
		       Swig_feature_set(features_hash, nname, decl, fname, val);
		       Delete(nname);
		     } else {
		       Swig_feature_set(features_hash, name, decl, fname, val);
		     }
		   } else if (SwigType_ispointer(t)) {
		     String *nname = NewStringf("*%s",name);
		     Swig_feature_set(features_hash,nname,0,fname,val);
		     Delete(nname);
		   }
		 } else {
		   Swig_feature_set(features_hash,name,0,fname,val);
		 }
		 Delete(fname);
		 Delete(name);
		 yyval.node = 0;
              }
    break;

  case 80:
#line 1682 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		String *name;
		String *fname = NewStringf("feature:%s",yyvsp[-2].id);
		if (!features_hash) features_hash = NewHash();
		if (Namespaceprefix) name = NewStringf("%s::", Namespaceprefix);
		else name = NewString("");
		Swig_feature_set(features_hash,name,0,fname,(yyvsp[0].str ? NewString(yyvsp[0].str) : NewString("1")));
		Delete(name);
		Delete(fname);
		yyval.node = 0;
              }
    break;

  case 81:
#line 1693 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		String *name;
		String *fname = NewStringf("feature:%s",yyvsp[-4].id);
		if (!features_hash) features_hash = NewHash();
		if (Namespaceprefix) name = NewStringf("%s::", Namespaceprefix);
		else name = NewString("");
		Swig_feature_set(features_hash,name,0,fname,(Len(yyvsp[-2].id) ? NewString(yyvsp[-2].id) : 0));
		Delete(name);
		Delete(fname);
		yyval.node = 0;
              }
    break;

  case 82:
#line 1706 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.str = yyvsp[0].str; }
    break;

  case 83:
#line 1707 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.str = 0; }
    break;

  case 84:
#line 1708 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.str = yyvsp[-2].pl; }
    break;

  case 85:
#line 1713 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 Parm *val;
		 String *name;
		 SwigType *t;
                 if (!features_hash) features_hash = NewHash();
		 if (Namespaceprefix) name = NewStringf("%s::%s", Namespaceprefix, yyvsp[-2].decl.id);
		 else name = NewString(yyvsp[-2].decl.id);
		 val = yyvsp[-4].pl;
		 if (yyvsp[-2].decl.parms) {
		   Setmeta(val,"parms",yyvsp[-2].decl.parms);
		 }
		 t = yyvsp[-2].decl.type;
		 if (!Len(t)) t = 0;
		 if (t) {
		   if (yyvsp[-1].dtype.qualifier) SwigType_push(t,yyvsp[-1].dtype.qualifier);
		   if (SwigType_isfunction(t)) {
		     SwigType *decl = SwigType_pop_function(t);
		     if (SwigType_ispointer(t)) {
		       String *nname = NewStringf("*%s",name);
		       Swig_feature_set(features_hash, nname, decl, "feature:varargs", val);
		       Delete(nname);
		     } else {
		       Swig_feature_set(features_hash, name, decl, "feature:varargs", val);
		     }
		   } else if (SwigType_ispointer(t)) {
		     String *nname = NewStringf("*%s",name);
		     Swig_feature_set(features_hash,nname,0,"feature:varargs",val);
		     Delete(nname);
		   }
		 } else {
		   Swig_feature_set(features_hash,name,0,"feature:varargs",val);
		 }
		 Delete(name);
		 yyval.node = 0;
              }
    break;

  case 86:
#line 1749 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.pl = yyvsp[0].pl; }
    break;

  case 87:
#line 1750 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
		  int i;
		  int n;
		  Parm *p;
		  n = atoi(Char(yyvsp[-2].dtype.val));
		  if (n <= 0) {
		    Swig_error(cparse_file, cparse_line,"Argument count in %%varargs must be positive.\n");
		    yyval.pl = 0;
		  } else {
		    yyval.pl = Copy(yyvsp[0].p);
		    Setattr(yyval.pl,"name","VARARGS_SENTINEL");
		    for (i = 0; i < n; i++) {
		      p = Copy(yyvsp[0].p);
		      set_nextSibling(p,yyval.pl);
		      yyval.pl = p;
		    }
		  }
                }
    break;

  case 88:
#line 1779 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		   yyval.node = 0;
		   if (yyvsp[-3].tmap.op) {
		     yyval.node = new_node("typemap");
		     Setattr(yyval.node,"method",yyvsp[-3].tmap.op);
		     Setattr(yyval.node,"code",NewString(yyvsp[0].str));
		     if (yyvsp[-3].tmap.kwargs) {
		       Setattr(yyval.node,"kwargs", yyvsp[-3].tmap.kwargs);
		     }
		     appendChild(yyval.node,yyvsp[-1].p);
		   }
	       }
    break;

  case 89:
#line 1791 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.node = 0;
		 if (yyvsp[-3].tmap.op) {
		   yyval.node = new_node("typemap");
		   Setattr(yyval.node,"method",yyvsp[-3].tmap.op);
		   appendChild(yyval.node,yyvsp[-1].p);
		 }
	       }
    break;

  case 90:
#line 1799 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		   yyval.node = 0;
		   if (yyvsp[-5].tmap.op) {
		     yyval.node = new_node("typemapcopy");
		     Setattr(yyval.node,"method",yyvsp[-5].tmap.op);
		     Setattr(yyval.node,"pattern", Getattr(yyvsp[-1].p,"pattern"));
		     appendChild(yyval.node,yyvsp[-3].p);
		   }
	       }
    break;

  case 91:
#line 1812 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 Hash *p;
		 String *name;
		 p = nextSibling(yyvsp[0].node);
		 if (p && (!Getattr(p,"value"))) {
		   /* two argument typemap form */
		   name = Getattr(yyvsp[0].node,"name");
		   if (!name || (Strcmp(name,typemap_lang))) {
		     yyval.tmap.op = 0;
		     yyval.tmap.kwargs = 0;
		   } else {
		     yyval.tmap.op = Getattr(p,"name");
		     yyval.tmap.kwargs = nextSibling(p);
		   }
		 } else {
		   /* one-argument typemap-form */
		   yyval.tmap.op = Getattr(yyvsp[0].node,"name");
		   yyval.tmap.kwargs = p;
		 }
                }
    break;

  case 92:
#line 1834 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 yyval.p = yyvsp[-1].p;
		 set_nextSibling(yyval.p,yyvsp[0].p);
		}
    break;

  case 93:
#line 1840 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 yyval.p = yyvsp[-1].p;
		 set_nextSibling(yyval.p,yyvsp[0].p);
                }
    break;

  case 94:
#line 1844 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.p = 0;}
    break;

  case 95:
#line 1847 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		  SwigType_push(yyvsp[-1].type,yyvsp[0].decl.type);
		  yyval.p = new_node("typemapitem");
		  Setattr(yyval.p,"pattern",NewParm(yyvsp[-1].type,yyvsp[0].decl.id));
		  Setattr(yyval.p,"parms", yyvsp[0].decl.parms);
		  /*		  $$ = NewParm($1,$2.id);
				  Setattr($$,"parms",$2.parms); */
                }
    break;

  case 96:
#line 1855 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                  yyval.p = new_node("typemapitem");
		  Setattr(yyval.p,"pattern",yyvsp[-1].pl);
		  /*		  Setattr($$,"multitype",$2); */
               }
    break;

  case 97:
#line 1860 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.p = new_node("typemapitem");
		 Setattr(yyval.p,"pattern", yyvsp[-4].pl);
		 /*                 Setattr($$,"multitype",$2); */
		 Setattr(yyval.p,"parms",yyvsp[-1].pl);
               }
    break;

  case 98:
#line 1872 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                   yyval.node = new_node("types");
		   Setattr(yyval.node,"parms",yyvsp[-2].pl);
               }
    break;

  case 99:
#line 1882 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                  Parm *p, *tp;
		  Node *n;
		  Node *nspace = 0, *nspace_inner = 0;
		  Node *tnode = 0;
		  Symtab *tscope = 0;
		  int     specialized = 0;
		  yyval.node = 0;

		  tscope = Swig_symbol_current();          /* Get the current scope */

		  /* If the template name is qualified.  We need to create or lookup namespace entries */
		  if (Swig_scopename_check(yyvsp[-4].str)) {
		    String *prefix, *base;
		    Node   *ns;
		    prefix = Swig_scopename_prefix(yyvsp[-4].str);
		    base = Swig_scopename_last(yyvsp[-4].str);
		    
		    /* Try to locate the scope */
		    ns = Swig_symbol_clookup(prefix,0);
		    if (!ns) {
		      Swig_error(cparse_file,cparse_line,"Undefined scope '%s'\n", prefix);
		    } else {
		      if (Strcmp(nodeType(ns),"namespace") != 0) {
			Swig_error(cparse_file,cparse_line,"'%s' is not defined as namespace.\n", prefix);
			ns = 0;
		      } else {
			/*			Swig_symbol_setscope(Getattr(ns,"symtab"));
						Namespaceprefix = Swig_symbol_qualifiedscopename(0); */
		      }
		    }

		    if (ns && Namespaceprefix) {
		      Swig_error(cparse_file,cparse_line,
				 "Can't instantiate template '%s' inside namespace '%s'.\n"
				 "Suggest moving %%template outside the namespace.\n", yyvsp[-4].str, Namespaceprefix);

		    }
		    
		    /* Create namespace nodes to enclose the template declaration */
		    if (ns) {
		      List *scopes;
		      String *sname;
		      Iterator si;
		      String *name = NewString(prefix);
		      scopes = NewList();
		      while (name) {
			String *tprefix;
			String *base = Swig_scopename_last(name);
			Insert(scopes,0,base);
			tprefix = Swig_scopename_prefix(name);
			Delete(name);
			name = tprefix;
		      }
		      for (si = First(scopes); si.item; si = Next(si)) {
			Node *ns1,*ns2;
			sname = si.item;
			ns1 = Swig_symbol_clookup(sname,0);
			assert(ns1);
			if (Strcmp(nodeType(ns1),"namespace") == 0) {
			  if (Getattr(ns1,"alias")) {
			    ns1 = Getattr(ns1,"namespace");
			  }
			} else {
			  assert(0);
			}
			ns2 = new_node("namespace");
			Setattr(ns2,"name",sname);
			Setattr(ns2,"symtab", Getattr(ns1,"symtab"));
			add_symbols(ns2);
			Swig_symbol_setscope(Getattr(ns1,"symtab"));
			Namespaceprefix = Swig_symbol_qualifiedscopename(0);
			if (nspace_inner) {
			  appendChild(nspace_inner,ns2);
			}
			nspace_inner = ns2;
			if (!nspace) nspace = ns2;
		      }
		      yyvsp[-4].str = base;
		    }
		  }

		  n = Swig_cparse_template_locate(yyvsp[-4].str,yyvsp[-2].p);

		  /* Patch the argument types to respect namespaces */
		  p = yyvsp[-2].p;
		  while (p) {
		    if (!Getattr(p,"value")) {
		      SwigType *ty = Getattr(p,"type");
		      if (ty) {
			ty = Swig_symbol_type_qualify(ty,0);
			/*			ty = Swig_symbol_typedef_reduce(ty,0); */
			Setattr(p,"type",ty);
		      }
		    }
		    p = nextSibling(p);
		  }
		  /* Look for the template */

		  if (n && (Strcmp(nodeType(n),"template") == 0)) {
		    Parm *tparms = Getattr(n,"templateparms");
		    if (!tparms) {
		      specialized = 1;
		    }
		    if (!specialized && ((ParmList_len(yyvsp[-2].p) > ParmList_len(tparms)))) {
		      Swig_error(cparse_file, cparse_line, "Too many template parameters. Maximum of %d.\n", ParmList_len(tparms));
		    } else if (!specialized && ((ParmList_len(yyvsp[-2].p) < ParmList_numrequired(tparms)))) {
		      Swig_error(cparse_file, cparse_line, "Not enough template parameters specified. %d required.\n", ParmList_numrequired(tparms));
		    } else {
		      int  def_supplied = 0;
		      /* Expand the template */
		      ParmList *temparms;
		      if (specialized) temparms = CopyParmList(yyvsp[-2].p);
		      else temparms = CopyParmList(tparms);

		      /* Create typedef's and arguments */
		      p = yyvsp[-2].p;
		      tp = temparms;
		      while (p) {
			String *value = Getattr(p,"value");
			if (def_supplied) {
			  Setattr(p,"default","1");
			}
			if (value) {
			  Setattr(tp,"value",value);
			} else {
			  SwigType *ty = Getattr(p,"type");
			  if (ty) {
			    Setattr(tp,"type",ty);
			  }
			  Delattr(tp,"value");
			}
			p = nextSibling(p);
			tp = nextSibling(tp);
			if (!p && tp) {
			  p = tp;
			  def_supplied = 1;
			}
		      }

		      yyval.node = copy_node(n);
		      /* We need to set the node name based on name used to instantiate */
		      Setattr(yyval.node,"name",Copy(yyvsp[-4].str));
		      if (!specialized) {
			Delattr(yyval.node,"sym:typename");
		      } else {
			Setattr(yyval.node,"sym:typename","1");
		      }
		      if (yyvsp[-6].id) {
			Swig_cparse_template_expand(yyval.node,yyvsp[-6].id,temparms);
			Setattr(yyval.node,"sym:name",yyvsp[-6].id);
		      } else {
			static int cnt = 0;
			String *nname = NewStringf("__dummy_%d__", cnt++);
			Swig_cparse_template_expand(yyval.node,nname,temparms);
			Setattr(yyval.node,"sym:name",nname);
			Setattr(yyval.node,"feature:ignore","1");
		      }
		      Delattr(yyval.node,"templatetype");
		      Setattr(yyval.node,"template",n);
		      tnode = yyval.node;
		      Setfile(yyval.node,cparse_file);
		      Setline(yyval.node,cparse_line);
		      Delete(temparms);
		      
		      add_symbols_copy(yyval.node);
		      if (Strcmp(nodeType(yyval.node),"class") == 0) {

			/* Identify pure abstract methods */
			Setattr(yyval.node,"abstract", pure_abstract(firstChild(yyval.node)));
			
                        /* Set up inheritance in symbol table */
			{
			  Symtab  *csyms;
 			  List *baselist = Getattr(yyval.node,"baselist");
			  csyms = Swig_symbol_current();
			  Swig_symbol_setscope(Getattr(yyval.node,"symtab"));
			  if (baselist) {
			    List *bases = make_inherit_list(Getattr(yyval.node,"name"),baselist);
			    if (bases) {
			      Iterator s;
			      for (s = First(bases); s.item; s = Next(s)) {
				Symtab *st = Getattr(s.item,"symtab");
				if (st) {
				  Swig_symbol_inherit(st);
				}
			      }
			    }
			  }
			  Swig_symbol_setscope(csyms);
			}

			/* Merge in addmethods for this class */
			
			/* !!! This may be broken.  We may have to  add the addmethods at the beginning of
			   the class */
			
			if (extendhash) {
			  String *clsname;
			  Node *am;
			  if (Namespaceprefix) {
			    clsname = NewStringf("%s::%s", Namespaceprefix, Getattr(yyval.node,"name"));
			  } else {
			    clsname = Getattr(yyval.node,"name");
			  }
			  am = Getattr(extendhash,clsname);
			  if (am) {
			    Symtab *st = Swig_symbol_current();
			    Swig_symbol_setscope(Getattr(yyval.node,"symtab"));
			    /*			    Printf(stdout,"%s: %s %x %x\n", Getattr($$,"name"), clsname, Swig_symbol_current(), Getattr($$,"symtab")); */
			    merge_extensions(yyval.node,am);
			    Swig_symbol_setscope(st);
			    appendChild(yyval.node,am);
			    Delattr(extendhash,clsname);
			  }
			}
			/* Add to classes hash */
			if (!classes) classes = NewHash();

			{
			  if (Namespaceprefix) {
			    String *temp = NewStringf("%s::%s", Namespaceprefix, Getattr(yyval.node,"name"));
			    Setattr(classes,temp,yyval.node);
			  } else {
			    Setattr(classes,Swig_symbol_qualifiedscopename(yyval.node),yyval.node);
			  }
			}
		      }
		    }
		    if (yyval.node && nspace) {
		      appendChild(nspace_inner,yyval.node);
		      yyval.node = nspace;
		    }
		  }
   	          Swig_symbol_setscope(tscope);
		  Namespaceprefix = Swig_symbol_qualifiedscopename(0);

                }
    break;

  case 100:
#line 2127 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		  Swig_warning(0,cparse_file, cparse_line,"%s\n", yyvsp[0].id);
		  yyval.node = 0;
               }
    break;

  case 101:
#line 2137 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                    yyval.node = yyvsp[0].node; 
                    if (yyval.node) {
   		      add_symbols(yyval.node);
   	            }
                }
    break;

  case 102:
#line 2143 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 103:
#line 2147 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
		  if (Strcmp(yyvsp[-3].id,"C") == 0) {
		    yyval.node = new_node("extern");
		    Setattr(yyval.node,"name",yyvsp[-3].id);
		    appendChild(yyval.node,firstChild(yyvsp[-1].node));
		  } else {
		     Swig_warning(WARN_PARSE_UNDEFINED_EXTERN,cparse_file, cparse_line,"Unrecognized extern type \"%s\" (ignored).\n", yyvsp[-3].id);
		     yyval.node = 0;
		  }
                }
    break;

  case 104:
#line 2163 "CableSwig/SWIG/Source/CParse/parser.y"
    {
              yyval.node = new_node("cdecl");
	      if (yyvsp[-1].dtype.qualifier) SwigType_push(yyvsp[-2].decl.type,yyvsp[-1].dtype.qualifier);
	      Setattr(yyval.node,"type",yyvsp[-3].type);
	      Setattr(yyval.node,"storage",yyvsp[-4].id);
	      Setattr(yyval.node,"name",yyvsp[-2].decl.id);
	      Setattr(yyval.node,"decl",yyvsp[-2].decl.type);
	      Setattr(yyval.node,"parms",yyvsp[-2].decl.parms);
	      Setattr(yyval.node,"value",yyvsp[-1].dtype.val);
	      Setattr(yyval.node,"throws",yyvsp[-1].dtype.throws);
	      if (!yyvsp[0].node) {
		if (Len(scanner_ccode)) {
		  Setattr(yyval.node,"code",Copy(scanner_ccode));
		}
	      } else {
		Node *n = yyvsp[0].node;
		/* Inherit attributes */
		while (n) {
		  Setattr(n,"type",Copy(yyvsp[-3].type));
		  Setattr(n,"storage",yyvsp[-4].id);
		  n = nextSibling(n);
		}
	      }
	      if (yyvsp[-1].dtype.bitfield) {
		Setattr(yyval.node,"bitfield", yyvsp[-1].dtype.bitfield);
	      }

	      /* Look for "::" declarations (ignored) */
	      if (Strstr(yyvsp[-2].decl.id,"::")) {
		if (Namespaceprefix) {
		  /* This is a special case. If the scope name of the declaration exactly
                     matches that of the declaration, then we will allow it. Otherwise, delete. */
		  String *p = Swig_scopename_prefix(yyvsp[-2].decl.id);
		  if (Strcmp(p,Namespaceprefix) == 0) {
		    Setattr(yyval.node,"name",Swig_scopename_last(yyvsp[-2].decl.id));
		    set_nextSibling(yyval.node,yyvsp[0].node);
		  } else {
		    Delete(yyval.node);
		    yyval.node = yyvsp[0].node;
		  }
		  Delete(p);
		} else {
		  Delete(yyval.node);
		  yyval.node = yyvsp[0].node;
		}
	      } else {
		set_nextSibling(yyval.node,yyvsp[0].node);
	      }
           }
    break;

  case 105:
#line 2216 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                   yyval.node = 0;
                   Clear(scanner_ccode); 
               }
    break;

  case 106:
#line 2220 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.node = new_node("cdecl");
		 if (yyvsp[-1].dtype.qualifier) SwigType_push(yyvsp[-2].decl.type,yyvsp[-1].dtype.qualifier);
		 Setattr(yyval.node,"name",yyvsp[-2].decl.id);
		 Setattr(yyval.node,"decl",yyvsp[-2].decl.type);
		 Setattr(yyval.node,"parms",yyvsp[-2].decl.parms);
		 Setattr(yyval.node,"value",yyvsp[-1].dtype.val);
		 Setattr(yyval.node,"throws",yyvsp[-1].dtype.throws);
		 if (yyvsp[-1].dtype.bitfield) {
		   Setattr(yyval.node,"bitfield", yyvsp[-1].dtype.bitfield);
		 }
		 if (!yyvsp[0].node) {
		   if (Len(scanner_ccode)) {
		     Setattr(yyval.node,"code",Copy(scanner_ccode));
		   }
		 } else {
		   set_nextSibling(yyval.node,yyvsp[0].node);
		 }
	       }
    break;

  case 107:
#line 2239 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                   skip_balanced('{','}');
                   yyval.node = 0;
               }
    break;

  case 108:
#line 2245 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                   yyval.dtype = yyvsp[0].dtype; 
                   yyval.dtype.qualifier = 0;
		   yyval.dtype.throws = 0;
              }
    break;

  case 109:
#line 2250 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                   yyval.dtype = yyvsp[0].dtype; 
		   yyval.dtype.qualifier = yyvsp[-1].str;
		   yyval.dtype.throws = 0;
	      }
    break;

  case 110:
#line 2255 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
		   yyval.dtype = yyvsp[0].dtype; 
                   yyval.dtype.qualifier = 0;
		   yyval.dtype.throws = yyvsp[-2].pl;
              }
    break;

  case 111:
#line 2260 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                   yyval.dtype = yyvsp[0].dtype; 
                   yyval.dtype.qualifier = yyvsp[-5].str;
		   yyval.dtype.throws = yyvsp[-2].pl;
              }
    break;

  case 112:
#line 2272 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                  yyval.node = new_node("enum");
		  Setattr(yyval.node,"name",yyvsp[-4].id);
		  appendChild(yyval.node,yyvsp[-2].node);
		  add_symbols(yyval.node);           /* Add to tag space */
		  add_symbols(yyvsp[-2].node);       /* Add enum values to id space */
	       }
    break;

  case 113:
#line 2280 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 Node *n;
		 SwigType *ty = 0;
		 String   *unnamed = 0;

		 yyval.node = new_node("enum");
		 if (yyvsp[-5].id) {
		   Setattr(yyval.node,"name",yyvsp[-5].id);
		   ty = NewStringf("enum %s", yyvsp[-5].id);
		 } else if (yyvsp[-1].decl.id){
		   unnamed = make_unnamed();
		   ty = NewStringf("enum %s", unnamed);
		   Setattr(yyval.node,"unnamed",unnamed);
		   /* WF 20/12/2001: Cannot get sym:name and symtab set without setting name - fix!
		      // I don't think sym:name should be set. */
		   Setattr(yyval.node,"name",yyvsp[-1].decl.id);
		   Setattr(yyval.node,"tdname",yyvsp[-1].decl.id);
		   Setattr(yyval.node,"storage",yyvsp[-7].id);
		 }
		 appendChild(yyval.node,yyvsp[-3].node);
		 n = new_node("cdecl");
		 Setattr(n,"type",ty);
		 Setattr(n,"name",yyvsp[-1].decl.id);
		 Setattr(n,"storage",yyvsp[-7].id);
		 Setattr(n,"decl",yyvsp[-1].decl.type);
		 Setattr(n,"parms",yyvsp[-1].decl.parms);
		 Setattr(n,"unnamed",unnamed);
		 if (yyvsp[0].node) {
		   Node *p = yyvsp[0].node;
		   set_nextSibling(n,p);
		   while (p) {
		     Setattr(p,"type",Copy(ty));
		     Setattr(p,"unnamed",unnamed);
		     Setattr(p,"storage",yyvsp[-7].id);
		     p = nextSibling(p);
		   }
		 } else {
		   if (Len(scanner_ccode)) {
		     Setattr(n,"code",Copy(scanner_ccode));
		   }
		 }
		 add_symbols(yyval.node);        /* Add enum to tag space */
		 set_nextSibling(yyval.node,n);
		 add_symbols(yyvsp[-3].node);       /* Add to id space */
	         add_symbols(n);
	       }
    break;

  case 114:
#line 2328 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                   /* This is a sick hack.  If the ctor_end has parameters,
                      and the parms paremeter only has 1 parameter, this
                      could be a declaration of the form:

                         type (id)(parms)

			 Otherwise it's an error. */
                    int err = 0;
                    yyval.node = 0;

		    if ((ParmList_len(yyvsp[-2].pl) == 1) && (!Swig_scopename_check(yyvsp[-4].type))) {
		      SwigType *ty = Getattr(yyvsp[-2].pl,"type");
		      String *name = Getattr(yyvsp[-2].pl,"name");
		      err = 1;
		      if (!name) {
			yyval.node = new_node("cdecl");
			Setattr(yyval.node,"type",yyvsp[-4].type);
			Setattr(yyval.node,"storage",yyvsp[-5].id);
			Setattr(yyval.node,"name",ty);

			if (yyvsp[0].decl.have_parms) {
			  SwigType *decl = NewString("");
			  SwigType_add_function(decl,yyvsp[0].decl.parms);
			  Setattr(yyval.node,"decl",decl);
			  Setattr(yyval.node,"parms",yyvsp[0].decl.parms);
			  if (Len(scanner_ccode)) {
			    Setattr(yyval.node,"code",Copy(scanner_ccode));
			  }
			}
			if (yyvsp[0].decl.defarg) {
			  Setattr(yyval.node,"value",yyvsp[0].decl.defarg);
			}
			Setattr(yyval.node,"throws",yyvsp[0].decl.throws);
			err = 0;
		      }
		    }
		    if (err) {
		      Swig_error(cparse_file,cparse_line,"Syntax error in input.\n");
		    }
                }
    break;

  case 115:
#line 2375 "CableSwig/SWIG/Source/CParse/parser.y"
    {  yyval.node = yyvsp[0].node; }
    break;

  case 116:
#line 2376 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 117:
#line 2377 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 118:
#line 2378 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 119:
#line 2379 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 120:
#line 2380 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = 0; }
    break;

  case 121:
#line 2386 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                   List *bases = 0;
                   class_rename = make_name(yyvsp[-2].str,0);
		   Classprefix = NewString(yyvsp[-2].str);
		   /* Deal with inheritance  */
		   if (yyvsp[-1].bases) {
		     bases = make_inherit_list(yyvsp[-2].str,yyvsp[-1].bases);
		   }
		   if (SwigType_istemplate(yyvsp[-2].str)) {
		     String *fbase, *tbase, *prefix;
		     prefix = SwigType_templateprefix(yyvsp[-2].str);
		     if (Namespaceprefix) {
		       fbase = NewStringf("%s::%s", Namespaceprefix,yyvsp[-2].str);
		       tbase = NewStringf("%s::%s", Namespaceprefix, prefix);
		     } else {
		       fbase = Copy(yyvsp[-2].str);
		       tbase = Copy(prefix);
		     }
		     rename_inherit(tbase,fbase);
		     Delete(fbase);
		     Delete(tbase);
		     Delete(prefix);
		   }
                   if (strcmp(yyvsp[-3].id,"class") == 0) {
		     cplus_mode = CPLUS_PRIVATE;
		   } else {
		     cplus_mode = CPLUS_PUBLIC;
		   }
		   Swig_symbol_newscope();
		   Swig_symbol_setscopename(yyvsp[-2].str);
		   if (bases) {
		     Iterator s;
		     for (s = First(bases); s.item; s = Next(s)) {
		       Symtab *st = Getattr(s.item,"symtab");
		       if (st) {
			 Swig_symbol_inherit(st); 
		       }
		     }
		   }
		   Namespaceprefix = Swig_symbol_qualifiedscopename(0);
		   cparse_start_line = cparse_line;

		   /* If there are active template parameters, we need to make sure they are
                      placed in the class symbol table so we can catch shadows */

		   if (template_parameters) {
		     Parm *tp = template_parameters;
		     while(tp) {
		       Node *tn = new_node("templateparm");
		       Setattr(tn,"name",Getattr(tp,"name"));
		       Swig_symbol_cadd(Copy(Getattr(tp,"name")),tn);
		       tp = nextSibling(tp);
		     }
		   }
		   inclass = 1;
               }
    break;

  case 122:
#line 2441 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 Node *p;
		 SwigType *ty;
		 inclass = 0;
		 yyval.node = new_node("class");
		 Setline(yyval.node,cparse_start_line);
		 Setattr(yyval.node,"name",yyvsp[-6].str);
		 Setattr(yyval.node,"kind",yyvsp[-7].id);
		 Setattr(yyval.node,"baselist",yyvsp[-5].bases);
		 Setattr(yyval.node,"allows_typedef","1");
		 /* Check for pure-abstract class */
		 Setattr(yyval.node,"abstract", pure_abstract(yyvsp[-2].node));
		 
		 /* This bit of code merges in a previously defined %extend directive (if any) */
		 if (extendhash) {
		   String *clsname = Swig_symbol_qualifiedscopename(0);
		   Node *am = Getattr(extendhash,clsname);
		   if (am) {
		     merge_extensions(yyval.node,am);
		     appendChild(yyval.node,am);
		     Delattr(extendhash,clsname);
		   }
		   Delete(clsname);
		 }
		 if (!classes) classes = NewHash();
		 Setattr(classes,Swig_symbol_qualifiedscopename(0),yyval.node);

		 appendChild(yyval.node,yyvsp[-2].node);
		 p = yyvsp[0].node;
		 if (p) {
		   set_nextSibling(yyval.node,p);
		 }
		 
		 if (cparse_cplusplus) {
		   ty = NewString(yyvsp[-6].str);
		 } else {
		   ty = NewStringf("%s %s", yyvsp[-7].id,yyvsp[-6].str);
		 }
		 while (p) {
		   Setattr(p,"storage",yyvsp[-8].id);
		   Setattr(p,"type",ty);
		   p = nextSibling(p);
		 }
		 /* Dump nested classes */
		 {
		   String *name = yyvsp[-6].str;
		   if (yyvsp[0].node) {
		     SwigType *decltype = Getattr(yyvsp[0].node,"decl");
		     if (Cmp(yyvsp[-8].id,"typedef") == 0) {
		       if (!decltype || !Len(decltype)) {
			 name = Getattr(yyvsp[0].node,"name");
			 Setattr(yyval.node,"tdname",Copy(name));

			 /* Use typedef name as class name */
			 if (class_rename && (Strcmp(class_rename,yyvsp[-6].str) == 0)) {
			   class_rename = NewString(name);
			 }
			 if (!Getattr(classes,name)) {
			   Setattr(classes,name,yyval.node);
			 }
			 Setattr(yyval.node,"decl",decltype);
		       }
		     }
		   }
		   appendChild(yyval.node,dump_nested(Char(name)));
		 }
		 Setattr(yyval.node,"symtab",Swig_symbol_popscope());

		 yyrename = NewString(class_rename);
		 Classprefix = 0;
		 Namespaceprefix = Swig_symbol_qualifiedscopename(0);
		 add_symbols(yyval.node);
		 if (yyvsp[0].node)
		   add_symbols(yyvsp[0].node);

	       }
    break;

  case 123:
#line 2520 "CableSwig/SWIG/Source/CParse/parser.y"
    {
	       class_rename = make_name(0,0);
	       if (strcmp(yyvsp[-1].id,"class") == 0) {
		 cplus_mode = CPLUS_PRIVATE;
	       } else {
		 cplus_mode = CPLUS_PUBLIC;
	       }
	       Swig_symbol_newscope();
	       cparse_start_line = cparse_line;
	       inclass = 1;
	       Classprefix = NewString("");
	       Namespaceprefix = Swig_symbol_qualifiedscopename(0);
             }
    break;

  case 124:
#line 2532 "CableSwig/SWIG/Source/CParse/parser.y"
    {
	       String *unnamed;
	       Node *n, *p, *pp = 0;
	       Classprefix = 0;
	       inclass = 0;
	       unnamed = make_unnamed();
	       yyval.node = new_node("class");
	       Setline(yyval.node,cparse_start_line);
	       Setattr(yyval.node,"kind",yyvsp[-6].id);
	       Setattr(yyval.node,"storage",yyvsp[-7].id);
	       Setattr(yyval.node,"unnamed",unnamed);
	       Setattr(yyval.node,"allows_typedef","1");

	       /* Check for pure-abstract class */
	       Setattr(yyval.node,"abstract", pure_abstract(yyvsp[-3].node));

	       n = new_node("cdecl");
	       Setattr(n,"name",yyvsp[-1].decl.id);
	       Setattr(n,"unnamed",unnamed);
	       Setattr(n,"type",unnamed);
	       Setattr(n,"decl",yyvsp[-1].decl.type);
	       Setattr(n,"parms",yyvsp[-1].decl.parms);
	       Setattr(n,"storage",yyvsp[-7].id);
	       pp = n;
	       if (yyvsp[0].node) {
		 set_nextSibling(n,yyvsp[0].node);
		 p = yyvsp[0].node;
		 while (p) {
		   pp = p;
		   Setattr(p,"unnamed",unnamed);
		   Setattr(p,"type",Copy(unnamed));
		   Setattr(p,"storage",yyvsp[-7].id);
		   p = nextSibling(p);
		 }
	       }
	       set_nextSibling(yyval.node,n);
	       {
		 /* If a proper typedef name was given, we'll use it to set the scope name */
		 String *name = 0;
		 if (yyvsp[-7].id && (strcmp(yyvsp[-7].id,"typedef") == 0)) {
		   if (!Len(yyvsp[-1].decl.type)) {	
		     name = yyvsp[-1].decl.id;
		     Setattr(yyval.node,"tdname",name);
		     Setattr(yyval.node,"name",name);
		     /* if (!class_rename) class_rename = NewString(name); */
		     Swig_symbol_setscopename(name);

		     /* If a proper name given, we use that as the typedef, not unnamed */
		     Clear(unnamed);
		     Append(unnamed, name);
		     
		     n = nextSibling(n);
		     set_nextSibling(yyval.node,n);

		     /* Check for previous extensions */
		     if (extendhash) {
		       String *clsname = Swig_symbol_qualifiedscopename(0);
		       Node *am = Getattr(extendhash,clsname);
		       if (am) {
			 /* Merge the extension into the symbol table */
			 merge_extensions(yyval.node,am);
			 appendChild(yyval.node,am);
			 Delattr(extendhash,clsname);
		       }
		       Delete(clsname);
		     }
		     if (!classes) classes = NewHash();
		     Setattr(classes,Swig_symbol_qualifiedscopename(0),yyval.node);
		   } else {
		     Swig_symbol_setscopename((char*)"<unnamed>");
		   }
		 }
		 appendChild(yyval.node,yyvsp[-3].node);
		 appendChild(yyval.node,dump_nested(Char(name)));
	       }
	       /* Pop the scope */
	       Setattr(yyval.node,"symtab",Swig_symbol_popscope());
	       if (class_rename) {
		 yyrename = NewString(class_rename);
	       }
	       Namespaceprefix = Swig_symbol_qualifiedscopename(0);
	       add_symbols(yyval.node);
	       add_symbols(n);
              }
    break;

  case 125:
#line 2618 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = 0; }
    break;

  case 126:
#line 2619 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                        yyval.node = new_node("cdecl");
                        Setattr(yyval.node,"name",yyvsp[-1].decl.id);
                        Setattr(yyval.node,"decl",yyvsp[-1].decl.type);
                        Setattr(yyval.node,"parms",yyvsp[-1].decl.parms);
			set_nextSibling(yyval.node,yyvsp[0].node);
                    }
    break;

  case 127:
#line 2631 "CableSwig/SWIG/Source/CParse/parser.y"
    {
              if (yyvsp[-3].id && (Strcmp(yyvsp[-3].id,"friend") == 0)) {
		/* Ignore */
                yyval.node = 0; 
	      } else {
		yyval.node = new_node("classforward");
		Setattr(yyval.node,"kind",yyvsp[-2].id);
		Setattr(yyval.node,"name",yyvsp[-1].str);
		Setattr(yyval.node,"sym:weak", "1");
		add_symbols(yyval.node);
	      }
             }
    break;

  case 128:
#line 2649 "CableSwig/SWIG/Source/CParse/parser.y"
    { template_parameters = yyvsp[-1].tparms; }
    break;

  case 129:
#line 2649 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		      String *tname = 0;
		      int     error = 0;

                      template_parameters = 0;
                      yyval.node = yyvsp[0].node;
		      if (yyval.node) tname = Getattr(yyval.node,"name");
		      
		      /* Check if the class is a template specialization */
		      if ((yyval.node) && (Strstr(tname,"<")) && (Strncmp(tname,"operator ",9) != 0)) {
			/* If a specialization.  Check if defined. */
			Node *tempn = 0;
			{
			  String *tbase = SwigType_templateprefix(tname);
			  tempn = Swig_symbol_clookup_local(tbase,0);
			  if (!tempn || (Strcmp(nodeType(tempn),"template") != 0)) {
			    Swig_warning(WARN_PARSE_TEMPLATE_SP_UNDEF, Getfile(yyval.node),Getline(yyval.node),"Specialization of non-template '%s'.\n", tbase);
			    tempn = 0;
			    error = 1;
			  }
			  Delete(tbase);
			}
			Setattr(yyval.node,"specialization","1");
			Setattr(yyval.node,"templatetype",nodeType(yyval.node));
			set_nodeType(yyval.node,"template");
			/* Template partial specialization */
			if (tempn && (yyvsp[-3].tparms) && (yyvsp[0].node)) {
			  List   *tlist;
			  String *targs = SwigType_templateargs(tname);
			  tlist = SwigType_parmlist(targs);
			  /*			  Printf(stdout,"targs = '%s' %s\n", targs, tlist); */
			  if (!Getattr(yyval.node,"sym:weak")) {
			    Setattr(yyval.node,"sym:typename","1");
			  }
			  
			  if (Len(tlist) != ParmList_len(Getattr(tempn,"templateparms"))) {
			    Swig_error(Getfile(yyval.node),Getline(yyval.node),"Inconsistent argument count in template partial specialization. %d %d\n", Len(tlist), ParmList_len(Getattr(tempn,"templateparms")));
			    
			  } else {

			  /* This code builds the argument list for the partial template
                             specialization.  This is a little hairy, but the idea is as
                             follows:

                             $3 contains a list of arguments supplied for the template.
                             For example template<class T>.

                             tlist is a list of the specialization arguments--which may be
                             different.  For example class<int,T>.

                             tp is a copy of the arguments in the original template definition.
     
                             The patching algorithm walks through the list of supplied
                             arguments ($3), finds the position in the specialization arguments
                             (tlist), and then patches the name in the argument list of the
                             original template.
			  */

			  {
			    String *pn;
			    Parm *p, *p1;
			    int i, nargs;
			    Parm *tp = CopyParmList(Getattr(tempn,"templateparms"));
			    nargs = Len(tlist);
			    p = yyvsp[-3].tparms;
			    while (p) {
			      for (i = 0; i < nargs; i++){
				pn = Getattr(p,"name");
				if (Strcmp(pn,SwigType_base(Getitem(tlist,i))) == 0) {
				  int j;
				  Parm *p1 = tp;
				  for (j = 0; j < i; j++) {
				    p1 = nextSibling(p1);
				  }
				  Setattr(p1,"name",pn);
				  Setattr(p1,"partialarg","1");
				}
			      }
			      p = nextSibling(p);
			    }
			    p1 = tp;
			    i = 0;
			    while (p1) {
			      if (!Getattr(p1,"partialarg")) {
				Delattr(p1,"name");
				Setattr(p1,"type", Getitem(tlist,i));
			      } 
			      i++;
			      p1 = nextSibling(p1);
			    }
			    Setattr(yyval.node,"templateparms",tp);
			  }
#if 0
			  /* Patch the parameter list */
			  if (tempn) {
			    Parm *p,*p1;
			    ParmList *tp = CopyParmList(Getattr(tempn,"templateparms"));
			    p = yyvsp[-3].tparms;
			    p1 = tp;
			    while (p && p1) {
			      String *pn = Getattr(p,"name");
			      Printf(stdout,"pn = '%s'\n", pn);
			      if (pn) Setattr(p1,"name",pn);
			      else Delattr(p1,"name");
			      pn = Getattr(p,"type");
			      if (pn) Setattr(p1,"type",pn);
			      p = nextSibling(p);
			      p1 = nextSibling(p1);
			    }
			    Setattr(yyval.node,"templateparms",tp);
			  } else {
			    Setattr(yyval.node,"templateparms",yyvsp[-3].tparms);
			  }
#endif
			  Delattr(yyval.node,"specialization");
			  Setattr(yyval.node,"partialspecialization","1");
			  /* Create a specialized name for matching */
			  {
			    Parm *p = yyvsp[-3].tparms;
			    String *fname = NewString(Getattr(yyval.node,"name"));
			    String *ffname = 0;

			    char   tmp[32];
			    int    i;
			    while (p) {
			      String *n = Getattr(p,"name");
			      if (!n) {
				p = nextSibling(p);
				continue;
			      }
			      for (i = 0; i < Len(tlist); i++) {
				if (Strstr(Getitem(tlist,i),n)) {
				  sprintf(tmp,"$%d",i+1);
				  Replaceid(fname,n,tmp);
				}
			      }
			      p = nextSibling(p);
			    }
			    /* Patch argument names with typedef */
			    {
			      Iterator tt;
			      List *tparms = SwigType_parmlist(fname);
			      ffname = SwigType_templateprefix(fname);
			      Append(ffname,"<(");
			      for (tt = First(tparms); tt.item; ) {
				SwigType *ttr = Swig_symbol_typedef_reduce(tt.item,0);
				ttr = Swig_symbol_type_qualify(ttr,0);
				Append(ffname,ttr);
				tt = Next(tt);
				if (tt.item) Putc(',',ffname);
			      }
			      Append(ffname,")>");
			    }
			    {
			      String *partials = Getattr(tempn,"partials");
			      if (!partials) {
				partials = NewList();
				Setattr(tempn,"partials",partials);
			      }
			      /*			      Printf(stdout,"partial: fname = '%s', '%s'\n", fname, Swig_symbol_typedef_reduce(fname,0)); */
			      Append(partials,ffname);
			    }
			    Setattr(yyval.node,"partialargs",ffname);
			    Swig_symbol_cadd(ffname,yyval.node);
			  }
			  }
			  Delete(tlist);
			  Delete(targs);
			} else {
			  /* Need to resolve exact specialization name */
			  /* This needs to be rewritten */
			  List *tparms;
			  String *fname;
			  Iterator tt;
			  fname = SwigType_templateprefix(tname);
			  tparms = SwigType_parmlist(tname);
			  Append(fname,"<(");
			  for (tt = First(tparms); tt.item; ) {
			    SwigType *ttr = Swig_symbol_typedef_reduce(tt.item,0);
			    ttr = Swig_symbol_type_qualify(ttr,0);
			    Append(fname,ttr);
			    tt = Next(tt);
			    if (tt.item) Putc(',',fname);
			  }
			  Append(fname,")>");
			  Swig_symbol_cadd(fname,yyval.node);
			}
		      }  else if (yyval.node) {
			Setattr(yyval.node,"templatetype",nodeType(yyvsp[0].node));
			set_nodeType(yyval.node,"template");
			Setattr(yyval.node,"templateparms", yyvsp[-3].tparms);
			if (!Getattr(yyval.node,"sym:weak")) {
			  Setattr(yyval.node,"sym:typename","1");
			}
			add_symbols(yyval.node);
			/* We also place a fully parameterized version in the symbol table */
			{
			  Parm *p;
			  String *fname = NewStringf("%s<(",Getattr(yyval.node,"name"));
			  p = yyvsp[-3].tparms;
			  while (p) {
			    String *n = Getattr(p,"name");
			    if (!n) n = Getattr(p,"type");
			    Printf(fname,"%s", n);
			    p = nextSibling(p);
			    if (p) Putc(',',fname);
			  }
			  Printf(fname,")>");
			  Swig_symbol_cadd(fname,yyval.node);
			}
		      }
		      if (error) yyval.node = 0;
                  }
    break;

  case 130:
#line 2862 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		  Swig_warning(WARN_PARSE_EXPLICIT_TEMPLATE, cparse_file, cparse_line, "Explicit template instantiation ignored.\n");
                   yyval.node = 0; 
                }
    break;

  case 131:
#line 2868 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		  yyval.node = yyvsp[0].node;
                }
    break;

  case 132:
#line 2871 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                   yyval.node = yyvsp[0].node;
                }
    break;

  case 133:
#line 2874 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                   yyval.node = yyvsp[0].node;
                }
    break;

  case 134:
#line 2877 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		  yyval.node = 0;
                }
    break;

  case 135:
#line 2880 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                  yyval.node = yyvsp[0].node;
                }
    break;

  case 136:
#line 2885 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		   /* Rip out the parameter names */
		  Parm *p = yyvsp[0].pl;
		  yyval.tparms = yyvsp[0].pl;

		  while (p) {
		    String *name = Getattr(p,"name");
		    if (!name) {
		      /* Hmmm. Maybe it's a 'class T' parameter */
		      char *type = Char(Getattr(p,"type"));
		      /* Template template parameter */
		      if (strncmp(type,"template<class> ",16) == 0) {
			type += 16;
		      }
		      if ((strncmp(type,"class ",6) == 0) || (strncmp(type,"typename ", 9) == 0)) {
			char *t = strchr(type,' ');
			Setattr(p,"name", t+1);
		      } else {
			/*
			 Swig_error(cparse_file, cparse_line, "Missing template parameter name\n");
			 $$.rparms = 0;
			 $$.parms = 0;
			 break; */
		      }
		    }
		    p = nextSibling(p);
		  }
                 }
    break;

  case 137:
#line 2917 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                  yyval.node = new_node("using");
		  Setattr(yyval.node,"uname",yyvsp[-1].str);
		  Setattr(yyval.node,"name", Swig_scopename_last(yyvsp[-1].str));
		  add_symbols(yyval.node);
             }
    break;

  case 138:
#line 2923 "CableSwig/SWIG/Source/CParse/parser.y"
    {
	       Node *n = Swig_symbol_clookup(yyvsp[-1].str,0);
	       if (!n) {
		 Swig_error(cparse_file, cparse_line, "Nothing known about namespace '%s'\n", yyvsp[-1].str);
		 yyval.node = 0;
	       } else {

		 while (Strcmp(nodeType(n),"using") == 0) {
		   n = Getattr(n,"node");
		 }
		 if (n) {
		   if (Strcmp(nodeType(n),"namespace") == 0) {
		     yyval.node = new_node("using");
		     Setattr(yyval.node,"node",n);
		     Setattr(yyval.node,"namespace", yyvsp[-1].str);
		     Swig_symbol_inherit(Getattr(n,"symtab"));
		   } else {
		     Swig_error(cparse_file, cparse_line, "'%s' is not a namespace.\n", yyvsp[-1].str);
		     yyval.node = 0;
		   }
		 } else {
		   yyval.node = 0;
		 }
	       }
             }
    break;

  case 139:
#line 2950 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                Hash *h;
                yyvsp[-2].node = Swig_symbol_current();
		h = Swig_symbol_clookup(yyvsp[-1].str,0);
		if (h && (Strcmp(nodeType(h),"namespace") == 0)) {
		  if (Getattr(h,"alias")) {
		    h = Getattr(h,"namespace");
		    Swig_warning(WARN_PARSE_NAMESPACE_ALIAS, cparse_file, cparse_line, "Namespace alias '%s' not allowed here. Assuming '%s'\n",
				 yyvsp[-1].str, Getattr(h,"name"));
		    yyvsp[-1].str = Getattr(h,"name");
		  }
		  Swig_symbol_setscope(Getattr(h,"symtab"));
		} else {
		  Swig_symbol_newscope();
		  Swig_symbol_setscopename(yyvsp[-1].str);
		}
		Namespaceprefix = Swig_symbol_qualifiedscopename(0);
             }
    break;

  case 140:
#line 2967 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                Node *n = yyvsp[-1].node;
		set_nodeType(n,"namespace");
		Setattr(n,"name",yyvsp[-4].str);
                Setattr(n,"symtab", Swig_symbol_popscope());
		Swig_symbol_setscope(yyvsp[-5].node);
		yyval.node = n;
		Namespaceprefix = Swig_symbol_qualifiedscopename(0);
		add_symbols(yyval.node);
             }
    break;

  case 141:
#line 2977 "CableSwig/SWIG/Source/CParse/parser.y"
    {
	       Hash *h;
	       yyvsp[-1].node = Swig_symbol_current();
	       h = Swig_symbol_clookup((char *)"",0);
	       if (h && (Strcmp(nodeType(h),"namespace") == 0)) {
		 Swig_symbol_setscope(Getattr(h,"symtab"));
	       } else {
		 Swig_symbol_newscope();
		 Swig_symbol_setscopename("__unnamed__");
	       }
	       Namespaceprefix = Swig_symbol_qualifiedscopename(0);
             }
    break;

  case 142:
#line 2988 "CableSwig/SWIG/Source/CParse/parser.y"
    {
	       yyval.node = yyvsp[-1].node;
	       set_nodeType(yyval.node,"namespace");
	       Setattr(yyval.node,"unnamed","1");
	       Setattr(yyval.node,"symtab", Swig_symbol_popscope());
	       Swig_symbol_setscope(yyvsp[-4].node);
	       Namespaceprefix = Swig_symbol_qualifiedscopename(0);
	       add_symbols(yyval.node);
             }
    break;

  case 143:
#line 2997 "CableSwig/SWIG/Source/CParse/parser.y"
    {
	       /* Namespace alias */
	       Node *n;
	       yyval.node = new_node("namespace");
	       Setattr(yyval.node,"name",yyvsp[-3].id);
	       Setattr(yyval.node,"alias",yyvsp[-1].str);
	       n = Swig_symbol_clookup(yyvsp[-1].str,0);
	       if (!n) {
		 Swig_error(cparse_file, cparse_line, "Unknown namespace '%s'\n", yyvsp[-1].str);
		 yyval.node = 0;
	       } else {
		 if (Strcmp(nodeType(n),"namespace") != 0) {
		   Swig_error(cparse_file, cparse_line, "'%s' is not a namespace\n",yyvsp[-1].str);
		   yyval.node = 0;
		 } else {
		   while (Getattr(n,"alias")) {
		     n = Getattr(n,"namespace");
		   }
		   Setattr(yyval.node,"namespace",n);
		   add_symbols(yyval.node);
		   /* Set up a scope alias */
		   Swig_symbol_alias(yyvsp[-3].id,Getattr(n,"symtab"));
		 }
	       }
             }
    break;

  case 144:
#line 3024 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                   yyval.node = yyvsp[-1].node;
		   if (yyval.node) {
		     Node *p = yyval.node;
		     Node *pp =0;
		     while (p) {
		       pp = p;
		       p = nextSibling(p);
		     }
		     set_nextSibling(pp,yyvsp[0].node);
		   } else {
		     yyval.node = yyvsp[0].node;
		   }
             }
    break;

  case 145:
#line 3038 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                  if (cplus_mode != CPLUS_PUBLIC) {
		     Swig_error(cparse_file,cparse_line,"%%extend can only be used in a public section\n");
		  }
             }
    break;

  case 146:
#line 3042 "CableSwig/SWIG/Source/CParse/parser.y"
    {
	       yyval.node = new_node("extend");
	       Swig_tag_nodes(yyvsp[-2].node,"feature:extend",(char*) "1");
	       appendChild(yyval.node,yyvsp[-2].node);
	       set_nextSibling(yyval.node,yyvsp[0].node);
	     }
    break;

  case 147:
#line 3048 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = 0;}
    break;

  case 148:
#line 3049 "CableSwig/SWIG/Source/CParse/parser.y"
    {
	       skip_decl();
		   {
		     static int last_error_line = -1;
		     if (last_error_line != cparse_line) {
		       Swig_error(cparse_file, cparse_line,"Syntax error in input.\n");
		       last_error_line = cparse_line;
		     }
		   }
	     }
    break;

  case 149:
#line 3058 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                yyval.node = yyvsp[0].node;
             }
    break;

  case 150:
#line 3069 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 151:
#line 3070 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                 yyval.node = yyvsp[0].node; 
		 if (extendmode) {
		   String *symname;
		   symname= make_name(Getattr(yyval.node,"name"), Getattr(yyval.node,"decl"));
		   if (Strcmp(symname,Getattr(yyval.node,"name")) == 0) {
		     /* No renaming operation.  Set name to class name */
		     yyrename = NewString(Getattr(current_class,"sym:name"));
		   } else {
		     yyrename = symname;
		   }
		 }
		 add_symbols(yyval.node);
             }
    break;

  case 152:
#line 3084 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 153:
#line 3085 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 154:
#line 3086 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 155:
#line 3087 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 156:
#line 3088 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 157:
#line 3089 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 158:
#line 3090 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = 0; }
    break;

  case 159:
#line 3091 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 160:
#line 3092 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 161:
#line 3093 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = 0; }
    break;

  case 162:
#line 3094 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 163:
#line 3095 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 164:
#line 3096 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = 0; }
    break;

  case 165:
#line 3097 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = 0; }
    break;

  case 166:
#line 3106 "CableSwig/SWIG/Source/CParse/parser.y"
    {
              if (Classprefix) {
		 SwigType *decl = NewString("");
		 yyval.node = new_node("constructor");
		 Setattr(yyval.node,"name",yyvsp[-4].type);
		 Setattr(yyval.node,"parms",yyvsp[-2].pl);
		 SwigType_add_function(decl,yyvsp[-2].pl);
		 Setattr(yyval.node,"decl",decl);
		 Setattr(yyval.node,"throws",yyvsp[0].decl.throws);
		 if (Len(scanner_ccode)) {
		   Setattr(yyval.node,"code",Copy(scanner_ccode));
		 }
		 Setattr(yyval.node,"feature:new","1");
	      } else {
		yyval.node = 0;
              }
              }
    break;

  case 167:
#line 3127 "CableSwig/SWIG/Source/CParse/parser.y"
    {
               yyval.node = new_node("destructor");
	       Setattr(yyval.node,"name",NewStringf("~%s",yyvsp[-4].str));
	       if (Len(scanner_ccode)) {
		 Setattr(yyval.node,"code",Copy(scanner_ccode));
	       }
	       {
		 String *decl = NewString("");
		 SwigType_add_function(decl,yyvsp[-2].pl);
		 Setattr(yyval.node,"decl",decl);
	       }
	       add_symbols(yyval.node);
	      }
    break;

  case 168:
#line 3143 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		yyval.node = new_node("destructor");
	       /* Check for template names.  If the class is a template
		  and the constructor is missing the template part, we
		  add it */
	       {
		 char *c = Strstr(Classprefix,"<");
		 if (c) {
		   if (!Strstr(yyvsp[-4].str,"<")) {
		     yyvsp[-4].str = NewStringf("%s%s",yyvsp[-4].str,c);
		   }
		 }
	       }
		Setattr(yyval.node,"storage","virtual");
		Setattr(yyval.node,"name",NewStringf("~%s",yyvsp[-4].str));
		if (yyvsp[0].dtype.val) {
		  Setattr(yyval.node,"value","0");
		}
		if (Len(scanner_ccode)) {
		  Setattr(yyval.node,"code",Copy(scanner_ccode));
		}
		{
		  String *decl = NewString("");
		  SwigType_add_function(decl,yyvsp[-2].pl);
		  Setattr(yyval.node,"decl",decl);
		}

		add_symbols(yyval.node);
	      }
    break;

  case 169:
#line 3176 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 yyval.node = new_node("cdecl");
                 Setattr(yyval.node,"type",yyvsp[-5].type);
		 Setattr(yyval.node,"name",yyvsp[-6].str);

		 SwigType_add_function(yyvsp[-4].type,yyvsp[-2].pl);
		 if (yyvsp[0].dtype.qualifier) {
		   SwigType_push(yyvsp[-4].type,yyvsp[0].dtype.qualifier);
		 }
		 Setattr(yyval.node,"decl",yyvsp[-4].type);
		 Setattr(yyval.node,"parms",yyvsp[-2].pl);
		 Setattr(yyval.node,"conversion_operator","1");
		 add_symbols(yyval.node);
              }
    break;

  case 170:
#line 3190 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 SwigType *decl;
                 yyval.node = new_node("cdecl");
                 Setattr(yyval.node,"type",yyvsp[-5].type);
		 Setattr(yyval.node,"name",yyvsp[-6].str);
		 decl = NewString("");
		 SwigType_add_reference(decl);
		 SwigType_add_function(decl,yyvsp[-2].pl);
		 if (yyvsp[0].dtype.qualifier) {
		   SwigType_push(decl,yyvsp[0].dtype.qualifier);
		 }
		 Setattr(yyval.node,"decl",decl);
		 Setattr(yyval.node,"parms",yyvsp[-2].pl);
		 Setattr(yyval.node,"conversion_operator","1");
		 add_symbols(yyval.node);
	       }
    break;

  case 171:
#line 3207 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		String *t = NewString("");
		yyval.node = new_node("cdecl");
		Setattr(yyval.node,"type",yyvsp[-4].type);
		Setattr(yyval.node,"name",yyvsp[-5].str);
		SwigType_add_function(t,yyvsp[-2].pl);
		if (yyvsp[0].dtype.qualifier) {
		  SwigType_push(t,yyvsp[0].dtype.qualifier);
		}
		Setattr(yyval.node,"decl",t);
		Setattr(yyval.node,"parms",yyvsp[-2].pl);
		Setattr(yyval.node,"conversion_operator","1");
		add_symbols(yyval.node);
              }
    break;

  case 172:
#line 3225 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 skip_balanced('{','}');
                 yyval.node = 0;
               }
    break;

  case 173:
#line 3232 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                yyval.node = new_node("access");
		Setattr(yyval.node,"kind","public");
                cplus_mode = CPLUS_PUBLIC;
              }
    break;

  case 174:
#line 3239 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                yyval.node = new_node("access");
                Setattr(yyval.node,"kind","private");
		cplus_mode = CPLUS_PRIVATE;
	      }
    break;

  case 175:
#line 3247 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
		yyval.node = new_node("access");
		Setattr(yyval.node,"kind","protected");
		cplus_mode = CPLUS_PROTECTED;
	      }
    break;

  case 176:
#line 3270 "CableSwig/SWIG/Source/CParse/parser.y"
    { cparse_start_line = cparse_line; skip_balanced('{','}');
	      }
    break;

  case 177:
#line 3271 "CableSwig/SWIG/Source/CParse/parser.y"
    {
	        yyval.node = 0;
		if (cplus_mode == CPLUS_PUBLIC) {
		  if (yyvsp[-1].decl.id) {
		    if (strcmp(yyvsp[-5].id,"class") == 0) {
		      Swig_warning(WARN_PARSE_NESTED_CLASS, cparse_file, cparse_line, "Nested classes not currently supported (ignored).\n");
		      /* Generate some code for a new class */
		    } else {
		      Nested *n = (Nested *) malloc(sizeof(Nested));
		      n->code = NewString("");
		      Printv(n->code, "typedef ", yyvsp[-5].id, " ",
			     Char(scanner_ccode), " $classname_", yyvsp[-1].decl.id, ";\n", NIL);

		      n->name = Swig_copy_string(yyvsp[-1].decl.id);
		      n->line = cparse_start_line;
		      n->type = NewString("");
		      n->kind = yyvsp[-5].id;
		      SwigType_push(n->type, yyvsp[-1].decl.type);
		      n->next = 0;
		      add_nested(n);
		    }
		  } else {
		    Swig_warning(WARN_PARSE_NESTED_CLASS, cparse_file, cparse_line, "Nested %s not currently supported (ignored).\n", yyvsp[-5].id);
		  }
		}
	      }
    break;

  case 178:
#line 3299 "CableSwig/SWIG/Source/CParse/parser.y"
    { cparse_start_line = cparse_line; skip_balanced('{','}');
              }
    break;

  case 179:
#line 3300 "CableSwig/SWIG/Source/CParse/parser.y"
    {
	        yyval.node = 0;
		if (cplus_mode == CPLUS_PUBLIC) {
		  if (strcmp(yyvsp[-4].id,"class") == 0) {
		    Swig_warning(WARN_PARSE_NESTED_CLASS,cparse_file, cparse_line,"Nested class not currently supported (ignored)\n");
		    /* Generate some code for a new class */
		  } else if (yyvsp[-1].decl.id) {
		    /* Generate some code for a new class */
		    Nested *n = (Nested *) malloc(sizeof(Nested));
		    n->code = NewString("");
		    Printv(n->code, "typedef ", yyvsp[-4].id, " " ,
			    Char(scanner_ccode), " $classname_", yyvsp[-1].decl.id, ";\n",NIL);
		    n->name = Swig_copy_string(yyvsp[-1].decl.id);
		    n->line = cparse_start_line;
		    n->type = NewString("");
		    n->kind = yyvsp[-4].id;
		    SwigType_push(n->type,yyvsp[-1].decl.type);
		    n->next = 0;
		    add_nested(n);
		  } else {
		    Swig_warning(WARN_PARSE_NESTED_CLASS, cparse_file, cparse_line, "Nested %s not currently supported (ignored).\n", yyvsp[-4].id);
		  }
		}
	      }
    break;

  case 180:
#line 3326 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.decl = yyvsp[0].decl;}
    break;

  case 181:
#line 3327 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.decl.id = 0; }
    break;

  case 182:
#line 3333 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 183:
#line 3336 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 184:
#line 3340 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 185:
#line 3343 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 186:
#line 3344 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 187:
#line 3345 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 188:
#line 3346 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 189:
#line 3347 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 190:
#line 3348 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 191:
#line 3349 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 192:
#line 3350 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = yyvsp[0].node; }
    break;

  case 193:
#line 3353 "CableSwig/SWIG/Source/CParse/parser.y"
    {
	            Clear(scanner_ccode);
               }
    break;

  case 194:
#line 3356 "CableSwig/SWIG/Source/CParse/parser.y"
    { skip_balanced('{','}'); }
    break;

  case 195:
#line 3359 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                     Clear(scanner_ccode);
                     yyval.dtype.val = 0;
                     yyval.dtype.qualifier = yyvsp[-1].dtype.qualifier;
                     yyval.dtype.bitfield = 0;
                     yyval.dtype.throws = yyvsp[-1].dtype.throws;
                }
    break;

  case 196:
#line 3366 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                     Clear(scanner_ccode);
                     yyval.dtype.val = yyvsp[-1].dtype.val;
                     yyval.dtype.qualifier = yyvsp[-3].dtype.qualifier;
                     yyval.dtype.bitfield = 0;
                     yyval.dtype.throws = yyvsp[-3].dtype.throws; 
               }
    break;

  case 197:
#line 3373 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                     skip_balanced('{','}');
                     yyval.dtype.val = 0;
                     yyval.dtype.qualifier = yyvsp[-1].dtype.qualifier;
                     yyval.dtype.bitfield = 0;
                     yyval.dtype.throws = yyvsp[-1].dtype.throws; 
               }
    break;

  case 198:
#line 3383 "CableSwig/SWIG/Source/CParse/parser.y"
    { }
    break;

  case 199:
#line 3389 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.id = "extern"; }
    break;

  case 200:
#line 3390 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                   if (strcmp(yyvsp[0].id,"C") == 0) {
		     yyval.id = "externc";
		   } else {
		     Swig_warning(WARN_PARSE_UNDEFINED_EXTERN,cparse_file, cparse_line,"Unrecognized extern type \"%s\" (ignored).\n", yyvsp[0].id);
		     yyval.id = 0;
		   }
               }
    break;

  case 201:
#line 3398 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.id = "static"; }
    break;

  case 202:
#line 3399 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.id = "typedef"; }
    break;

  case 203:
#line 3400 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.id = "virtual"; }
    break;

  case 204:
#line 3401 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.id = "friend"; }
    break;

  case 205:
#line 3402 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.id = 0; }
    break;

  case 206:
#line 3409 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 Parm *p;
		 yyval.pl = yyvsp[0].pl;
		 p = yyvsp[0].pl;
                 while (p) {
		   Replace(Getattr(p,"type"),"typename ", "", DOH_REPLACE_ANY);
		   p = nextSibling(p);
                 }
               }
    break;

  case 207:
#line 3420 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		  if (1) { 
		    set_nextSibling(yyvsp[-1].p,yyvsp[0].pl);
		    yyval.pl = yyvsp[-1].p;
		  } else {
		    yyval.pl = yyvsp[0].pl;
		  }
		}
    break;

  case 208:
#line 3428 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.pl = 0; }
    break;

  case 209:
#line 3431 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 set_nextSibling(yyvsp[-1].p,yyvsp[0].pl);
		 yyval.pl = yyvsp[-1].p;
                }
    break;

  case 210:
#line 3435 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.pl = 0; }
    break;

  case 211:
#line 3439 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                   SwigType_push(yyvsp[-1].type,yyvsp[0].decl.type);
		   yyval.p = NewParm(yyvsp[-1].type,yyvsp[0].decl.id);
		   Setfile(yyval.p,cparse_file);
		   Setline(yyval.p,cparse_line);
		   if (yyvsp[0].decl.defarg) {
		     Setattr(yyval.p,"value",yyvsp[0].decl.defarg);
		   }
		}
    break;

  case 212:
#line 3449 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                  yyval.p = NewParm(NewStringf("template<class> %s %s", yyvsp[-1].id,yyvsp[0].str), 0);
		  Setfile(yyval.p,cparse_file);
		  Setline(yyval.p,cparse_line);
                }
    break;

  case 213:
#line 3454 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		  SwigType *t = NewString("v(...)");
		  yyval.p = NewParm(t, 0);
		  Setfile(yyval.p,cparse_file);
		  Setline(yyval.p,cparse_line);
		}
    break;

  case 214:
#line 3462 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 Parm *p;
		 yyval.p = yyvsp[0].p;
		 p = yyvsp[0].p;
                 while (p) {
		   if (Getattr(p,"type")) {
		     Replace(Getattr(p,"type"),"typename ", "", DOH_REPLACE_ANY);
		   }
		   p = nextSibling(p);
                 }
               }
    break;

  case 215:
#line 3475 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		  if (1) { 
		    set_nextSibling(yyvsp[-1].p,yyvsp[0].p);
		    yyval.p = yyvsp[-1].p;
		  } else {
		    yyval.p = yyvsp[0].p;
		  }
		}
    break;

  case 216:
#line 3483 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.p = 0; }
    break;

  case 217:
#line 3486 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 set_nextSibling(yyvsp[-1].p,yyvsp[0].p);
		 yyval.p = yyvsp[-1].p;
                }
    break;

  case 218:
#line 3490 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.p = 0; }
    break;

  case 219:
#line 3494 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		  yyval.p = yyvsp[0].p;
		  {
		    /* We need to make a possible adjustment for integer parameters. */
		    SwigType *type;
		    Node     *n = 0;

		    while (!n) {
		      type = Getattr(yyvsp[0].p,"type");
		      n = Swig_symbol_clookup(type,0);     /* See if we can find a node that matches the typename */
		      if ((n) && (Strcmp(nodeType(n),"cdecl") == 0)) {
			SwigType *decl = Getattr(n,"decl");
			if (!SwigType_isfunction(decl)) {
			  String *value = Getattr(n,"value");
			  if (value) {
			    Setattr(yyvsp[0].p,"type",Copy(value));
			    n = 0;
			  }
			}
		      } else {
			break;
		      }
		    }
		  }
		  
               }
    break;

  case 220:
#line 3520 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                  yyval.p = NewParm(0,0);
                  Setfile(yyval.p,cparse_file);
		  Setline(yyval.p,cparse_line);
		  Setattr(yyval.p,"value",yyvsp[0].dtype.val);
               }
    break;

  case 221:
#line 3526 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                  yyval.p = NewParm(0,0);
                  Setfile(yyval.p,cparse_file);
		  Setline(yyval.p,cparse_line);
		  Setattr(yyval.p,"value",NewString(yyvsp[0].id));
               }
    break;

  case 222:
#line 3534 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                  yyval.dtype = yyvsp[0].dtype; 
		  if (yyvsp[0].dtype.type == T_ERROR) {
		    Swig_warning(WARN_PARSE_BAD_DEFAULT,cparse_file, cparse_line, "Can't set default argument (ignored)\n");
		    yyval.dtype.val = 0;
		    yyval.dtype.rawval = 0;
		    yyval.dtype.bitfield = 0;
		    yyval.dtype.throws = 0;
		  }
               }
    break;

  case 223:
#line 3544 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 Node *n = Swig_symbol_clookup(yyvsp[0].decl.id,0);
		 if (n) {
		   String *q = Swig_symbol_qualified(n);
		   if (Getattr(n,"access")) {
		     if (cplus_mode == CPLUS_PUBLIC) {
		       Swig_warning(WARN_PARSE_PRIVATE, cparse_file, cparse_line,"'%s' is private in this context.\n", yyvsp[0].decl.id);
		       Swig_warning(WARN_PARSE_BAD_DEFAULT, cparse_file, cparse_line,"Can't set default argument value (ignored)\n");
		     }
		     yyval.dtype.val = 0;
		   } else {
		     if (q) {
		       String *temp = NewStringf("%s::%s", q, Getattr(n,"name"));
		       yyval.dtype.val = NewStringf("&%s", SwigType_str(yyvsp[0].decl.type,temp));
		       Delete(q);
		       Delete(temp);
		     } else {
		       yyval.dtype.val = NewStringf("&%s", SwigType_str(yyvsp[0].decl.type,yyvsp[0].decl.id));
		     }
		   }
		 } else {
		   yyval.dtype.val = NewStringf("&%s",SwigType_str(yyvsp[0].decl.type,yyvsp[0].decl.id));
		 }
		 yyval.dtype.rawval = 0;
		 yyval.dtype.type = T_USER;
		 yyval.dtype.bitfield = 0;
		 yyval.dtype.throws = 0;
	       }
    break;

  case 224:
#line 3572 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 skip_balanced('{','}');
		 yyval.dtype.val = 0;
		 yyval.dtype.rawval = 0;
                 yyval.dtype.type = T_INT;
		 yyval.dtype.bitfield = 0;
		 yyval.dtype.throws = 0;
	       }
    break;

  case 225:
#line 3580 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
		 yyval.dtype.val = 0;
		 yyval.dtype.rawval = 0;
		 yyval.dtype.type = 0;
		 yyval.dtype.bitfield = yyvsp[0].dtype.val;
		 yyval.dtype.throws = 0;
	       }
    break;

  case 226:
#line 3587 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 yyval.dtype.val = 0;
                 yyval.dtype.rawval = 0;
                 yyval.dtype.type = T_INT;
		 yyval.dtype.bitfield = 0;
		 yyval.dtype.throws = 0;
               }
    break;

  case 227:
#line 3596 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 yyval.decl = yyvsp[-1].decl;
		 yyval.decl.defarg = yyvsp[0].dtype.rawval ? yyvsp[0].dtype.rawval : yyvsp[0].dtype.val;
            }
    break;

  case 228:
#line 3600 "CableSwig/SWIG/Source/CParse/parser.y"
    {
              yyval.decl = yyvsp[-1].decl;
	      yyval.decl.defarg = yyvsp[0].dtype.rawval ? yyvsp[0].dtype.rawval : yyvsp[0].dtype.val;
            }
    break;

  case 229:
#line 3604 "CableSwig/SWIG/Source/CParse/parser.y"
    {
   	      yyval.decl.type = 0;
              yyval.decl.id = 0;
	      yyval.decl.defarg = yyvsp[0].dtype.rawval ? yyvsp[0].dtype.rawval : yyvsp[0].dtype.val;
            }
    break;

  case 230:
#line 3611 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 yyval.decl = yyvsp[0].decl;
		 if (SwigType_isfunction(yyvsp[0].decl.type)) {
		   Delete(SwigType_pop_function(yyvsp[0].decl.type));
		 } else if (SwigType_isarray(yyvsp[0].decl.type)) {
		   SwigType *ta = SwigType_pop_arrays(yyvsp[0].decl.type);
		   if (SwigType_isfunction(yyvsp[0].decl.type)) {
		     Delete(SwigType_pop_function(yyvsp[0].decl.type));
		   } else {
		     yyval.decl.parms = 0;
		   }
		   SwigType_push(yyvsp[0].decl.type,ta);
		   Delete(ta);
		 } else {
		   yyval.decl.parms = 0;
		 }
            }
    break;

  case 231:
#line 3628 "CableSwig/SWIG/Source/CParse/parser.y"
    {
              yyval.decl = yyvsp[0].decl;
	      if (SwigType_isfunction(yyvsp[0].decl.type)) {
		Delete(SwigType_pop_function(yyvsp[0].decl.type));
	      } else if (SwigType_isarray(yyvsp[0].decl.type)) {
		SwigType *ta = SwigType_pop_arrays(yyvsp[0].decl.type);
		if (SwigType_isfunction(yyvsp[0].decl.type)) {
		  Delete(SwigType_pop_function(yyvsp[0].decl.type));
		} else {
		  yyval.decl.parms = 0;
		}
		SwigType_push(yyvsp[0].decl.type,ta);
		Delete(ta);
	      } else {
		yyval.decl.parms = 0;
	      }
            }
    break;

  case 232:
#line 3645 "CableSwig/SWIG/Source/CParse/parser.y"
    {
   	      yyval.decl.type = 0;
              yyval.decl.id = 0;
	      yyval.decl.parms = 0;
	      }
    break;

  case 233:
#line 3653 "CableSwig/SWIG/Source/CParse/parser.y"
    {
              yyval.decl = yyvsp[0].decl;
	      if (yyval.decl.type) {
		SwigType_push(yyvsp[-1].type,yyval.decl.type);
		Delete(yyval.decl.type);
	      }
	      yyval.decl.type = yyvsp[-1].type;
           }
    break;

  case 234:
#line 3661 "CableSwig/SWIG/Source/CParse/parser.y"
    {
              yyval.decl = yyvsp[0].decl;
	      SwigType_add_reference(yyvsp[-2].type);
              if (yyval.decl.type) {
		SwigType_push(yyvsp[-2].type,yyval.decl.type);
		Delete(yyval.decl.type);
	      }
	      yyval.decl.type = yyvsp[-2].type;
           }
    break;

  case 235:
#line 3670 "CableSwig/SWIG/Source/CParse/parser.y"
    {
              yyval.decl = yyvsp[0].decl;
	      if (!yyval.decl.type) yyval.decl.type = NewString("");
           }
    break;

  case 236:
#line 3674 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
	     yyval.decl = yyvsp[0].decl;
	     yyval.decl.type = NewString("");
	     SwigType_add_reference(yyval.decl.type);
	     if (yyvsp[0].decl.type) {
	       SwigType_push(yyval.decl.type,yyvsp[0].decl.type);
	       Delete(yyvsp[0].decl.type);
	     }
           }
    break;

  case 237:
#line 3683 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
	     SwigType *t = NewString("");

	     yyval.decl = yyvsp[0].decl;
	     SwigType_add_memberpointer(t,yyvsp[-2].str);
	     if (yyval.decl.type) {
	       SwigType_push(t,yyval.decl.type);
	       Delete(yyval.decl.type);
	     }
	     yyval.decl.type = t;
	     }
    break;

  case 238:
#line 3694 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
	     SwigType *t = NewString("");
	     yyval.decl = yyvsp[0].decl;
	     SwigType_add_memberpointer(t,yyvsp[-2].str);
	     SwigType_push(yyvsp[-3].type,t);
	     if (yyval.decl.type) {
	       SwigType_push(yyvsp[-3].type,yyval.decl.type);
	       Delete(yyval.decl.type);
	     }
	     yyval.decl.type = yyvsp[-3].type;
	     Delete(t);
	   }
    break;

  case 239:
#line 3706 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
	     yyval.decl = yyvsp[0].decl;
	     SwigType_add_memberpointer(yyvsp[-4].type,yyvsp[-3].str);
	     SwigType_add_reference(yyvsp[-4].type);
	     if (yyval.decl.type) {
	       SwigType_push(yyvsp[-4].type,yyval.decl.type);
	       Delete(yyval.decl.type);
	     }
	     yyval.decl.type = yyvsp[-4].type;
	   }
    break;

  case 240:
#line 3716 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
	     SwigType *t = NewString("");
	     yyval.decl = yyvsp[0].decl;
	     SwigType_add_memberpointer(t,yyvsp[-3].str);
	     SwigType_add_reference(t);
	     if (yyval.decl.type) {
	       SwigType_push(t,yyval.decl.type);
	       Delete(yyval.decl.type);
	     } 
	     yyval.decl.type = t;
	   }
    break;

  case 241:
#line 3729 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                /* Note: This is non-standard C.  Template declarator is allowed to follow an identifier */
                 yyval.decl.id = Char(yyvsp[0].str);
		 yyval.decl.type = 0;
		 yyval.decl.parms = 0;
		 yyval.decl.have_parms = 0;
                  }
    break;

  case 242:
#line 3736 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                  yyval.decl.id = Char(NewStringf("~%s",yyvsp[0].str));
                  yyval.decl.type = 0;
                  yyval.decl.parms = 0;
                  yyval.decl.have_parms = 0;
                  }
    break;

  case 243:
#line 3744 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                  yyval.decl.id = Char(yyvsp[-1].str);
                  yyval.decl.type = 0;
                  yyval.decl.parms = 0;
                  yyval.decl.have_parms = 0;
                  }
    break;

  case 244:
#line 3760 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		    yyval.decl = yyvsp[-1].decl;
		    if (yyval.decl.type) {
		      SwigType_push(yyvsp[-2].type,yyval.decl.type);
		      Delete(yyval.decl.type);
		    }
		    yyval.decl.type = yyvsp[-2].type;
                  }
    break;

  case 245:
#line 3768 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		    SwigType *t;
		    yyval.decl = yyvsp[-1].decl;
		    t = NewString("");
		    SwigType_add_memberpointer(t,yyvsp[-3].str);
		    if (yyval.decl.type) {
		      SwigType_push(t,yyval.decl.type);
		      Delete(yyval.decl.type);
		    }
		    yyval.decl.type = t;
		    }
    break;

  case 246:
#line 3779 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
		    SwigType *t;
		    yyval.decl = yyvsp[-2].decl;
		    t = NewString("");
		    SwigType_add_array(t,(char*)"");
		    if (yyval.decl.type) {
		      SwigType_push(t,yyval.decl.type);
		      Delete(yyval.decl.type);
		    }
		    yyval.decl.type = t;
                  }
    break;

  case 247:
#line 3790 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
		    SwigType *t;
		    yyval.decl = yyvsp[-3].decl;
		    t = NewString("");
		    SwigType_add_array(t,yyvsp[-1].dtype.val);
		    if (yyval.decl.type) {
		      SwigType_push(t,yyval.decl.type);
		      Delete(yyval.decl.type);
		    }
		    yyval.decl.type = t;
                  }
    break;

  case 248:
#line 3801 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		    SwigType *t;
                    yyval.decl = yyvsp[-3].decl;
		    t = NewString("");
		    SwigType_add_function(t,yyvsp[-1].pl);
		    if (!yyval.decl.have_parms) {
		      yyval.decl.parms = yyvsp[-1].pl;
		      yyval.decl.have_parms = 1;
		    }
		    if (!yyval.decl.type) {
		      yyval.decl.type = t;
		    } else {
		      SwigType_push(t, yyval.decl.type);
		      Delete(yyval.decl.type);
		      yyval.decl.type = t;
		    }
		  }
    break;

  case 249:
#line 3820 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                /* Note: This is non-standard C.  Template declarator is allowed to follow an identifier */
                 yyval.decl.id = Char(yyvsp[0].str);
		 yyval.decl.type = 0;
		 yyval.decl.parms = 0;
		 yyval.decl.have_parms = 0;
                  }
    break;

  case 250:
#line 3828 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                  yyval.decl.id = Char(NewStringf("~%s",yyvsp[0].str));
                  yyval.decl.type = 0;
                  yyval.decl.parms = 0;
                  yyval.decl.have_parms = 0;
                  }
    break;

  case 251:
#line 3845 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		    yyval.decl = yyvsp[-1].decl;
		    if (yyval.decl.type) {
		      SwigType_push(yyvsp[-2].type,yyval.decl.type);
		      Delete(yyval.decl.type);
		    }
		    yyval.decl.type = yyvsp[-2].type;
                  }
    break;

  case 252:
#line 3853 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                    yyval.decl = yyvsp[-1].decl;
		    if (!yyval.decl.type) {
		      yyval.decl.type = NewString("");
		    }
		    SwigType_add_reference(yyval.decl.type);
                  }
    break;

  case 253:
#line 3860 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		    SwigType *t;
		    yyval.decl = yyvsp[-1].decl;
		    t = NewString("");
		    SwigType_add_memberpointer(t,yyvsp[-3].str);
		    if (yyval.decl.type) {
		      SwigType_push(t,yyval.decl.type);
		      Delete(yyval.decl.type);
		    }
		    yyval.decl.type = t;
		    }
    break;

  case 254:
#line 3871 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
		    SwigType *t;
		    yyval.decl = yyvsp[-2].decl;
		    t = NewString("");
		    SwigType_add_array(t,(char*)"");
		    if (yyval.decl.type) {
		      SwigType_push(t,yyval.decl.type);
		      Delete(yyval.decl.type);
		    }
		    yyval.decl.type = t;
                  }
    break;

  case 255:
#line 3882 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
		    SwigType *t;
		    yyval.decl = yyvsp[-3].decl;
		    t = NewString("");
		    SwigType_add_array(t,yyvsp[-1].dtype.val);
		    if (yyval.decl.type) {
		      SwigType_push(t,yyval.decl.type);
		      Delete(yyval.decl.type);
		    }
		    yyval.decl.type = t;
                  }
    break;

  case 256:
#line 3893 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		    SwigType *t;
                    yyval.decl = yyvsp[-3].decl;
		    t = NewString("");
		    SwigType_add_function(t,yyvsp[-1].pl);
		    if (!yyval.decl.have_parms) {
		      yyval.decl.parms = yyvsp[-1].pl;
		      yyval.decl.have_parms = 1;
		    }
		    if (!yyval.decl.type) {
		      yyval.decl.type = t;
		    } else {
		      SwigType_push(t, yyval.decl.type);
		      Delete(yyval.decl.type);
		      yyval.decl.type = t;
		    }
		  }
    break;

  case 257:
#line 3912 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		    yyval.decl.type = yyvsp[0].type;
                    yyval.decl.id = 0;
		    yyval.decl.parms = 0;
		    yyval.decl.have_parms = 0;
                  }
    break;

  case 258:
#line 3918 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                     yyval.decl = yyvsp[0].decl;
                     SwigType_push(yyvsp[-1].type,yyvsp[0].decl.type);
		     yyval.decl.type = yyvsp[-1].type;
		     Delete(yyvsp[0].decl.type);
                  }
    break;

  case 259:
#line 3924 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		    yyval.decl.type = yyvsp[-1].type;
		    SwigType_add_reference(yyval.decl.type);
		    yyval.decl.id = 0;
		    yyval.decl.parms = 0;
		    yyval.decl.have_parms = 0;
		  }
    break;

  case 260:
#line 3931 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		    yyval.decl = yyvsp[0].decl;
		    SwigType_add_reference(yyvsp[-2].type);
		    if (yyval.decl.type) {
		      SwigType_push(yyvsp[-2].type,yyval.decl.type);
		      Delete(yyval.decl.type);
		    }
		    yyval.decl.type = yyvsp[-2].type;
                  }
    break;

  case 261:
#line 3940 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		    yyval.decl = yyvsp[0].decl;
                  }
    break;

  case 262:
#line 3943 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		    yyval.decl = yyvsp[0].decl;
		    yyval.decl.type = NewString("");
		    SwigType_add_reference(yyval.decl.type);
		    if (yyvsp[0].decl.type) {
		      SwigType_push(yyval.decl.type,yyvsp[0].decl.type);
		      Delete(yyvsp[0].decl.type);
		    }
                  }
    break;

  case 263:
#line 3952 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                    yyval.decl.id = 0;
                    yyval.decl.parms = 0;
		    yyval.decl.have_parms = 0;
                    yyval.decl.type = NewString("");
		    SwigType_add_reference(yyval.decl.type);
                  }
    break;

  case 264:
#line 3959 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
		    yyval.decl.type = NewString("");
                    SwigType_add_memberpointer(yyval.decl.type,yyvsp[-1].str);
                    yyval.decl.id = 0;
                    yyval.decl.parms = 0;
		    yyval.decl.have_parms = 0;
      	          }
    break;

  case 265:
#line 3966 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
		    SwigType *t = NewString("");
                    yyval.decl.type = yyvsp[-2].type;
		    yyval.decl.id = 0;
		    yyval.decl.parms = 0;
		    yyval.decl.have_parms = 0;
		    SwigType_add_memberpointer(t,yyvsp[-1].str);
		    SwigType_push(yyval.decl.type,t);
		    Delete(t);
                  }
    break;

  case 266:
#line 3976 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
		    yyval.decl = yyvsp[0].decl;
		    SwigType_add_memberpointer(yyvsp[-3].type,yyvsp[-2].str);
		    if (yyval.decl.type) {
		      SwigType_push(yyvsp[-3].type,yyval.decl.type);
		      Delete(yyval.decl.type);
		    }
		    yyval.decl.type = yyvsp[-3].type;
                  }
    break;

  case 267:
#line 3987 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
		    SwigType *t;
		    yyval.decl = yyvsp[-2].decl;
		    t = NewString("");
		    SwigType_add_array(t,(char*)"");
		    if (yyval.decl.type) {
		      SwigType_push(t,yyval.decl.type);
		      Delete(yyval.decl.type);
		    }
		    yyval.decl.type = t;
                  }
    break;

  case 268:
#line 3998 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
		    SwigType *t;
		    yyval.decl = yyvsp[-3].decl;
		    t = NewString("");
		    SwigType_add_array(t,yyvsp[-1].dtype.val);
		    if (yyval.decl.type) {
		      SwigType_push(t,yyval.decl.type);
		      Delete(yyval.decl.type);
		    }
		    yyval.decl.type = t;
                  }
    break;

  case 269:
#line 4009 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
		    yyval.decl.type = NewString("");
		    yyval.decl.id = 0;
		    yyval.decl.parms = 0;
		    yyval.decl.have_parms = 0;
		    SwigType_add_array(yyval.decl.type,(char*)"");
                  }
    break;

  case 270:
#line 4016 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
		    yyval.decl.type = NewString("");
		    yyval.decl.id = 0;
		    yyval.decl.parms = 0;
		    yyval.decl.have_parms = 0;
		    SwigType_add_array(yyval.decl.type,yyvsp[-1].dtype.val);
		  }
    break;

  case 271:
#line 4023 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                    yyval.decl = yyvsp[-1].decl;
		  }
    break;

  case 272:
#line 4026 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		    SwigType *t;
                    yyval.decl = yyvsp[-3].decl;
		    t = NewString("");
                    SwigType_add_function(t,yyvsp[-1].pl);
		    if (!yyval.decl.type) {
		      yyval.decl.type = t;
		    } else {
		      SwigType_push(t,yyval.decl.type);
		      Delete(yyval.decl.type);
		      yyval.decl.type = t;
		    }
		    if (!yyval.decl.have_parms) {
		      yyval.decl.parms = yyvsp[-1].pl;
		      yyval.decl.have_parms = 1;
		    }
		  }
    break;

  case 273:
#line 4043 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                    yyval.decl.type = NewString("");
                    SwigType_add_function(yyval.decl.type,yyvsp[-1].pl);
		    yyval.decl.parms = yyvsp[-1].pl;
		    yyval.decl.have_parms = 1;
		    yyval.decl.id = 0;
                  }
    break;

  case 274:
#line 4053 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
               yyval.type = NewString("");
               SwigType_add_pointer(yyval.type);
	       SwigType_push(yyval.type,yyvsp[-1].str);
	       SwigType_push(yyval.type,yyvsp[0].type);
	       Delete(yyvsp[0].type);
           }
    break;

  case 275:
#line 4060 "CableSwig/SWIG/Source/CParse/parser.y"
    {
	     yyval.type = NewString("");
	     SwigType_add_pointer(yyval.type);
	     SwigType_push(yyval.type,yyvsp[0].type);
	     Delete(yyvsp[0].type);
	     }
    break;

  case 276:
#line 4066 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
	     	yyval.type = NewString("");	
		SwigType_add_pointer(yyval.type);
	        SwigType_push(yyval.type,yyvsp[0].str);
           }
    break;

  case 277:
#line 4071 "CableSwig/SWIG/Source/CParse/parser.y"
    {
	      yyval.type = NewString("");
	      SwigType_add_pointer(yyval.type);
           }
    break;

  case 278:
#line 4077 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                  yyval.str = NewString("");
	          SwigType_add_qualifier(yyval.str,yyvsp[0].id);
               }
    break;

  case 279:
#line 4081 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                  yyval.str = yyvsp[0].str; 
                  SwigType_add_qualifier(yyval.str,yyvsp[-1].id);
               }
    break;

  case 280:
#line 4087 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.id = "const"; }
    break;

  case 281:
#line 4088 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.id = "volatile"; }
    break;

  case 282:
#line 4094 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                   yyval.type = yyvsp[0].type;
                   Replace(yyval.type,"typename ","", DOH_REPLACE_ANY);
                }
    break;

  case 283:
#line 4100 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                   yyval.type = yyvsp[0].type;
	           SwigType_push(yyval.type,yyvsp[-1].str);
               }
    break;

  case 284:
#line 4104 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.type = yyvsp[0].type; }
    break;

  case 285:
#line 4107 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.type = yyvsp[0].type;
                  /* Printf(stdout,"primitive = '%s'\n", $$);*/
                }
    break;

  case 286:
#line 4110 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.type = yyvsp[0].type; }
    break;

  case 287:
#line 4111 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.type = yyvsp[0].type; }
    break;

  case 288:
#line 4112 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.type = NewStringf("%s%s",yyvsp[-1].type,yyvsp[0].id); }
    break;

  case 289:
#line 4113 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.type = NewStringf("enum %s", yyvsp[0].str); }
    break;

  case 290:
#line 4114 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.type = yyvsp[0].type; }
    break;

  case 291:
#line 4115 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		  yyval.type = yyvsp[-1].type;
	          SwigType_push(yyval.type,yyvsp[0].str);
     	       }
    break;

  case 292:
#line 4120 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		  yyval.type = yyvsp[0].str;
               }
    break;

  case 293:
#line 4123 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
		 yyval.type = NewStringf("%s %s", yyvsp[-1].id, yyvsp[0].str);
               }
    break;

  case 294:
#line 4128 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 if (!yyvsp[0].ptype.type) yyvsp[0].ptype.type = NewString("int");
		 if (yyvsp[0].ptype.us) {
		   yyval.type = NewStringf("%s %s", yyvsp[0].ptype.us, yyvsp[0].ptype.type);
		   Delete(yyvsp[0].ptype.us);
                   Delete(yyvsp[0].ptype.type);
		 } else {
                   yyval.type = yyvsp[0].ptype.type;
		 }
		 if (Cmp(yyval.type,"signed int") == 0) {
		   Delete(yyval.type);
		   yyval.type = NewString("int");
                 } else if (Cmp(yyval.type,"signed long") == 0) {
		   Delete(yyval.type);
                   yyval.type = NewString("long");
                 } else if (Cmp(yyval.type,"signed short") == 0) {
		   Delete(yyval.type);
		   yyval.type = NewString("short");
		 } else if (Cmp(yyval.type,"signed long long") == 0) {
		   Delete(yyval.type);
		   yyval.type = NewString("long long");
		 }
               }
    break;

  case 295:
#line 4153 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                 yyval.ptype = yyvsp[0].ptype;
               }
    break;

  case 296:
#line 4156 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                    if (yyvsp[-1].ptype.us && yyvsp[0].ptype.us) {
		      Swig_error(cparse_file, cparse_line, "Extra %s specifier.\n", yyvsp[0].ptype.us);
		    }
                    yyval.ptype = yyvsp[0].ptype;
                    if (yyvsp[-1].ptype.us) yyval.ptype.us = yyvsp[-1].ptype.us;
		    if (yyvsp[-1].ptype.type) {
		      if (!yyvsp[0].ptype.type) yyval.ptype.type = yyvsp[-1].ptype.type;
		      else {
			int err = 0;
			if ((Cmp(yyvsp[-1].ptype.type,"long") == 0)) {
			  if ((Cmp(yyvsp[0].ptype.type,"long") == 0) || (Cmp(yyvsp[0].ptype.type,"double") == 0)) {
			    yyval.ptype.type = NewStringf("long %s", yyvsp[0].ptype.type);
			  } else if (Cmp(yyvsp[0].ptype.type,"int") == 0) {
			    yyval.ptype.type = yyvsp[-1].ptype.type;
			  } else {
			    err = 1;
			  }
			} else if ((Cmp(yyvsp[-1].ptype.type,"short")) == 0) {
			  if (Cmp(yyvsp[0].ptype.type,"int") == 0) {
			    yyval.ptype.type = yyvsp[-1].ptype.type;
			  } else {
			    err = 1;
			  }
			} else if (Cmp(yyvsp[-1].ptype.type,"int") == 0) {
			  yyval.ptype.type = yyvsp[0].ptype.type;
			} else if (Cmp(yyvsp[-1].ptype.type,"double") == 0) {
			  if (Cmp(yyvsp[0].ptype.type,"long") == 0) {
			    yyval.ptype.type = NewString("long double");
			  } else {
			    err = 1;
			  }
			}
			if (err) {
			  Swig_error(cparse_file, cparse_line, "Extra %s specifier.\n", yyvsp[-1].ptype.type);
			}
		      }
		    }
               }
    break;

  case 297:
#line 4198 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
		    yyval.ptype.type = NewString("int");
                    yyval.ptype.us = 0;
               }
    break;

  case 298:
#line 4202 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                    yyval.ptype.type = NewString("short");
                    yyval.ptype.us = 0;
                }
    break;

  case 299:
#line 4206 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                    yyval.ptype.type = NewString("long");
                    yyval.ptype.us = 0;
                }
    break;

  case 300:
#line 4210 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                    yyval.ptype.type = NewString("char");
                    yyval.ptype.us = 0;
                }
    break;

  case 301:
#line 4214 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                    yyval.ptype.type = NewString("float");
                    yyval.ptype.us = 0;
                }
    break;

  case 302:
#line 4218 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                    yyval.ptype.type = NewString("double");
                    yyval.ptype.us = 0;
                }
    break;

  case 303:
#line 4222 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                    yyval.ptype.us = NewString("signed");
                    yyval.ptype.type = 0;
                }
    break;

  case 304:
#line 4226 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                    yyval.ptype.us = NewString("unsigned");
                    yyval.ptype.type = 0;
                }
    break;

  case 305:
#line 4232 "CableSwig/SWIG/Source/CParse/parser.y"
    { /* scanner_check_typedef(); */ }
    break;

  case 306:
#line 4232 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                   yyval.dtype = yyvsp[0].dtype;
		   if (yyval.dtype.type == T_STRING) {
		     yyval.dtype.rawval = NewStringf("\"%(escape)s\"",yyval.dtype.val);
		   } else {
		     yyval.dtype.rawval = 0;
		   }
		   yyval.dtype.bitfield = 0;
		   yyval.dtype.throws = 0;
		   scanner_ignore_typedef();
                }
    break;

  case 307:
#line 4251 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                   yyval.dtype.val = NewString(yyvsp[0].str);
		   /*		   $$.rawval = NewStringf("\'%(escape)s\'",$$.val); */
		   /*		   Printf(stdout,"rawval = '%s'\n", $$.rawval); */
		   if (Len(yyval.dtype.val)) {
		     yyval.dtype.rawval = NewStringf("\'%(escape)s\'", yyval.dtype.val);
		   } else {
		     yyval.dtype.rawval = NewString("\'\\0'");
		   }
		   yyval.dtype.type = T_CHAR;
		   yyval.dtype.bitfield = 0;
		   yyval.dtype.throws = 0;
		 }
    break;

  case 308:
#line 4268 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.id = yyvsp[0].id; }
    break;

  case 309:
#line 4269 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.id = (char *) 0;}
    break;

  case 310:
#line 4274 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                   Node *leftSibling = Getattr(yyvsp[-2].node,"_last");
		   if (!leftSibling) {
                     leftSibling=yyvsp[-2].node;
		   }
                   set_nextSibling(leftSibling,yyvsp[0].node);
                   Setattr(yyvsp[-2].node,"_last",yyvsp[0].node);
                   if (yyvsp[0].node && !Getattr(yyvsp[0].node, "enumvalue")) {
                     /* There is no explicit enum value given, so make one. */
                     Setattr(yyvsp[0].node,"enumvalue", NewStringf("%s+1", Getattr(leftSibling,"name")));
                   }
		   yyval.node = yyvsp[-2].node;
               }
    break;

  case 311:
#line 4287 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                   yyval.node = yyvsp[0].node; 
                   if (!Getattr(yyvsp[0].node, "enumvalue")) {
                     /* first enum item value defaults to 0 */
                     Setattr(yyvsp[0].node,"enumvalue", "0");
                   }
               }
    break;

  case 312:
#line 4296 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		   yyval.node = new_node("enumitem");
		   Setattr(yyval.node,"name",yyvsp[0].id);
		   Setattr(yyval.node,"type",NewSwigType(T_INT));
		   Setattr(yyval.node,"feature:immutable","1");
		 }
    break;

  case 313:
#line 4302 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		   yyval.node = new_node("enumitem");
		   Setattr(yyval.node,"name",yyvsp[-2].id);
		   Setattr(yyval.node,"enumvalue", yyvsp[0].dtype.val);
	           if (yyvsp[0].dtype.type == T_CHAR) {
		     Setattr(yyval.node,"value",yyvsp[0].dtype.val);
		     Setattr(yyval.node,"type",NewSwigType(T_CHAR));
		   } else {
		     Setattr(yyval.node,"value",yyvsp[-2].id);
		     Setattr(yyval.node,"type",NewSwigType(T_INT));
		   }
		   Setattr(yyval.node,"feature:immutable","1");
                 }
    break;

  case 314:
#line 4315 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = 0; }
    break;

  case 315:
#line 4318 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                   yyval.dtype = yyvsp[0].dtype;
		   if ((yyval.dtype.type != T_INT) && (yyval.dtype.type != T_UINT) &&
		       (yyval.dtype.type != T_LONG) && (yyval.dtype.type != T_ULONG) &&
		       (yyval.dtype.type != T_SHORT) && (yyval.dtype.type != T_USHORT) &&
		       (yyval.dtype.type != T_SCHAR) && (yyval.dtype.type != T_UCHAR)) {
		     Swig_error(cparse_file,cparse_line,"Type error. Expecting an int\n");
		   }
                }
    break;

  case 316:
#line 4327 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                   yyval.dtype.val  = NewString(yyvsp[0].str);
		   yyval.dtype.type = T_INT;
		 }
    break;

  case 317:
#line 4338 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.dtype = yyvsp[0].dtype; }
    break;

  case 318:
#line 4339 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
		    yyval.dtype.val = NewString(yyvsp[0].id); 
                    yyval.dtype.type = T_STRING; 
               }
    break;

  case 319:
#line 4343 "CableSwig/SWIG/Source/CParse/parser.y"
    {
  		  SwigType_push(yyvsp[-2].type,yyvsp[-1].decl.type);
		  yyval.dtype.val = NewStringf("sizeof(%s)",SwigType_str(yyvsp[-2].type,0));
		  yyval.dtype.type = T_INT;
               }
    break;

  case 320:
#line 4348 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.dtype = yyvsp[0].dtype; }
    break;

  case 321:
#line 4349 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 Node *n;
		 yyval.dtype.val = yyvsp[0].type;
		 yyval.dtype.type = T_INT;
		 /* Check if value is in scope */
		 n = Swig_symbol_clookup(yyvsp[0].type,0);
		 if (n) {
		   if (Getattr(n,"access") && (cplus_mode == CPLUS_PUBLIC)) {
		     Swig_warning(WARN_PARSE_PRIVATE,cparse_file, cparse_line, "'%s' is private in this context.\n", yyvsp[0].type);
		     yyval.dtype.type = T_ERROR;
		   } else {
		     /* A band-aid for enum values used in expressions. */
		     if (Strcmp(nodeType(n),"enumitem") == 0) {
		       String *q = Swig_symbol_qualified(n);
		       if (q) {
			 yyval.dtype.val = NewStringf("%s::%s", q, Getattr(n,"name"));
			 Delete(q);
		       }
		     }
		   }
		 }
               }
    break;

  case 322:
#line 4373 "CableSwig/SWIG/Source/CParse/parser.y"
    {
   	            yyval.dtype.val = NewStringf("(%s)",yyvsp[-1].dtype.val);
		    yyval.dtype.type = yyvsp[-1].dtype.type;
   	       }
    break;

  case 323:
#line 4380 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 yyval.dtype = yyvsp[0].dtype;
		 if (yyvsp[0].dtype.type != T_STRING) {
		   yyval.dtype.val = NewStringf("(%s) %s", SwigType_str(yyvsp[-2].dtype.val,0), yyvsp[0].dtype.val);
		 }
 	       }
    break;

  case 324:
#line 4386 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 yyval.dtype = yyvsp[0].dtype;
		 if (yyvsp[0].dtype.type != T_STRING) {
		   SwigType_push(yyvsp[-3].dtype.val,yyvsp[-2].type);
		   yyval.dtype.val = NewStringf("(%s) %s", SwigType_str(yyvsp[-3].dtype.val,0), yyvsp[0].dtype.val);
		 }
 	       }
    break;

  case 325:
#line 4393 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 yyval.dtype = yyvsp[0].dtype;
		 if (yyvsp[0].dtype.type != T_STRING) {
		   SwigType_add_reference(yyvsp[-3].dtype.val);
		   yyval.dtype.val = NewStringf("(%s) %s", SwigType_str(yyvsp[-3].dtype.val,0), yyvsp[0].dtype.val);
		 }
 	       }
    break;

  case 326:
#line 4400 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 yyval.dtype = yyvsp[0].dtype;
		 if (yyvsp[0].dtype.type != T_STRING) {
		   SwigType_push(yyvsp[-4].dtype.val,yyvsp[-3].type);
		   SwigType_add_reference(yyvsp[-4].dtype.val);
		   yyval.dtype.val = NewStringf("(%s) %s", SwigType_str(yyvsp[-4].dtype.val,0), yyvsp[0].dtype.val);
		 }
 	       }
    break;

  case 327:
#line 4410 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.dtype = yyvsp[0].dtype; }
    break;

  case 328:
#line 4411 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.dtype = yyvsp[0].dtype; }
    break;

  case 329:
#line 4412 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.dtype = yyvsp[0].dtype; }
    break;

  case 330:
#line 4413 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.dtype = yyvsp[0].dtype; }
    break;

  case 331:
#line 4414 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.dtype = yyvsp[0].dtype; }
    break;

  case 332:
#line 4415 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.dtype = yyvsp[0].dtype; }
    break;

  case 333:
#line 4416 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.dtype = yyvsp[0].dtype; }
    break;

  case 334:
#line 4419 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.dtype.val = NewStringf("%s+%s",yyvsp[-2].dtype.val,yyvsp[0].dtype.val);
		 yyval.dtype.type = promote(yyvsp[-2].dtype.type,yyvsp[0].dtype.type);
	       }
    break;

  case 335:
#line 4423 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.dtype.val = NewStringf("%s-%s",yyvsp[-2].dtype.val,yyvsp[0].dtype.val);
		 yyval.dtype.type = promote(yyvsp[-2].dtype.type,yyvsp[0].dtype.type);
	       }
    break;

  case 336:
#line 4427 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.dtype.val = NewStringf("%s*%s",yyvsp[-2].dtype.val,yyvsp[0].dtype.val);
		 yyval.dtype.type = promote(yyvsp[-2].dtype.type,yyvsp[0].dtype.type);
	       }
    break;

  case 337:
#line 4431 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.dtype.val = NewStringf("%s/%s",yyvsp[-2].dtype.val,yyvsp[0].dtype.val);
		 yyval.dtype.type = promote(yyvsp[-2].dtype.type,yyvsp[0].dtype.type);
	       }
    break;

  case 338:
#line 4435 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.dtype.val = NewStringf("%s&%s",yyvsp[-2].dtype.val,yyvsp[0].dtype.val);
		 yyval.dtype.type = promote(yyvsp[-2].dtype.type,yyvsp[0].dtype.type);
	       }
    break;

  case 339:
#line 4439 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.dtype.val = NewStringf("%s|%s",yyvsp[-2].dtype.val,yyvsp[0].dtype.val);
		 yyval.dtype.type = promote(yyvsp[-2].dtype.type,yyvsp[0].dtype.type);
	       }
    break;

  case 340:
#line 4443 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.dtype.val = NewStringf("%s^%s",yyvsp[-2].dtype.val,yyvsp[0].dtype.val);
		 yyval.dtype.type = promote(yyvsp[-2].dtype.type,yyvsp[0].dtype.type);
	       }
    break;

  case 341:
#line 4447 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.dtype.val = NewStringf("%s<<%s",yyvsp[-2].dtype.val,yyvsp[0].dtype.val);
		 yyval.dtype.type = promote(yyvsp[-2].dtype.type,yyvsp[0].dtype.type);
	       }
    break;

  case 342:
#line 4451 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.dtype.val = NewStringf("%s>>%s",yyvsp[-2].dtype.val,yyvsp[0].dtype.val);
		 yyval.dtype.type = promote(yyvsp[-2].dtype.type,yyvsp[0].dtype.type);
	       }
    break;

  case 343:
#line 4455 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.dtype.val = NewStringf("%s&&%s",yyvsp[-2].dtype.val,yyvsp[0].dtype.val);
		 yyval.dtype.type = T_INT;
	       }
    break;

  case 344:
#line 4459 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.dtype.val = NewStringf("%s||%s",yyvsp[-2].dtype.val,yyvsp[0].dtype.val);
		 yyval.dtype.type = T_INT;
	       }
    break;

  case 345:
#line 4463 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.dtype.val = NewStringf("-%s",yyvsp[0].dtype.val);
		 yyval.dtype.type = yyvsp[0].dtype.type;
	       }
    break;

  case 346:
#line 4467 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 yyval.dtype.val = NewStringf("+%s",yyvsp[0].dtype.val);
		 yyval.dtype.type = yyvsp[0].dtype.type;
  	       }
    break;

  case 347:
#line 4471 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.dtype.val = NewStringf("~%s",yyvsp[0].dtype.val);
		 yyval.dtype.type = yyvsp[0].dtype.type;
	       }
    break;

  case 348:
#line 4475 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 yyval.dtype.val = NewStringf("!%s",yyvsp[0].dtype.val);
		 yyval.dtype.type = T_INT;
	       }
    break;

  case 349:
#line 4479 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 skip_balanced('(',')');
		 if (SwigType_istemplate(yyvsp[-1].type)) {
		   yyvsp[-1].type = SwigType_namestr(yyvsp[-1].type);
		 }
		 yyval.dtype.val = NewStringf("%s%s",yyvsp[-1].type,scanner_ccode);
		 Clear(scanner_ccode);
		 yyval.dtype.type = T_INT;
               }
    break;

  case 350:
#line 4490 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.bases = yyvsp[0].bases;
               }
    break;

  case 351:
#line 4495 "CableSwig/SWIG/Source/CParse/parser.y"
    { inherit_list = 1; }
    break;

  case 352:
#line 4495 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.bases = yyvsp[0].bases; inherit_list = 0; }
    break;

  case 353:
#line 4496 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.bases = 0; }
    break;

  case 354:
#line 4499 "CableSwig/SWIG/Source/CParse/parser.y"
    {
	           yyval.bases = NewList();
	           if (yyvsp[0].node) Append(yyval.bases,yyvsp[0].node);
               }
    break;

  case 355:
#line 4504 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                   yyval.bases = yyvsp[-2].bases;
                   if (yyvsp[0].node) Append(yyval.bases,yyvsp[0].node);
               }
    break;

  case 356:
#line 4510 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 if (last_cpptype && (Strcmp(last_cpptype,"struct") != 0)) {
                     Swig_warning(WARN_PARSE_NO_ACCESS,cparse_file, cparse_line,"No access specifier given for base class %s (ignored).\n",yyvsp[0].str);
   		     yyval.node = (char *) 0;
                 } else {
		   yyval.node = yyvsp[0].str;
		   Setfile(yyval.node,cparse_file);
		   Setline(yyval.node,cparse_line);
		 }
               }
    break;

  case 357:
#line 4520 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.node = 0;
	         if (strcmp(yyvsp[-2].id,"public") == 0) {
		   yyval.node = yyvsp[0].str;
		   Setfile(yyval.node, cparse_file);
		   Setline(yyval.node, cparse_line);
		 } else {
		   Swig_warning(WARN_PARSE_PRIVATE_INHERIT, cparse_file, cparse_line, "%s inheritance ignored.\n", yyvsp[-2].id);
		 }
               }
    break;

  case 358:
#line 4532 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.id = (char*)"public"; }
    break;

  case 359:
#line 4533 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.id = (char*)"private"; }
    break;

  case 360:
#line 4534 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.id = (char*)"protected"; }
    break;

  case 361:
#line 4538 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                   yyval.id = (char*)"class"; 
		   if (!inherit_list) last_cpptype = yyval.id;
               }
    break;

  case 362:
#line 4542 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                   yyval.id = (char*)"struct"; 
		   if (!inherit_list) last_cpptype = yyval.id;
               }
    break;

  case 363:
#line 4546 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                   yyval.id = (char*)"union"; 
		   if (!inherit_list) last_cpptype = yyval.id;
               }
    break;

  case 364:
#line 4550 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                   yyval.id = (char *)"typename"; 
		   if (!inherit_list) last_cpptype = yyval.id;
               }
    break;

  case 367:
#line 4560 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                    yyval.dtype.qualifier = yyvsp[0].str;
                    yyval.dtype.throws = 0;
               }
    break;

  case 368:
#line 4564 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                    yyval.dtype.qualifier = 0;
                    yyval.dtype.throws = yyvsp[-1].pl;
               }
    break;

  case 369:
#line 4568 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                    yyval.dtype.qualifier = yyvsp[-4].str;
                    yyval.dtype.throws = yyvsp[-1].pl;
               }
    break;

  case 370:
#line 4572 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                    yyval.dtype.qualifier = 0; 
                    yyval.dtype.throws = 0;
               }
    break;

  case 371:
#line 4578 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                    Clear(scanner_ccode); 
                    yyval.decl.have_parms = 0; 
                    yyval.decl.defarg = 0; 
		    yyval.decl.throws = yyvsp[-2].dtype.throws;
               }
    break;

  case 372:
#line 4584 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                    skip_balanced('{','}'); 
                    yyval.decl.have_parms = 0; 
                    yyval.decl.defarg = 0; 
                    yyval.decl.throws = yyvsp[-2].dtype.throws;
               }
    break;

  case 373:
#line 4590 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                    Clear(scanner_ccode); 
                    yyval.decl.parms = yyvsp[-2].pl; 
                    yyval.decl.have_parms = 1; 
                    yyval.decl.defarg = 0; 
		    yyval.decl.throws = 0;
               }
    break;

  case 374:
#line 4597 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                    skip_balanced('{','}'); 
                    yyval.decl.parms = yyvsp[-2].pl; 
                    yyval.decl.have_parms = 1; 
                    yyval.decl.defarg = 0; 
                    yyval.decl.throws = 0;
               }
    break;

  case 375:
#line 4604 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                    yyval.decl.have_parms = 0; 
                    yyval.decl.defarg = yyvsp[-1].dtype.val; 
                    yyval.decl.throws = 0;
               }
    break;

  case 380:
#line 4619 "CableSwig/SWIG/Source/CParse/parser.y"
    {
	            skip_balanced('(',')');
                    Clear(scanner_ccode);
            	}
    break;

  case 381:
#line 4625 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                     String *s = NewString("");
                     SwigType_add_template(s,yyvsp[-1].p);
                     yyval.id = Char(s);
		     scanner_last_id(1);
                 }
    break;

  case 382:
#line 4631 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.id = (char*)"";  }
    break;

  case 383:
#line 4634 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.id = yyvsp[0].id; }
    break;

  case 384:
#line 4635 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.id = yyvsp[0].id; }
    break;

  case 385:
#line 4638 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.id = yyvsp[0].id; }
    break;

  case 386:
#line 4639 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.id = 0; }
    break;

  case 387:
#line 4642 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                  yyval.str = 0;
		  if (!yyval.str) yyval.str = NewStringf("%s%s", yyvsp[-1].str,yyvsp[0].str);
      	          Delete(yyvsp[0].str);
               }
    break;

  case 388:
#line 4647 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
		 yyval.str = NewStringf("::%s%s",yyvsp[-1].str,yyvsp[0].str);
                 Delete(yyvsp[0].str);
               }
    break;

  case 389:
#line 4651 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.str = NewString(yyvsp[0].str);
   	       }
    break;

  case 390:
#line 4654 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.str = NewStringf("::%s",yyvsp[0].str);
               }
    break;

  case 391:
#line 4657 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 yyval.str = NewString(yyvsp[0].str);
	       }
    break;

  case 392:
#line 4660 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 yyval.str = NewStringf("::%s",yyvsp[0].str);
               }
    break;

  case 393:
#line 4665 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                   yyval.str = NewStringf("::%s%s",yyvsp[-1].str,yyvsp[0].str);
		   Delete(yyvsp[0].str);
               }
    break;

  case 394:
#line 4669 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                   yyval.str = NewStringf("::%s",yyvsp[0].str);
               }
    break;

  case 395:
#line 4672 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                   yyval.str = NewStringf("::%s",yyvsp[0].str);
               }
    break;

  case 396:
#line 4679 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.str = NewStringf("::~%s",yyvsp[0].str);
               }
    break;

  case 397:
#line 4685 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                  yyval.str = NewStringf("%s%s",yyvsp[-1].id,yyvsp[0].id);
		  /*		  if (Len($2)) {
		    scanner_last_id(1);
		    } */
              }
    break;

  case 398:
#line 4694 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                  yyval.str = 0;
		  if (!yyval.str) yyval.str = NewStringf("%s%s", yyvsp[-1].id,yyvsp[0].str);
      	          Delete(yyvsp[0].str);
               }
    break;

  case 399:
#line 4699 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
		 yyval.str = NewStringf("::%s%s",yyvsp[-1].id,yyvsp[0].str);
                 Delete(yyvsp[0].str);
               }
    break;

  case 400:
#line 4703 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.str = NewString(yyvsp[0].id);
   	       }
    break;

  case 401:
#line 4706 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.str = NewStringf("::%s",yyvsp[0].id);
               }
    break;

  case 402:
#line 4709 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 yyval.str = NewString(yyvsp[0].str);
	       }
    break;

  case 403:
#line 4712 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 yyval.str = NewStringf("::%s",yyvsp[0].str);
               }
    break;

  case 404:
#line 4717 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                   yyval.str = NewStringf("::%s%s",yyvsp[-1].id,yyvsp[0].str);
		   Delete(yyvsp[0].str);
               }
    break;

  case 405:
#line 4721 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                   yyval.str = NewStringf("::%s",yyvsp[0].id);
               }
    break;

  case 406:
#line 4724 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                   yyval.str = NewStringf("::%s",yyvsp[0].str);
               }
    break;

  case 407:
#line 4727 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.str = NewStringf("::~%s",yyvsp[0].id);
               }
    break;

  case 408:
#line 4733 "CableSwig/SWIG/Source/CParse/parser.y"
    { 
                   yyval.id = (char *) malloc(strlen(yyvsp[-1].id)+strlen(yyvsp[0].id)+1);
                   strcpy(yyval.id,yyvsp[-1].id);
                   strcat(yyval.id,yyvsp[0].id);
               }
    break;

  case 409:
#line 4738 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.id = yyvsp[0].id;}
    break;

  case 410:
#line 4741 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.str = NewString(yyvsp[0].id);
               }
    break;

  case 411:
#line 4744 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                  skip_balanced('{','}');
		  yyval.str = NewString(scanner_ccode);
               }
    break;

  case 412:
#line 4748 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.str = yyvsp[0].str;
              }
    break;

  case 413:
#line 4753 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                  Hash *n;
                  yyval.node = NewHash();
                  n = yyvsp[-1].node;
                  while(n) {
                     String *name, *value;
                     name = Getattr(n,"name");
                     value = Getattr(n,"value");
		     if (!value) value = (String *) "1";
                     Setattr(yyval.node,name, value);
		     n = nextSibling(n);
		  }
               }
    break;

  case 414:
#line 4766 "CableSwig/SWIG/Source/CParse/parser.y"
    { yyval.node = 0; }
    break;

  case 415:
#line 4770 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.node = NewHash();
		 Setattr(yyval.node,"name",yyvsp[-2].id);
		 Setattr(yyval.node,"value",yyvsp[0].id);
               }
    break;

  case 416:
#line 4775 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.node = NewHash();
		 Setattr(yyval.node,"name",yyvsp[-4].id);
		 Setattr(yyval.node,"value",yyvsp[-2].id);
		 set_nextSibling(yyval.node,yyvsp[0].node);
               }
    break;

  case 417:
#line 4781 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 yyval.node = NewHash();
                 Setattr(yyval.node,"name",yyvsp[0].id);
	       }
    break;

  case 418:
#line 4785 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 yyval.node = NewHash();
                 Setattr(yyval.node,"name",yyvsp[-2].id);
                 set_nextSibling(yyval.node,yyvsp[0].node);
               }
    break;

  case 419:
#line 4792 "CableSwig/SWIG/Source/CParse/parser.y"
    {
		 yyval.id = yyvsp[0].id;
               }
    break;

  case 420:
#line 4795 "CableSwig/SWIG/Source/CParse/parser.y"
    {
                 yyval.id = Char(yyvsp[0].dtype.val);
               }
    break;


    }

/* Line 999 of yacc.c.  */
#line 8303 "CableSwig-build/SWIG/Source/CParse/parser.c"

  yyvsp -= yylen;
  yyssp -= yylen;


  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (YYPACT_NINF < yyn && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  int yytype = YYTRANSLATE (yychar);
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("syntax error, unexpected ") + 1;
	  yysize += yystrlen (yytname[yytype]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "syntax error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[yytype]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("syntax error; also virtual memory exhausted");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror ("syntax error");
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* Return failure if at end of input.  */
      if (yychar == YYEOF)
        {
	  /* Pop the error token.  */
          YYPOPSTACK;
	  /* Pop the rest of the stack.  */
	  while (yyss < yyssp)
	    {
	      YYDSYMPRINTF ("Error: popping", yystos[*yyssp], yyvsp, yylsp);
	      yydestruct (yystos[*yyssp], yyvsp);
	      YYPOPSTACK;
	    }
	  YYABORT;
        }

      YYDSYMPRINTF ("Error: discarding", yytoken, &yylval, &yylloc);
      yydestruct (yytoken, &yylval);
      yychar = YYEMPTY;

    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*----------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action.  |
`----------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      YYDSYMPRINTF ("Error: popping", yystos[*yyssp], yyvsp, yylsp);
      yydestruct (yystos[yystate], yyvsp);
      yyvsp--;
      yystate = *--yyssp;

      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;


  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*----------------------------------------------.
| yyoverflowlab -- parser overflow comes here.  |
`----------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}


#line 4802 "CableSwig/SWIG/Source/CParse/parser.y"


SwigType *Swig_cparse_type(String *s) {
   String *ns;
   ns = NewStringf("%s;",s);
   Seek(ns,0,SEEK_SET);
   scanner_file(ns);
   top = 0;
   scanner_next_token(PARSETYPE);
   yyparse();
   /*   Printf(stdout,"typeparse: '%s' ---> '%s'\n", s, top); */
   return top;
}


Parm *Swig_cparse_parm(String *s) {
   String *ns;
   ns = NewStringf("%s;",s);
   Seek(ns,0,SEEK_SET);
   scanner_file(ns);
   top = 0;
   scanner_next_token(PARSEPARM);
   yyparse();
   /*   Printf(stdout,"typeparse: '%s' ---> '%s'\n", s, top); */
   return top;
}










